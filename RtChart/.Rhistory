# severity dataset coming from all the country sheets of the excel file
# Function that transforms datasets in the sheets of the Severity Index xls file
# Will be used to create a full dataset made of all sheets (one sheet = one country)
# For info, matrix = data of same type, data frame = data can be different type
# If you transpose a data.frame, it becomes a matrix.
# Involves some workaround to recreate a data.frame
readSeverityDataset <- function(country) {
df <- read_excel(paste0(folder,"/ForDailyUpdate/19102020_PHSM Severity Index_v4_WHO EURO.xlsx"), sheet = country,col_names=FALSE) #DataFrame
dft <- t(df) #Dataframe has become a character matrix due to transposition
colnames(dft) <- dft[1,] #Rewriting the column names
colnames(dft)<-make.names(colnames(dft)) #Make sure column names are in acceptable format, no special character, no space,...
dft<-dft[-c(1), ] #Removing useless row
Severity<-dft[,c("X1.4_IND","X4.1_IND","X4.2_IND","X4.3_IND","X4.5_IND","X5_IND","PHSM.SI","Date")] #Selects only fields we are interested in
Severity<-as.data.frame(Severity) %>% mutate(Date=as.numeric(Date)) %>%
mutate(Date=as.Date(Date,origin = "1899-12-30")) %>%
convert(num("X1.4_IND","X4.1_IND","X4.2_IND","X4.3_IND","X4.5_IND","X5_IND","PHSM.SI"))
#Retransforms the matrix in a dataframe where different types of data are allowed, converts characters into dates or numbers
Severity$ADM0NAME<-country #Creates new field with country name as the final aim is to have a global dataset with all countries
Severity<-Severity %>% select(
Date,
ADM0NAME,
GlobalIndex=PHSM.SI,
Masks= X1.4_IND,
School = X4.1_IND,
Workplace=X4.2_IND,
Gatherings=X4.3_IND,
StayHome=X4.5_IND,
Travels=X5_IND,
) #Gives understandable column names
return(Severity)
}
#Returns list of all countries in the severity excel file
ListCountries_Index<-excel_sheets(paste0(folder,"/ForDailyUpdate/19102020_PHSM Severity Index_v4_WHO EURO.xlsx"))
#Creates the whole severity dataset with all countries
StringencyIndex<-data.frame()
for (country in ListCountries_Index){
StringencyIndex_<-readSeverityDataset(country)
StringencyIndex<-bind_rows(StringencyIndex,StringencyIndex_)
}
StringencyIndex<-StringencyIndex %>% filter(ADM0NAME %in% CountriesOfInterest$ADM0NAME)
write.csv(StringencyIndex,'StringencyIndex.csv',row.names=FALSE)
### End of steps related to severity/stringency
### 1.D Last final settings, creation of folder structure for the outputs, creation of palettes and chart theme that will be used a couple of times
#Will be used to create a legend
LegendTimeLine<-read.csv(paste0(folder,"/NoUpdateNeeded/LegendTimeLine.csv"))
MyPalette<-c("#008dc9ff", "#d86422ff", "#9E0031", "#d4aa7dff", "#197278ff","#686868", "#f2545bff", "#90a9b7ff", "#224870ff", "#66a182ff", "#885053ff")
ChartTheme <- theme_minimal()+theme(
axis.title.x = element_text(size = 18,color="#58585a"),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 18,color="#58585a"),
axis.text.y = element_text(size = 16),
legend.text=element_text(size=16,color="#58585a"),
)
#Palette Creation - Needed for epicurve with all countries
SixtyOneColors<-c("#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#4e8098",
"#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#4e8098",
"#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#4e8098",
"#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#4e8098",
"#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#4e8098",
"#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#4e8098",
"#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#4e8098",
"#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#4e8098",
"#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#4e8098",
"#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#4e8098",
"#9fc2cc",
"#46b1c9",
"#1b4965",
"#222e50",
"#BDD7EE",
"#FFC000",
"#00B050",
"#A6A6A6",
"#C00000",
"#002060",
"#327DC2")
#Palette Creation - Needed for epicurve top 10 countries
TenColors<-c("#46b1c9",
"#FF8811",
"#222e50",
"#BDD7EE",
"#FFC000",
"#00B050",
"#A6A6A6",
"#C00000",
"#002060",
"#327DC2")
CurrentDate<-max(MainDataset$DateReport1)
FirstDate<-min(MainDataset$DateReport1)
dir.create(paste0(folder,"/",CurrentDate))
OutputFolder<-paste0(folder,"/",CurrentDate)
dir.create(paste0(OutputFolder,"/Charts"))
dir.create(paste0(OutputFolder,"/SlideDeck"))
#### 2 - Calculations and plots used in the powerpoint ####
#### 2.1 - Calculations and Tables ####
# Useful on friday to check which countries are top 10 in 7 days cumulative
# NbCases_Days('France',14) would give the number of cases in France over the last 14 days (starting from last reporting date)
NbCases_Days<-function(Country,Days){
LastUpdate<-(Dataset_LastReportingDate %>% filter(ADM0NAME==Country))$LastUpdate
if (CurrentDate-LastUpdate<=3){
Cases<-(((MainDataset %>% filter(ADM0NAME==Country,DateReport1==LastUpdate))$TotalCases-
(MainDataset %>% filter(ADM0NAME==Country,DateReport1==LastUpdate-Days))$TotalCases))}
else {
Cases<-NA
}
return(Cases)
}
TableCases<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
Cases_7Days<-NbCases_Days(ctr,7)
vector<-data.frame(ctr,Cases_7Days)
TableCases<-bind_rows(vector,TableCases)
}
# End of section useful on friday
# Calculates % of cases per WHO region - Will be used in first overview slide
WorldRegions_Share<-WorldRegions_Data %>%
mutate (ShareCases=round(Cases/sum(WorldRegions_Data$Cases)*100),
ShareDeaths=round(Deaths/sum(WorldRegions_Data$Deaths)*100)) %>%
arrange(desc(ShareCases))
TotalNumberCasesAllEU <- MainDataset %>% filter (DateReport1==CurrentDate) %>%
summarise(GlobalCases=sum(TotalCases))
TotalNumberCasesAllEU_14DaysAgo <- MainDataset %>% filter (DateReport1==CurrentDate-14) %>%
summarise(GlobalCases=sum(TotalCases))
Evolution_EUCases_14Days<-TotalNumberCasesAllEU/TotalNumberCasesAllEU_14DaysAgo*100-100
TotalNumberDeathsAllEU<- MainDataset %>% filter (DateReport1==CurrentDate) %>%
summarise(GlobalDeaths=sum(TotalDeaths))
TotalNumberDeathsAllEU_14DaysAgo<- MainDataset %>% filter (DateReport1==CurrentDate-14) %>%
summarise(GlobalDeaths=sum(TotalDeaths))
Evolution_EUDeaths_14Days<-TotalNumberDeathsAllEU/TotalNumberDeathsAllEU_14DaysAgo*100-100
# Function that calculates a certain incidence with a certain delay
# Ex:
# - Incidence('France',14,0) will give the latest 14 days incidence in France
# - Incidence('Kosovo',7,7) will give the 7 days incidence in Kosovo one week before last reporting date.
# The function takes into account potential reporting delays.
# If the delay is more than 3 days, will return NA.
Incidence<-function(country,incidence,delay){
LastUpdate<-(Dataset_LastReportingDate %>% filter(ADM0NAME==country))$LastUpdate
if (CurrentDate-LastUpdate<=3){
Pop<-(Dataset_GlobalPopulation %>% filter(ADM0NAME==country))$UNPOP2019
Incidence<-round(((MainDataset %>% filter(ADM0NAME==country) %>% filter(DateReport1==LastUpdate-delay))$TotalCases-
(MainDataset %>% filter(ADM0NAME==country) %>% filter(DateReport1==LastUpdate-incidence-delay))$TotalCases)/Pop*100000,1)}
else {
Incidence<-NA
}
return(Incidence)
}
#Creates table all countries and their incidences
TableIncidences<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
FrtDaysIncidence_Latest<-Incidence(ctr,14,0)
FrtDaysIncidence_1WkEarlier<-Incidence(ctr,14,7)
FrtDaysIncidence_2WkEarlier<-Incidence(ctr,14,14)
SvnDaysIncidence_Latest<-Incidence(ctr,7,0)
SvnDaysIncidence_1WkEarlier<-Incidence(ctr,7,7)
SvnDaysIncidence_2WkEarlier<-Incidence(ctr,7,14)
vector<-data.frame(ctr,
FrtDaysIncidence_Latest,
FrtDaysIncidence_1WkEarlier,
FrtDaysIncidence_2WkEarlier,
SvnDaysIncidence_Latest,
SvnDaysIncidence_1WkEarlier,
SvnDaysIncidence_2WkEarlier
)
TableIncidences<-bind_rows(vector,TableIncidences)
}
#Adds a field that calculates the change in 14days incidence over 2 weeks
TableIncidences<-TableIncidences %>%
mutate(Change14DaysIncidence_2Weeks=round(FrtDaysIncidence_Latest/FrtDaysIncidence_2WkEarlier*100-100,1)) %>%
mutate(Change7DaysIncidence_1week=round(SvnDaysIncidence_Latest/SvnDaysIncidence_1WkEarlier*100-100,1))
#Function that calculates testing rate and positivity rate
Testing <- function(Country){
if(Country %in% unique(DatasetTesting$ï..REPORT_COUNTRY_FK)){
DatasetTesting_Country<- DatasetTesting %>% filter(ï..REPORT_COUNTRY_FK==Country) %>% arrange(REPORT_WEEK)
MaxWeek<-max(DatasetTesting_Country$REPORT_WEEK)
if ((nrow(DatasetTesting_Country %>% filter(REPORT_WEEK==MaxWeek-1)))!=0){
MaxDay<-format((max(DatasetTesting_Country$WEEK_START_DATE))+7,"%d %B %Y")
MinDay<-format((max(DatasetTesting_Country$WEEK_START_DATE))-7,"%d %B %Y")
Tests2Weeks<-(DatasetTesting_Country %>% filter(REPORT_WEEK==MaxWeek))$TESTED_ALL+(DatasetTesting_Country %>% filter(REPORT_WEEK==(MaxWeek-1)))$TESTED_ALL
Population<-(Dataset_GlobalPopulation %>% filter(ADM0NAME==Country))$UNPOP2019
RateTestingPer1000<-round(Tests2Weeks/(Population/1000),1)
Cases2Weeks<-(DatasetTesting_Country %>% filter(REPORT_WEEK==MaxWeek))$CASES+(DatasetTesting_Country %>% filter(REPORT_WEEK==(MaxWeek-1)))$CASES
PositivityRate<-round(Cases2Weeks/Tests2Weeks*100,1)}
else{
PositivityRate<-NA
RateTestingPer1000<-NA
MaxDay<-NA
MinDay<-NA
}}
else
{PositivityRate<-NA
RateTestingPer1000<-NA
MaxDay<-NA
MinDay<-NA}
return(list(PositivityRate=PositivityRate,RateTesting=RateTestingPer1000,MaxDay=MaxDay,MinDay=MinDay))
}
Hospitalization<-function(Country){
MaxWeek<-max(DatasetTesting$REPORT_WEEK)
if(Country %in% unique(DatasetTesting %>% filter(REPORT_WEEK==MaxWeek))$ï..REPORT_COUNTRY_FK){
DatasetTesting_Country_LastWeek<-DatasetTesting %>% filter(ï..REPORT_COUNTRY_FK==Country,REPORT_WEEK==MaxWeek)
DatasetTesting_Country_OneWeekBefore<-DatasetTesting %>% filter(ï..REPORT_COUNTRY_FK==Country,REPORT_WEEK==MaxWeek-1)
Hospitalized<-DatasetTesting_Country_LastWeek$HOSPITALISED
Hospitalized_WeekBefore<-DatasetTesting_Country_OneWeekBefore$HOSPITALISED
maxDay<-max(DatasetTesting$WEEK_START_DATE)
}
else
{Hospitalized<-NA
Hospitalized_WeekBefore<-NA
maxDay<-NA}
return(list(Hospitalized=Hospitalized,Hospitalized_WeekBefore=Hospitalized_WeekBefore,maxDay=maxDay))
}
TableHospitalization<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
Hospitalized<-Hospitalization(ctr)$Hospitalized
Hospitalized_WeekBefore<-Hospitalization(ctr)$Hospitalized_WeekBefore
vector<-data.frame(ctr,
Hospitalized,
Hospitalized_WeekBefore)
TableHospitalization<-bind_rows(vector,TableHospitalization)
}
#Table for all countries with all testing figures (when available, otherwise NA)
TableTesting<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
Testing_PosRate<-Testing(ctr)$PositivityRate
Testing_RateTesting<-Testing(ctr)$RateTesting
Testing_minDay<-Testing(ctr)$MinDay
Testing_maxDay<-Testing(ctr)$MaxDay
vector<-data.frame(ctr,
Testing_PosRate,
Testing_RateTesting,
Testing_minDay,
Testing_maxDay)
TableTesting<-bind_rows(vector,TableTesting)
}
SummaryTable_AllCountries<- MainDataset %>% filter(DateReport1==CurrentDate) %>%
select(ADM0NAME,TotalCases,TotalDeaths,TransmissionStatus,RO,Trend,UNPOP2019) %>%
left_join(TableIncidences,by=c('ADM0NAME'='ctr')) %>%
left_join(TableCases,by=c('ADM0NAME'='ctr')) %>%
mutate(CumulativeIncidence=round(TotalCases/UNPOP2019*100000,1)) %>%
mutate(Share=round(TotalCases/TotalNumberCasesAllEU[1,1]*100,1),
RateDeaths=round(TotalDeaths/UNPOP2019*1000000,1)) %>%
left_join(TableTesting,by=c('ADM0NAME'='ctr')) %>%
left_join(TableHospitalization,by=c('ADM0NAME'='ctr')) %>%
mutate(HospitalizationRate=Hospitalized/UNPOP2019*1000000,
HospitalizationRate_WeekBefore=Hospitalized_WeekBefore/UNPOP2019*1000000)
write.csv(SummaryTable_AllCountries,paste0(OutputFolder,'/SummaryTable.csv'))
country<-'Belgium'
length(country)
test<-NULL
length(test)
library(epitweetr)
epitweetr_app('C:/Users/romanc/Desktop/R/Scripts/EpiTweeterData')
epitweetr_app('C:/Users/romanc/Desktop/R/Scripts/EpiTweeterData')
epitweetr_app('C:/Users/romanc/Desktop/R/Scripts/EpiTweeterData')
install.packages('epitweetr')
install.packages("epitweetr")
library('epitweetr')
epitweetr_app('C:/Users/romanc/Desktop/R/Scripts/EpiTweeterData')
library(rJava)
epitweetr_app('C:/Users/romanc/Desktop/R/Scripts/EpiTweeterData')
Sys.getenv("JAVA_HOME")
Sys.getenv('JRE_HOME')
epitweetr_app('C:/Users/romanc/Desktop/R/Scripts/EpiTweeterData')
library('epitweetr')
epitweetr_app('C:/Users/romanc/Desktop/R/Scripts/EpiTweeterData')
Sys.getenv("JAVA_HOME")
Sys.getenv("JRE_HOME")
epitweetr_app('C:/Users/romanc/Desktop/R/Scripts/EpiTweeterData')
Sys.getenv("JRE_HOME")
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
Sys.getenv("JRE_HOME")
Date<-Sys.Date()
install.packages('rvest')
url<-'https://stopcov.ge/en/'
test<-read_html(url)
library('rvest')
url<-'https://stopcov.ge/en/'
test<-read_html(url)
test
read_html("https://stopcov.ge/en/") %>%
html_nodes(“.statistic-square”)
library('dplyr')
read_html("https://stopcov.ge/en/") %>%
html_nodes(“.statistic-square”)
test<-read_html("https://stopcov.ge/en/")
test
test<-read_html("https://stopcov.ge/en/") %>%
html_nodes('.statistic-square')
View(test)
test<-read_html("https://stopcov.ge/en/") %>%
html_nodes('.statistic-square') %>%
html_text()
test
test<-read_html("https://stopcov.ge/en/") %>%
html_nodes('.statistic-square') %>%
html_table()
test<-read_html("https://stopcov.ge/en/") %>%
html_nodes('.statistic-square') %>%
html_text()
test<-read_html("https://stopcov.ge/en/") %>%
html_nodes('.statistic-square')
test$1
View(test)
test[[1]]
test[[2]]
test<-read_html("https://stopcov.ge/en/") %>%
html_nodes('.statistic-square') %>%
html_text()
test
GlobalCases<-test[1]
Hospitalized<-test[2]
Hospitalized<-test[3]
shiny::runApp('GitHub/PSHM_Explorer_SingleCountry')
runApp('GitHub/PSHM_Explorer_SingleCountry')
runApp('GitHub/PSHM_Explorer_SingleCountry')
PackagesToInstall<-c("hablar","ggsci","stringr","magick","gridExtra","lubridate","readxl","RColorBrewer","ggplot2","dplyr","rmarkdown","kableExtra","flextable","ggpubr","knitr","scales","tidyr","scales","xml2","rvest","qdapRegex",'cowplot')
for (i in PackagesToInstall) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
Week<-44
StartDate<-as.Date('2020-10-19')
EndDate<-as.Date('2020-10-25')
folder<-dirname(rstudioapi::getSourceEditorContext()$path)
TessyDataset<-read_excel(paste0(folder,'/Tessy_44.xlsx'))
ECDCDataset<-read_excel(paste0(folder,'/ECDC_44.xlsx'),.name_repair = "universal") %>%
select(country=Country,ECDC_case_inc=Case.rate,ECDC_mort_rate=Death.rate,ECDC_positivity=Positivity....,Testing.rate,ECDC_hosp_rate=Hospital.admissions,ECDC_Hosp_occ=Hospital.occupancy,ICU.admissions,ECDC_ICU_occ=ICU.occupancy)
HQDataset<-read_excel(paste0(folder,'/HQData.xlsx'),sheet='testing') %>%
filter(country %in% unique(TessyDataset$country)) %>%
filter(date>=StartDate,date<=EndDate)
HQ_Positivity_Country<-function(ctr){
DatasetPerCountry<-HQDataset %>% filter(country==ctr)
DatasetPerCountry<-DatasetPerCountry %>% mutate(Tests=total_tests-lag(total_tests,6))
Tests<-(DatasetPerCountry %>% filter(date==EndDate))$Tests
CaseTotal<-DatasetPerCountry %>% summarize(Cases=sum(case_new))
Positivity<-round(CaseTotal/Tests*100,1)
return(as.data.frame(c(country=ctr,Positivity=Positivity)))
}
HQ_Positivity_AllCountries<-data.frame()
for (ctr in unique(HQDataset$country)){
row<-HQ_Positivity_Country(ctr)
HQ_Positivity_AllCountries<-rbind(HQ_Positivity_AllCountries,row)
}
HQ_Positivity_AllCountries<-HQ_Positivity_AllCountries %>% select(country,HQ_positivity=Positivity.Cases)
#Adding ECDC Data
GlobalDataset<-TessyDataset %>% left_join(ECDCDataset,by='country') %>%
mutate(positivity=if_else(is.na(positivity),ECDC_positivity,positivity),
hosp_rate=if_else(is.na(hosp_rate),ECDC_hosp_rate,hosp_rate))
#Adding HQ Data
GlobalDataset<-GlobalDataset %>% left_join(HQ_Positivity_AllCountries,by='country') %>%
mutate(positivity=if_else(is.na(positivity),HQ_positivity,positivity))
View(TessyDataset)
View(GlobalDataset)
# Mauna Loa atmospheric CO2 change
# multi language plot for Wikipedia
# Required packages
library(tidyverse)
library(gridExtra)
library(scales)
library(lubridate)
# Translations ------------------------------------------------------------
language <- list(
en_US = list(
locale_lc_time = "en_US.UTF-8",
title = expression(paste("Monthly mean ", CO[2], " concentration ")),
caption = paste("Data : R. F. Keeling, S. J. Walker, S. C. Piper and A. F. Bollenbacher\nScripps CO2 Program (http://scrippsco2.ucsd.edu). Accessed ", Sys.Date()),
x = "Year",
y = expression(paste(CO[2], " fraction in dry air (", mu, "mol/mol)")),
x2 = "Month",
y2 = expression(atop(paste(CO[2], " fraction in dry air (", mu, "mol/mol)"), "Departure from yearly average")),
title2 = "Seasonal variation"
),
fr_FR = list(
locale_lc_time = "fr_FR.UTF-8",
title = expression(paste("Moyenne mensuelle de la concentration de ", CO[2])),
caption = paste("données : R. F. Keeling, S. J. Walker, S. C. Piper et A. F. Bollenbacher\nScripps CO2 Program (http://scrippsco2.ucsd.edu). Accédé le", Sys.Date()),
x = "année",
y = expression(paste("fraction de ", CO[2], " dans l'air sec (", mu, "mol/mol)")),
x2 = "mois",
y2 = expression(atop(paste("fraction de ", CO[2], " dans l'air sec (", mu, "mol/mol)"), "en écart à la moyenne annuelle")),
title2 = "Variation saisonnière"
),
de_DE = list(
locale_lc_time = "de_DE.UTF-8",
title = expression(paste("Monatliche durchschnittliche ", CO[2], "-Konzentration")),
caption = paste("Datei : R. F. Keeling, S. J. Walker, S. C. Piper und A. F. Bollenbacher\nScripps CO2 Program (http://scrippsco2.ucsd.edu). Zugänglich am", Sys.Date()),
x = "Jahr",
y = expression(paste(CO[2], "-Anteil in trockener Luft (", mu, "mol/mol)")),
x2 = "Monate",
y2 = expression(atop(paste(CO[2], "-Anteil in trockener Luft (", mu, "mol/mol)"), "Abweichung vom Jahresmittel")),
title2 = "Monatliche Variation"
),
es_ES = list(
locale_lc_time = "es_ES.UTF-8",
title = expression(paste("Media mensual de la concentración de ", CO[2])),
caption = paste("dato : R. F. Keeling, S. J. Walker, S. C. Piper y A. F. Bollenbacher\nScripps CO2 Program (http://scrippsco2.ucsd.edu). Visitada", Sys.Date()),
x = "Año",
y = expression(paste("Fraccion de ", CO[2],  " en aire secco (", mu, "mol/mol)")),
x2 = "Mes",
y2 = expression(atop(paste("Fraccion de ", CO[2],  " en aire secco (", mu, "mol/mol)"), "Desviación de la media anual")),
title2 = "Variación mensual"
),
cs_CZ = list(
locale_lc_time = "cs_CZ.UTF-8",
title = expression(paste("Průměrné měsíční koncentrace oxidu uhličitého")),
caption = paste("data : R. F. Keeling, S. J. Walker, S. C. Piper a A. F. Bollenbacher\nScripps CO2 Program (http://scrippsco2.ucsd.edu). Přístupné", Sys.Date()),
x = "rok",
y = expression(paste("koncentrace ", CO[2], " v suchém vzduchu (", mu, "mol/mol)")),
x2 = "měsíc",
y2 = expression(atop(paste("koncentrace ", CO[2], " v suchém vzduchu (", mu, "mol/mol)"), "odchylka od ročního průměru")),
title2 = "Měsíční změna (průměrná roční odchylka)"
),
nn_NO = list(
locale_lc_time = "nn_NO.UTF-8",
title = expression(paste("Gjennomsnittlig månedlig ", CO[2], "-konsentrasjon")),
caption = paste("data : R. F. Keeling, S. J. Walker, S. C. Piper og A. F. Bollenbacher\nScripps CO2 Program (http://scrippsco2.ucsd.edu). Vist", Sys.Date()),
x = "År",
y = expression(paste(CO[2],"-andel i tørr luft (", mu, "mol/mol)")),
x2 = "Måned",
y2 = expression(atop(paste(CO[2],"-andel i tørr luft (", mu, "mol/mol)"),
"Avvik fra årlig gjennomsnitt")),
title2 = "Årlig variasjon"
)
)
View(language)
co2ml <- read_csv("http://scrippsco2.ucsd.edu/assets/data/atmospheric/stations/in_situ_co2/monthly/monthly_in_situ_co2_mlo.csv",
col_names = c("year", "month", "xls_date", "decimal",
"co2", "co2_seas_adj", "fit", "fit_seas_adj",
"co2_filled", "co2_filled_seas_adj"),
col_types = "iiiddddddd",
skip = 57,
na = "-99.99",
comment = "\"") %>%
group_by(year) %>%
mutate(year_mean = mean(co2_filled, na.rm = TRUE),
delta = co2_filled - year_mean,
vdate = ymd(paste0("2015-", month, "-01")))
View(co2ml)
names(language)
l<-en_US
l<-'en_US'
message(l)
current <- language[[l]]
View(current)
install.packages('rlang')
install.packages('Rtools')
install.packages('Rtools')
install.packages("here")
library(devtools)
library(devtools)
library(usethis)
library(roxygen2)
install.packages(roxygen2)
install.packages('roxygen2')
library(usethis)
install.packages('usethis')
install.packages('rlang')
library(devtools)
install_github('romanceline/Packages/WHOCountryNames')
Dataset_Rt <- read.csv("https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/rt.csv")
remove.packages("WHOCountryNames", lib="~/R/R-4.0.3/library")
install_github('romanceline/Packages/WHOCountryNames')
library(WHOCountryNames)
Dataset_Rt <- read.csv("https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/rt.csv")
WHOCountryNames(Dataset_Rt,country)
test<-WHOCountryNames(Dataset_Rt,country)
detach("package:WHOCountryNames", unload = TRUE)
View(test)
setwd('C:/Users/romanc/Documents/GitHub/Packages/RtChart')
use_package("WHOCountryNames")
document()
