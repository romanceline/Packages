scale_x_date(date_labels = "%d-%m",date_breaks = "15 days")+
geom_line(aes(x=DateReport,y=Spline3DaysAverage_Rate,color="Spline"),linetype=1,size=0.5)+
theme(legend.title = element_blank(),legend.text = element_text(size=10),legend.key.size=unit(0.2,"cm"),
plot.title = element_text(size = 10, face = "bold"),axis.title.y = element_text(size=8))
plot
plot<-ggplot(CountryDataset)+
geom_bar(aes(x=DateReport,y=DailyRate,fill=EpidemicStatusCurve),stat="identity")+
scale_fill_manual("Epidemic Curve Status",
breaks = c("Low Incidence Plateau","Low Incidence Growth","Elevated Incidence Growth","Elevated Incidence Plateau","Sustained Decline"),
values=c("#076769","#E47961","#751232","#C65154","#3EA8A6"),drop=FALSE)+
scale_color_manual(name=NULL,breaks=c('Spline'),labels=c('Spline built on 3-days average \ndaily incidence \n(smoothing parameter = 0.5)'),values=c('black'))+
scale_x_date(date_labels = "%d-%m",date_breaks = "15 days")+
geom_line(aes(x=DateReport,y=Spline3DaysAverage_Rate,color="Spline"),linetype=1,size=0.5)+
theme(legend.title = element_blank(),legend.text = element_text(size=10),legend.key.size=unit(0.2,"cm"),
plot.title = element_text(size = 10, face = "bold"),axis.title.y = element_text(size=8))+
labs(x='Date of report',y='Daily Incidence Rate \n (per 100,000 population)')
plot
#' R chart function
#' This function allows you to create a chart displaying the reproduction number over time
#' @param country - specify the country to draw the chart for
#' @export
#' @examples
#' @ChartCaseIncidenceCDC()
ChartCaseIncidenceCDC <- function(ctr){
WHO_ref<-WHO_ref %>%
select(ADM0NAME,UNPOP2019) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME))
CountryDataset<-BuildExtendedEpiDataset(ctr) %>%
mutate(DailyRate=NewCases/UNPOP2019*100000) %>%
select(ADM0NAME,
DateReport,
UNPOP2019,
TotalCases,
NewCases,
DailyRate,
ThreeDaysAverage_Cases,
ThreeDaysAverage_Cases_Rate)
CountryDataset<-CountryDataset %>%
mutate(CasesLast2Weeks = order_by(DateReport, TotalCases - lag(TotalCases,14)),
TwoWeekIncidence=CasesLast2Weeks/UNPOP2019*100000)
CountryDataset<-CountryDataset %>%  filter(!is.na(ThreeDaysAverage_Cases_Rate))
Spline3DaysAverage_Rate<-smooth.spline(x=CountryDataset$DateReport,
y=CountryDataset$ThreeDaysAverage_Cases_Rate,
spar=0.5)
ValuesSpline3DaysAverage_Rate<-data.frame(predict(Spline3DaysAverage_Rate,deriv=0),
predict(Spline3DaysAverage_Rate,deriv=1)) %>%
rename(Spline3DaysAverage_Rate=y,Slope3DaysAverage_Rate=y.1) %>% select(-c(x,x.1))
CountryDataset <- data.frame(CountryDataset,ValuesSpline3DaysAverage_Rate)
CountryDataset <-CountryDataset %>%
group_by(ID = data.table::rleid(Slope3DaysAverage_Rate < 0)) %>%
mutate(NbDaysSlopeDecreasing = if_else(Slope3DaysAverage_Rate < 0, row_number(), 0L))
CountryDataset <-CountryDataset %>%
group_by(ID = data.table::rleid(Slope3DaysAverage_Rate >= 0)) %>%
mutate(NbDaysSlopeIncreasing = if_else(Slope3DaysAverage_Rate>= 0, row_number(), 0L))
CountryDataset<-CountryDataset %>%
mutate(EpidemicStatusCurve=
case_when((TwoWeekIncidence<=10 & Slope3DaysAverage_Rate>=0.1) ~ "Low Incidence Growth",
(TwoWeekIncidence>10 & Slope3DaysAverage_Rate>=0.1) ~ "Elevated Incidence Growth",
(TwoWeekIncidence>10 & ((Slope3DaysAverage_Rate>=0 & Slope3DaysAverage_Rate <0.1)|(Slope3DaysAverage_Rate<0 & NbDaysSlopeDecreasing<=5)))~ "Elevated Incidence Plateau",
(Slope3DaysAverage_Rate<0 & NbDaysSlopeDecreasing>5) ~ "Sustained Decline",
(TwoWeekIncidence<=10 & ((Slope3DaysAverage_Rate>=0 & Slope3DaysAverage_Rate<0.1)|(Slope3DaysAverage_Rate<0 & NbDaysSlopeDecreasing<=5)))~ "Low Incidence Plateau"))
# if (DailyOrAverage=="ThreeDaysAverage"){
#   yaxis<-"Daily Incidence Rate \n (per 100,000 population)"
#   title<-"CDC Approach : Epidemic status curve - Based on 3days average daily rate"
#   linetype_1<-1
#   linetype_2<-"dotted"
# }
# if (DailyOrAverage=="Daily"){
#   yaxis<-"Daily incidence"
#   title<-"CDC Approach : Epidemic status curve - Based on daily rate"
#   linetype_1<-"dotted"
#   linetype_2<-1
# }
CountryDataset$EpidemicStatusCurve<-factor(CountryDataset$EpidemicStatusCurve, levels = c("Low Incidence Plateau","Low Incidence Growth","Elevated Incidence Growth","Elevated Incidence Plateau","Sustained Decline"))
plot<-ggplot(CountryDataset)+
geom_bar(aes(x=DateReport,y=DailyRate,fill=EpidemicStatusCurve),stat="identity")+
scale_fill_manual("Epidemic Curve Status",
breaks = c("Low Incidence Plateau","Low Incidence Growth","Elevated Incidence Growth","Elevated Incidence Plateau","Sustained Decline"),
values=c("#076769","#E47961","#751232","#C65154","#3EA8A6"),drop=FALSE)+
scale_color_manual(name=NULL,breaks=c('Spline'),labels=c('Spline built on 3-days average \ndaily incidence \n(smoothing parameter = 0.5)'),values=c('black'))+
scale_x_date(date_labels = "%d-%m",date_breaks = "15 days")+
geom_line(aes(x=DateReport,y=Spline3DaysAverage_Rate,color="Spline"),linetype=1,size=0.5)+
theme(legend.title = element_blank(),legend.text = element_text(size=10),legend.key.size=unit(0.2,"cm"),
plot.title = element_text(size = 10, face = "bold"),axis.title.y = element_text(size=8))+
labs(x='Date of report',y='Daily Incidence Rate \n (per 100,000 population)')
return(plot)
}
ChartCaseIncidenceCDC('France')
getwd()
setwd('..')
setwd('..')
getwd()
setwd('C:/Users/romanc/Documents/GitHub/Packages/ChartCaseIncidenceCDC')
use_package('dplyr',type='Depends')
use_package('ggplot2',type='Depends')
use_package('BuildExtendedEpiDataset',type='Depends')
use_package('stringr',type='Depends')
use_package('stats',type='Depends')
setwd()
getwd()
setwd('..')
setwd('C:/Users/romanc/Documents/GitHub/Packages/ChartCaseIncidenceCDC')
document()
rm(list = c("ChartCaseIncidenceCDC"))
document()
setwd('..')
getwd()
install('ChartCaseIncidenceCDC')
library(devtools)
setwd('C:/Users/romanc/Documents/GitHub/Packages/WHOCountryNames')
document()
document()
setwd('..')
install('WHOCountryNames')
detach("package:devtools", unload = TRUE)
dataset<-'C:/Users/romanc/Documents/GitHub/InOutSlideDeck/ForDailyUpdate/SubnationalDataset.csv'
library('WHOCountryNames')
dataset<-read.csv('C:/Users/romanc/Documents/GitHub/InOutSlideDeck/ForDailyUpdate/SubnationalDataset.csv')
View(dataset)
WHOCountryNames(dataset,CountryName)
#' BuildExtendedEpiDataset
#' This function allows you to build an extended dataset of the standard epidataset (with log values, spline values, 3 days average,...)
#' @param Select the country to build the dataset for
#' @export
#' @examples
#' @BuildExtendedEpiDataset()
BuildExtendedEpiDataset<-function(country){
MainDataset<-WHOCountryNames(GetEpiData(),ADM0NAME) %>%
mutate(DateReport=as.Date(parse_date_time(DateReport,c("dmy", "ymd","mdy")))) %>%
filter(ADM0NAME==country)
WHO_ref<-WHOCountryNames(WHO_ref,ADM0NAME) %>% select(ADM0NAME,UNPOP2019)
MainDataset<-MainDataset %>% left_join(WHO_ref,by='ADM0NAME')
MainDataset<-MainDataset %>%
filter(!is.na(DateReport)) %>%
mutate(NewCases = replace_na(NewCases, 0),
NewDeaths = replace_na(NewDeaths, 0),
TotalCases = replace_na(TotalCases, 0),
TotalDeaths = replace_na(TotalDeaths, 0),
NewCases_Rate=NewCases/UNPOP2019*100000,
NewDeaths_Rate=NewDeaths/UNPOP2019*1000000)
MainDataset<-MainDataset %>%
mutate(ThreeDaysAverage_Cases=(NewCases+lag(NewCases,1)+lead(NewCases,1))/3,
ThreeDaysAverage_Deaths=(NewDeaths+lag(NewDeaths,1)+lead(NewDeaths,1))/3) %>%
mutate(ThreeDaysAverage_Cases_Rate=(NewCases_Rate+lag(NewCases_Rate,1)+lead(NewCases_Rate,1))/3,
ThreeDaysAverage_Deaths_Rate=(NewDeaths_Rate+lag(NewDeaths_Rate,1)+lead(NewDeaths_Rate,1))/3)
MainDataset<-MainDataset %>% select(-c("WHO_CODE","epiWeek"))
# %>% mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
#          log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths),
#          log10_MovingAverage_Cases_Rate=log10(ThreeDaysAverage_Cases_Rate),
#          log10_MovingAverage_Deaths_Rate=log10(ThreeDaysAverage_Deaths_Rate)) %>%
#   mutate(log_cases=log10(NewCases),log_deaths=log10(NewDeaths),
#          log_cases_rate=log10(NewCases_Rate),log_deaths_rate=log10(NewDeaths_Rate))
MainDataset_Cases<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Cases)) %>%
select(DateReport,ThreeDaysAverage_Cases)
MainDataset_Cases_Rate<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Cases_Rate)) %>%
select(DateReport,ThreeDaysAverage_Cases_Rate)
MainDataset_Deaths<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Deaths)) %>%
select(DateReport,ThreeDaysAverage_Deaths)
MainDataset_Deaths_Rate<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Deaths_Rate)) %>%
select(DateReport,ThreeDaysAverage_Deaths_Rate)
# MainDataset_logCases<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Cases)) %>%
#   select(DateReport,log10_MovingAverage_Cases) %>%
#   filter(log10_MovingAverage_Cases!=-Inf)
# MainDataset_logCases_Rate<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Cases_Rate)) %>%
#   select(DateReport,log10_MovingAverage_Cases_Rate) %>%
#   filter(log10_MovingAverage_Cases_Rate!=-Inf)
# MainDataset_logDeaths<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Deaths)) %>%
#   select(DateReport,log10_MovingAverage_Deaths) %>%
#   filter(log10_MovingAverage_Deaths!=-Inf)
# MainDataset_logDeaths_Rate<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Deaths_Rate)) %>%
#   select(DateReport,log10_MovingAverage_Deaths_Rate) %>%
#   filter(log10_MovingAverage_Deaths_Rate!=-Inf)
Spline_3DaysAverageCases<-smooth.spline(x=MainDataset_Cases$DateReport,y=MainDataset_Cases$ThreeDaysAverage_Cases,spar=0.5)
Spline_3DaysAverageDeaths<-smooth.spline(x=MainDataset_Deaths$DateReport,y=MainDataset_Deaths$ThreeDaysAverage_Deaths,spar=0.5)
# Spline_3DaysAverage_LogCases<-smooth.spline(x=MainDataset_logCases$DateReport,y=MainDataset_logCases$log10_MovingAverage_Cases,spar=0.5)
# Spline_3DaysAverage_LogDeaths<-smooth.spline(x=MainDataset_logDeaths$DateReport,y=MainDataset_logDeaths$log10_MovingAverage_Deaths,spar=0.5)
Spline_3DaysAverageCases_Rate<-smooth.spline(x=MainDataset_Cases_Rate$DateReport,y=MainDataset_Cases_Rate$ThreeDaysAverage_Cases_Rate,spar=0.5)
Spline_3DaysAverageDeaths_Rate<-smooth.spline(x=MainDataset_Deaths_Rate$DateReport,y=MainDataset_Deaths_Rate$ThreeDaysAverage_Deaths_Rate,spar=0.5)
# Spline_3DaysAverage_LogCases_Rate<-smooth.spline(x=MainDataset_logCases_Rate$DateReport,y=MainDataset_logCases_Rate$log10_MovingAverage_Cases_Rate,spar=0.5)
# Spline_3DaysAverage_LogDeaths_Rate<-smooth.spline(x=MainDataset_logDeaths_Rate$DateReport,y=MainDataset_logDeaths_Rate$log10_MovingAverage_Deaths_Rate,spar=0.5)
ValuesSpline_3DaysAverageCases<-data.frame(SplineValue_3DaysAverageCases=predict(Spline_3DaysAverageCases,deriv=0))
ValuesSpline_3DaysAverageDeaths<-data.frame(SplineValue_3DaysAverageDeaths=predict(Spline_3DaysAverageDeaths,deriv=0))
# ValuesSpline_3DaysAverage_LogCases<-data.frame(SplineValue_3DaysAverage_LogCases=predict(Spline_3DaysAverage_LogCases,deriv=0))
# ValuesSpline_3DaysAverage_LogDeaths<-data.frame(SplineValue_3DaysAverage_LogDeaths=predict(Spline_3DaysAverage_LogDeaths,deriv=0))
ValuesSpline_3DaysAverageCases_Rate<-data.frame(SplineValue_3DaysAverageCases_Rate=predict(Spline_3DaysAverageCases_Rate,deriv=0))
ValuesSpline_3DaysAverageDeaths_Rate<-data.frame(SplineValue_3DaysAverageDeaths_Rate=predict(Spline_3DaysAverageDeaths_Rate,deriv=0))
# ValuesSpline_3DaysAverage_LogCases_Rate<-data.frame(SplineValue_3DaysAverage_LogCases_Rate=predict(Spline_3DaysAverage_LogCases_Rate,deriv=0))
# ValuesSpline_3DaysAverage_LogDeaths_Rate<-data.frame(SplineValue_3DaysAverage_LogDeaths_Rate=predict(Spline_3DaysAverage_LogDeaths_Rate,deriv=0))
MainDataset_Cases<-data.frame(MainDataset_Cases,ValuesSpline_3DaysAverageCases) %>%
select(DateReport,"Spline_3DaysAverageCases"="SplineValue_3DaysAverageCases.y")
MainDataset_Deaths<-data.frame(MainDataset_Deaths,ValuesSpline_3DaysAverageDeaths) %>%
select(DateReport,"Spline_3DaysAverageDeaths"="SplineValue_3DaysAverageDeaths.y")
# MainDataset_logCases<-data.frame(MainDataset_logCases,ValuesSpline_3DaysAverage_LogCases) %>%
#   select(DateReport,"Spline_3DaysAverage_logCases"="SplineValue_3DaysAverage_LogCases.y")
# MainDataset_logDeaths<-data.frame(MainDataset_logDeaths,ValuesSpline_3DaysAverage_LogDeaths) %>%
#   select(DateReport,"Spline_3DaysAverage_logDeaths"="SplineValue_3DaysAverage_LogDeaths.y")
MainDataset_Cases_Rate<-data.frame(MainDataset_Cases_Rate,ValuesSpline_3DaysAverageCases_Rate) %>%
select(DateReport,"Spline_3DaysAverageCases_Rate"="SplineValue_3DaysAverageCases_Rate.y")
MainDataset_Deaths_Rate<-data.frame(MainDataset_Deaths_Rate,ValuesSpline_3DaysAverageDeaths_Rate) %>%
select(DateReport,"Spline_3DaysAverageDeaths_Rate"="SplineValue_3DaysAverageDeaths_Rate.y")
# MainDataset_logCases_Rate<-data.frame(MainDataset_logCases_Rate,ValuesSpline_3DaysAverage_LogCases_Rate) %>%
#   select(DateReport,"Spline_3DaysAverage_logCases_Rate"="SplineValue_3DaysAverage_LogCases_Rate.y")
# MainDataset_logDeaths_Rate<-data.frame(MainDataset_logDeaths_Rate,ValuesSpline_3DaysAverage_LogDeaths_Rate) %>%
#   select(DateReport,"Spline_3DaysAverage_logDeaths_Rate"="SplineValue_3DaysAverage_LogDeaths_Rate.y")
MainDataset_<-MainDataset %>%
left_join(MainDataset_Cases,by='DateReport') %>%
left_join(MainDataset_Deaths,by='DateReport') %>%
# left_join(MainDataset_logCases,by='DateReport') %>%
# left_join(MainDataset_logDeaths,by='DateReport') %>%
left_join(MainDataset_Cases_Rate,by='DateReport') %>%
left_join(MainDataset_Deaths_Rate,by='DateReport') %>%
# left_join(MainDataset_logCases_Rate,by='DateReport') %>%
# left_join(MainDataset_logDeaths_Rate,by='DateReport')
# x <- zoo(MainDataset_$Spline_3DaysAverage_logCases,MainDataset_$DateReport)
# x <- na_interpolation(x, option = "linear") %>% fortify.zoo
#
# y <- zoo(MainDataset_$Spline_3DaysAverage_logDeaths,MainDataset_$DateReport)
# y <- na_interpolation(y, option = "linear") %>% fortify.zoo
#
# z <- zoo(MainDataset_$Spline_3DaysAverage_logCases_Rate,MainDataset_$DateReport)
# z <- na_interpolation(z, option = "linear") %>% fortify.zoo
#
# a <- zoo(MainDataset_$Spline_3DaysAverage_logDeaths_Rate,MainDataset_$DateReport)
# a <- na_interpolation(a, option = "linear") %>% fortify.zoo
# MainDataset_<-MainDataset_ %>%
#   left_join(x,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logCases_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(y,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logDeaths_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(z,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logCases_Rate_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(a,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logDeaths_Rate_='.')
return(MainDataset_)
}
BuildExtendedEpiDataset('Belgium')
setwd('C:/Users/romanc/Documents/GitHub/Packages/BuildExtendedEpiDataset/')
library(devtools)
use_package('WHOCountryNames',type='Depends')
use_package('lubridate',type='Depends')
use_package('dplyr',type='Depends')
use_package('GetEpiData',type='Depends')
#' BuildExtendedEpiDataset
#' This function allows you to build an extended dataset of the standard epidataset (with log values, spline values, 3 days average,...)
#' @param Select the country to build the dataset for
#' @export
#' @examples
#' @BuildExtendedEpiDataset()
BuildExtendedEpiDataset<-function(country){
MainDataset<-WHOCountryNames(GetEpiData(),ADM0NAME) %>%
mutate(DateReport=as.Date(parse_date_time(DateReport,c("dmy", "ymd","mdy")))) %>%
filter(ADM0NAME==country)
WHO_ref<-WHOCountryNames(WHO_ref,ADM0NAME) %>% select(ADM0NAME,UNPOP2019)
MainDataset<-MainDataset %>% left_join(WHO_ref,by='ADM0NAME')
MainDataset<-MainDataset %>%
filter(!is.na(DateReport)) %>%
mutate(NewCases = replace_na(NewCases, 0),
NewDeaths = replace_na(NewDeaths, 0),
TotalCases = replace_na(TotalCases, 0),
TotalDeaths = replace_na(TotalDeaths, 0),
NewCases_Rate=NewCases/UNPOP2019*100000,
NewDeaths_Rate=NewDeaths/UNPOP2019*1000000)
MainDataset<-MainDataset %>%
mutate(ThreeDaysAverage_Cases=(NewCases+lag(NewCases,1)+lead(NewCases,1))/3,
ThreeDaysAverage_Deaths=(NewDeaths+lag(NewDeaths,1)+lead(NewDeaths,1))/3) %>%
mutate(ThreeDaysAverage_Cases_Rate=(NewCases_Rate+lag(NewCases_Rate,1)+lead(NewCases_Rate,1))/3,
ThreeDaysAverage_Deaths_Rate=(NewDeaths_Rate+lag(NewDeaths_Rate,1)+lead(NewDeaths_Rate,1))/3)
MainDataset<-MainDataset %>% select(-c("WHO_CODE","epiWeek"))
# %>% mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
#          log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths),
#          log10_MovingAverage_Cases_Rate=log10(ThreeDaysAverage_Cases_Rate),
#          log10_MovingAverage_Deaths_Rate=log10(ThreeDaysAverage_Deaths_Rate)) %>%
#   mutate(log_cases=log10(NewCases),log_deaths=log10(NewDeaths),
#          log_cases_rate=log10(NewCases_Rate),log_deaths_rate=log10(NewDeaths_Rate))
MainDataset_Cases<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Cases)) %>%
select(DateReport,ThreeDaysAverage_Cases)
MainDataset_Cases_Rate<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Cases_Rate)) %>%
select(DateReport,ThreeDaysAverage_Cases_Rate)
MainDataset_Deaths<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Deaths)) %>%
select(DateReport,ThreeDaysAverage_Deaths)
MainDataset_Deaths_Rate<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Deaths_Rate)) %>%
select(DateReport,ThreeDaysAverage_Deaths_Rate)
# MainDataset_logCases<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Cases)) %>%
#   select(DateReport,log10_MovingAverage_Cases) %>%
#   filter(log10_MovingAverage_Cases!=-Inf)
# MainDataset_logCases_Rate<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Cases_Rate)) %>%
#   select(DateReport,log10_MovingAverage_Cases_Rate) %>%
#   filter(log10_MovingAverage_Cases_Rate!=-Inf)
# MainDataset_logDeaths<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Deaths)) %>%
#   select(DateReport,log10_MovingAverage_Deaths) %>%
#   filter(log10_MovingAverage_Deaths!=-Inf)
# MainDataset_logDeaths_Rate<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Deaths_Rate)) %>%
#   select(DateReport,log10_MovingAverage_Deaths_Rate) %>%
#   filter(log10_MovingAverage_Deaths_Rate!=-Inf)
Spline_3DaysAverageCases<-smooth.spline(x=MainDataset_Cases$DateReport,y=MainDataset_Cases$ThreeDaysAverage_Cases,spar=0.5)
Spline_3DaysAverageDeaths<-smooth.spline(x=MainDataset_Deaths$DateReport,y=MainDataset_Deaths$ThreeDaysAverage_Deaths,spar=0.5)
# Spline_3DaysAverage_LogCases<-smooth.spline(x=MainDataset_logCases$DateReport,y=MainDataset_logCases$log10_MovingAverage_Cases,spar=0.5)
# Spline_3DaysAverage_LogDeaths<-smooth.spline(x=MainDataset_logDeaths$DateReport,y=MainDataset_logDeaths$log10_MovingAverage_Deaths,spar=0.5)
Spline_3DaysAverageCases_Rate<-smooth.spline(x=MainDataset_Cases_Rate$DateReport,y=MainDataset_Cases_Rate$ThreeDaysAverage_Cases_Rate,spar=0.5)
Spline_3DaysAverageDeaths_Rate<-smooth.spline(x=MainDataset_Deaths_Rate$DateReport,y=MainDataset_Deaths_Rate$ThreeDaysAverage_Deaths_Rate,spar=0.5)
# Spline_3DaysAverage_LogCases_Rate<-smooth.spline(x=MainDataset_logCases_Rate$DateReport,y=MainDataset_logCases_Rate$log10_MovingAverage_Cases_Rate,spar=0.5)
# Spline_3DaysAverage_LogDeaths_Rate<-smooth.spline(x=MainDataset_logDeaths_Rate$DateReport,y=MainDataset_logDeaths_Rate$log10_MovingAverage_Deaths_Rate,spar=0.5)
ValuesSpline_3DaysAverageCases<-data.frame(SplineValue_3DaysAverageCases=predict(Spline_3DaysAverageCases,deriv=0))
ValuesSpline_3DaysAverageDeaths<-data.frame(SplineValue_3DaysAverageDeaths=predict(Spline_3DaysAverageDeaths,deriv=0))
# ValuesSpline_3DaysAverage_LogCases<-data.frame(SplineValue_3DaysAverage_LogCases=predict(Spline_3DaysAverage_LogCases,deriv=0))
# ValuesSpline_3DaysAverage_LogDeaths<-data.frame(SplineValue_3DaysAverage_LogDeaths=predict(Spline_3DaysAverage_LogDeaths,deriv=0))
ValuesSpline_3DaysAverageCases_Rate<-data.frame(SplineValue_3DaysAverageCases_Rate=predict(Spline_3DaysAverageCases_Rate,deriv=0))
ValuesSpline_3DaysAverageDeaths_Rate<-data.frame(SplineValue_3DaysAverageDeaths_Rate=predict(Spline_3DaysAverageDeaths_Rate,deriv=0))
# ValuesSpline_3DaysAverage_LogCases_Rate<-data.frame(SplineValue_3DaysAverage_LogCases_Rate=predict(Spline_3DaysAverage_LogCases_Rate,deriv=0))
# ValuesSpline_3DaysAverage_LogDeaths_Rate<-data.frame(SplineValue_3DaysAverage_LogDeaths_Rate=predict(Spline_3DaysAverage_LogDeaths_Rate,deriv=0))
MainDataset_Cases<-data.frame(MainDataset_Cases,ValuesSpline_3DaysAverageCases) %>%
select(DateReport,"Spline_3DaysAverageCases"="SplineValue_3DaysAverageCases.y")
MainDataset_Deaths<-data.frame(MainDataset_Deaths,ValuesSpline_3DaysAverageDeaths) %>%
select(DateReport,"Spline_3DaysAverageDeaths"="SplineValue_3DaysAverageDeaths.y")
# MainDataset_logCases<-data.frame(MainDataset_logCases,ValuesSpline_3DaysAverage_LogCases) %>%
#   select(DateReport,"Spline_3DaysAverage_logCases"="SplineValue_3DaysAverage_LogCases.y")
# MainDataset_logDeaths<-data.frame(MainDataset_logDeaths,ValuesSpline_3DaysAverage_LogDeaths) %>%
#   select(DateReport,"Spline_3DaysAverage_logDeaths"="SplineValue_3DaysAverage_LogDeaths.y")
MainDataset_Cases_Rate<-data.frame(MainDataset_Cases_Rate,ValuesSpline_3DaysAverageCases_Rate) %>%
select(DateReport,"Spline_3DaysAverageCases_Rate"="SplineValue_3DaysAverageCases_Rate.y")
MainDataset_Deaths_Rate<-data.frame(MainDataset_Deaths_Rate,ValuesSpline_3DaysAverageDeaths_Rate) %>%
select(DateReport,"Spline_3DaysAverageDeaths_Rate"="SplineValue_3DaysAverageDeaths_Rate.y")
# MainDataset_logCases_Rate<-data.frame(MainDataset_logCases_Rate,ValuesSpline_3DaysAverage_LogCases_Rate) %>%
#   select(DateReport,"Spline_3DaysAverage_logCases_Rate"="SplineValue_3DaysAverage_LogCases_Rate.y")
# MainDataset_logDeaths_Rate<-data.frame(MainDataset_logDeaths_Rate,ValuesSpline_3DaysAverage_LogDeaths_Rate) %>%
#   select(DateReport,"Spline_3DaysAverage_logDeaths_Rate"="SplineValue_3DaysAverage_LogDeaths_Rate.y")
MainDataset_<-MainDataset %>%
left_join(MainDataset_Cases,by='DateReport') %>%
left_join(MainDataset_Deaths,by='DateReport') %>%
# left_join(MainDataset_logCases,by='DateReport') %>%
# left_join(MainDataset_logDeaths,by='DateReport') %>%
left_join(MainDataset_Cases_Rate,by='DateReport') %>%
left_join(MainDataset_Deaths_Rate,by='DateReport') %>%
# left_join(MainDataset_logCases_Rate,by='DateReport') %>%
# left_join(MainDataset_logDeaths_Rate,by='DateReport')
# x <- zoo(MainDataset_$Spline_3DaysAverage_logCases,MainDataset_$DateReport)
# x <- na_interpolation(x, option = "linear") %>% fortify.zoo
#
# y <- zoo(MainDataset_$Spline_3DaysAverage_logDeaths,MainDataset_$DateReport)
# y <- na_interpolation(y, option = "linear") %>% fortify.zoo
#
# z <- zoo(MainDataset_$Spline_3DaysAverage_logCases_Rate,MainDataset_$DateReport)
# z <- na_interpolation(z, option = "linear") %>% fortify.zoo
#
# a <- zoo(MainDataset_$Spline_3DaysAverage_logDeaths_Rate,MainDataset_$DateReport)
# a <- na_interpolation(a, option = "linear") %>% fortify.zoo
# MainDataset_<-MainDataset_ %>%
#   left_join(x,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logCases_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(y,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logDeaths_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(z,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logCases_Rate_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(a,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logDeaths_Rate_='.')
return(MainDataset_)
}
BuildExtendedEpiDataset('Belgium')
library(GetEpiData)
MainDataset<-WHOCountryNames(GetEpiData(),ADM0NAME) %>%
mutate(DateReport=as.Date(parse_date_time(DateReport,c("dmy", "ymd","mdy")))) %>%
filter(ADM0NAME==country)
library(lubridate)
BuildExtendedEpiDataset('Belgium')
use_package('tidyr',type='Depends')
MainDataset<-WHOCountryNames(GetEpiData(),ADM0NAME) %>%
mutate(DateReport=as.Date(parse_date_time(DateReport,c("dmy", "ymd","mdy")))) %>%
filter(ADM0NAME==country)
country<-'Belgium'
MainDataset<-WHOCountryNames(GetEpiData(),ADM0NAME) %>%
mutate(DateReport=as.Date(parse_date_time(DateReport,c("dmy", "ymd","mdy")))) %>%
filter(ADM0NAME==country)
BuildExtendedEpiDataset('Belgium')
library(tidyr)
BuildExtendedEpiDataset('Belgium')
test<-BuildExtendedEpiDataset('Belgium')
View(test)
use_package('zoo',type='Depends')
use_package('stats',type='Depends')
use_package('imputeTS',type='Depends')
getwd()
document()
rm(list = c("BuildExtendedEpiDataset"))
document()
setwd('..')
install('BuildExtendedEpiDataset')
library(WHOCountryNames)
getwd()
setwd('C:/Users/romanc/Documents/GitHub/Packages/RtChart')
Dataset_Rt <- read.csv("https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/rt.csv")
Dataset_Rt <- WHOCountryNames(Dataset_Rt,country)
Dataset_Rt_Country<-Dataset_Rt %>% filter(country==ctr) %>%
filter(type!='forecast') %>% select(country,date,R=median,lower_90,upper_90) %>%
mutate(date=as.Date(parse_date_time(date, c("dmy", "ymd","mdy")))) %>%
group_by(ID = data.table::rleid(R < 1)) %>%
mutate(NbDays = if_else(R < 1, row_number(), 0L)) %>%
mutate(Classification=if_else(R<=1 & NbDays>=14,"R is lower than 1 since more than 2 weeks",
if_else(R<=1,"R is lower than 1","R is higher than 1")))
Dataset_Rt_Country$Classification<-factor(Dataset_Rt_Country$Classification, levels = c("R is higher than 1","R is lower than 1","R is lower than 1 since more than 2 weeks"))
ctr<-'Belgium'
Dataset_Rt_Country<-Dataset_Rt %>% filter(country==ctr) %>%
filter(type!='forecast') %>% select(country,date,R=median,lower_90,upper_90) %>%
mutate(date=as.Date(parse_date_time(date, c("dmy", "ymd","mdy")))) %>%
group_by(ID = data.table::rleid(R < 1)) %>%
mutate(NbDays = if_else(R < 1, row_number(), 0L)) %>%
mutate(Classification=if_else(R<=1 & NbDays>=14,"R is lower than 1 since more than 2 weeks",
if_else(R<=1,"R is lower than 1","R is higher than 1")))
Dataset_Rt_Country$Classification<-factor(Dataset_Rt_Country$Classification, levels = c("R is higher than 1","R is lower than 1","R is lower than 1 since more than 2 weeks"))
Dataset_Rt <- read.csv("https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/rt.csv")
Dataset_Rt <- WHOCountryNames(Dataset_Rt,country)
View(Dataset_Rt)
ctr
Dataset_Rt_Country<-Dataset_Rt %>% filter(country==ctr) %>%
filter(type!='forecast') %>% select(country,date,R=median,lower_90,upper_90) %>%
mutate(date=as.Date(parse_date_time(date, c("dmy", "ymd","mdy")))) %>%
group_by(ID = data.table::rleid(R < 1)) %>%
mutate(NbDays = if_else(R < 1, row_number(), 0L)) %>%
mutate(Classification=if_else(R<=1 & NbDays>=14,"R is lower than 1 since more than 2 weeks",
if_else(R<=1,"R is lower than 1","R is higher than 1")))
Dataset_Rt_Country$Classification<-factor(Dataset_Rt_Country$Classification, levels = c("R is higher than 1","R is lower than 1","R is lower than 1 since more than 2 weeks"))
use_package('lubridate')
library(devtools)
use_package('lubridate',type='Depends')
Dataset_Rt_Country<-Dataset_Rt %>% filter(country==ctr) %>%
filter(type!='forecast') %>% select(country,date,R=median,lower_90,upper_90) %>%
mutate(date=as.Date(parse_date_time(date, c("dmy", "ymd","mdy")))) %>%
group_by(ID = data.table::rleid(R < 1)) %>%
mutate(NbDays = if_else(R < 1, row_number(), 0L)) %>%
mutate(Classification=if_else(R<=1 & NbDays>=14,"R is lower than 1 since more than 2 weeks",
if_else(R<=1,"R is lower than 1","R is higher than 1")))
Dataset_Rt_Country$Classification<-factor(Dataset_Rt_Country$Classification, levels = c("R is higher than 1","R is lower than 1","R is lower than 1 since more than 2 weeks"))
library(lubridate)
Dataset_Rt_Country<-Dataset_Rt %>% filter(country==ctr) %>%
filter(type!='forecast') %>% select(country,date,R=median,lower_90,upper_90) %>%
mutate(date=as.Date(parse_date_time(date, c("dmy", "ymd","mdy")))) %>%
group_by(ID = data.table::rleid(R < 1)) %>%
mutate(NbDays = if_else(R < 1, row_number(), 0L)) %>%
mutate(Classification=if_else(R<=1 & NbDays>=14,"R is lower than 1 since more than 2 weeks",
if_else(R<=1,"R is lower than 1","R is higher than 1")))
Dataset_Rt_Country$Classification<-factor(Dataset_Rt_Country$Classification, levels = c("R is higher than 1","R is lower than 1","R is lower than 1 since more than 2 weeks"))
Dataset_Rt_Country<-Dataset_Rt_Country %>% filter(date<=Sys.Date())
ForPolygon_Up<-Dataset_Rt_Country %>% select(date,coord=upper_90)
ForPolygon_Low<-Dataset_Rt_Country %>% select(date,coord=lower_90) %>% arrange(desc(date))
ForPolygon<-bind_rows(ForPolygon_Up,ForPolygon_Low)
minDate<-min(Dataset_Rt_Country$date)
maxDate<-max(Dataset_Rt_Country$date)
chart<-ggplot()+
geom_polygon(data=ForPolygon,aes(x=date,y=coord,fill='Confidence Interval 90'),alpha=0.3)+
geom_line(data=Dataset_Rt_Country,aes(x=date,y=R,color=Classification,group=1),size=0.73)+
scale_x_date(date_labels = "%d-%m-%y",date_breaks = "15 days",limits=c(minDate,maxDate))+
labs(y="Rt",x='Date of report')+
theme(legend.title = element_blank(),legend.text = element_text(size=10),legend.key.size=unit(0.2,"cm"),
plot.title = element_text(size = 10, face = "bold"),axis.title.y = element_text(size=10))+
scale_color_manual(values=c("#C65154","#BBE4D1","#3EA8A6"),
breaks=c("R is higher than 1","R is lower than 1","R is lower than 1 since more than 2 weeks"),
labels=c("Rt higher than 1","Rt lower than 1","Rt lower than 1 \nfor more than 2 weeks"),drop=FALSE)+
scale_fill_manual(values=c("#494850"),
breaks=c("Confidence Interval 90"),drop=FALSE)+
geom_hline(aes(yintercept=1),linetype="dashed")
use_package('ggplot2',type='Depends')
chart<-ggplot()+
geom_polygon(data=ForPolygon,aes(x=date,y=coord,fill='Confidence Interval 90'),alpha=0.3)+
geom_line(data=Dataset_Rt_Country,aes(x=date,y=R,color=Classification,group=1),size=0.73)+
scale_x_date(date_labels = "%d-%m-%y",date_breaks = "15 days",limits=c(minDate,maxDate))+
labs(y="Rt",x='Date of report')+
theme(legend.title = element_blank(),legend.text = element_text(size=10),legend.key.size=unit(0.2,"cm"),
plot.title = element_text(size = 10, face = "bold"),axis.title.y = element_text(size=10))+
scale_color_manual(values=c("#C65154","#BBE4D1","#3EA8A6"),
breaks=c("R is higher than 1","R is lower than 1","R is lower than 1 since more than 2 weeks"),
labels=c("Rt higher than 1","Rt lower than 1","Rt lower than 1 \nfor more than 2 weeks"),drop=FALSE)+
scale_fill_manual(values=c("#494850"),
breaks=c("Confidence Interval 90"),drop=FALSE)+
geom_hline(aes(yintercept=1),linetype="dashed")
library(ggplot2)
chart<-ggplot()+
geom_polygon(data=ForPolygon,aes(x=date,y=coord,fill='Confidence Interval 90'),alpha=0.3)+
geom_line(data=Dataset_Rt_Country,aes(x=date,y=R,color=Classification,group=1),size=0.73)+
scale_x_date(date_labels = "%d-%m-%y",date_breaks = "15 days",limits=c(minDate,maxDate))+
labs(y="Rt",x='Date of report')+
theme(legend.title = element_blank(),legend.text = element_text(size=10),legend.key.size=unit(0.2,"cm"),
plot.title = element_text(size = 10, face = "bold"),axis.title.y = element_text(size=10))+
scale_color_manual(values=c("#C65154","#BBE4D1","#3EA8A6"),
breaks=c("R is higher than 1","R is lower than 1","R is lower than 1 since more than 2 weeks"),
labels=c("Rt higher than 1","Rt lower than 1","Rt lower than 1 \nfor more than 2 weeks"),drop=FALSE)+
scale_fill_manual(values=c("#494850"),
breaks=c("Confidence Interval 90"),drop=FALSE)+
geom_hline(aes(yintercept=1),linetype="dashed")
chart
document()
document()
