dir.create(paste0(OutputFolder,"/SlideDeck"))
#
# DatasetTesting<-read.csv(paste0(folder,"/ForDailyUpdate//data_export_NCOV_WEEK_AGG_EURO.csv")) %>% filter(AGE_GROUP_FK=='All') %>%
#   mutate(WEEK_START_DATE=as.Date(parse_date_time(WEEK_START_DATE, c("dmy", "ymd","mdy")))) %>%
#   mutate(ï..REPORT_COUNTRY_FK=if_else(ï..REPORT_COUNTRY_FK=='Bosnia and Herzegovina','Bosnia And Herzegovina',ï..REPORT_COUNTRY_FK)) %>%
#   mutate(ï..REPORT_COUNTRY_FK=if_else(ï..REPORT_COUNTRY_FK=='Kosovo (in accordance with Security Council resolution 1244 (1999))','Kosovo',ï..REPORT_COUNTRY_FK)) %>%
#   mutate(ï..REPORT_COUNTRY_FK=if_else(ï..REPORT_COUNTRY_FK=='Czechia','Czech Republic',ï..REPORT_COUNTRY_FK)) %>%
#   mutate(ï..REPORT_COUNTRY_FK=if_else(ï..REPORT_COUNTRY_FK=='Republic of Moldova','Republic Of Moldova',ï..REPORT_COUNTRY_FK))
# Might need to check if this DatasetTesting is created properly, the field name on Country is acting strange
CountriesPerRegion<-read.csv(paste0(folder,"/ForDailyUpdate/CountriesOfInterest.csv")) %>% select(ADM0NAME,Region)
CountriesOfInterest<-read.csv(paste0(folder,"/ForDailyUpdate/CountriesOfInterest.csv")) %>%
filter(Interest=="Yes")
WorldRegions_Data<-read.csv(paste0(folder,"/ForDailyUpdate/WorldRegions_Data.csv"))
SubnationalDataset<-read.csv(paste0(folder,"/ForDailyUpdate/SubnationalDataset.csv"),encoding = "UTF-8")
SubnationalDataset<-WHOCountryNames(SubnationalDataset,CountryName)
KeyMessages<-read_excel(paste0(folder,"/ForDailyUpdate/KeyMessages.xlsx"))
PHSMNarratives<-read_excel(paste0(folder,"/ForDailyUpdate/PHSM_Narratives.xlsx"))
EventsInterest<-read_excel(paste0(folder,"/ForDailyUpdate/EventsInterest.xlsx"))
for (Country in CountriesOfInterest$ADM0NAME){
render(paste0(folder_,"\\Generation_Narratives.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Narratives_",Country),word_document(reference_doc= "Template.docx"))
}
Country
TestingDataTessy<-AnalysisTestingTessy(Country)
testing_country<-tessy_testing %>% filter(CountryName==ctr) %>%
select(CountryName,DateUsedForStatisticsISO,TestedAll)
epi_country<-tessy_epi %>% filter(CountryName==ctr) %>%
select(CountryName,NumberOfCases,DateUsedForStatisticsISO)
testing_data<-testing_country %>% left_join(epi_country,by = c("CountryName",'DateUsedForStatisticsISO'))
testing_country<-tessy_testing %>% filter(CountryName==ctr) %>%
select(CountryName,DateUsedForStatisticsISO,TestedAll)
ctr
ctr<-'Belgium'
testing_country<-tessy_testing %>% filter(CountryName==ctr) %>%
select(CountryName,DateUsedForStatisticsISO,TestedAll)
AnalysisTestingTessy<-function(ctr){
testing_country<-tessy_testing %>% filter(CountryName==ctr) %>%
select(CountryName,DateUsedForStatisticsISO,TestedAll)
epi_country<-tessy_epi %>% filter(CountryName==ctr) %>%
select(CountryName,NumberOfCases,DateUsedForStatisticsISO)
testing_data<-testing_country %>% left_join(epi_country,by = c("CountryName",'DateUsedForStatisticsISO'))
return(testing_data)
}
AnalysisTestingTessy(ctr)
TestingDataTessy<-AnalysisTestingTessy(Country) %>%
mutate(date=ISOweek2date(paste0(DateUsedForStatisticsISO,'-7'))
TestingDataTessy<-AnalysisTestingTessy(Country) %>%
mutate(date=ISOweek2date(paste0(DateUsedForStatisticsISO,'-7')))
TestingDataTessy<-AnalysisTestingTessy(Country)
if(nrow(TestingDataTessy)!=0){
TestingDataTessy<-TestingDataTessy %>%
mutate(date=ISOweek2date(paste0(DateUsedForStatisticsISO,'-7')),
positivity=round(NumberOfCases/TestedAll*100,1),
ChangeTest7Days=round(TestedAll/lag(TestedAll,1)*100-100,1),
ChangeTest7DaysAbs=abs(ChangeTest7Days),
TrendTest7Days=if_else(ChangeTest7Days>0,'increase','decrease'),
ChangePositivity=round(positivity/lag(positivity,1)*100-100,1),
ChangePositivityAbs=abs(ChangePositivity),
TrendPositivity=if_else(ChangePositivity>0,'increase','decrease'))
LatestDateTessy<-max(TestingDataTessy$date)
TestingDataLatestDateTessy<-TestingDataTessy %>% filter(date==LatestDateTessy)
TextTestingTessy<-paste0('As of ',LatestDateTessy, ', there had been ', TestingDataLatestDateTessy$TestedAll,' tests over the previous 7 days (a ', TestingDataLatestDateTessy$ChangeTest7DaysAbs, '% ',TestingDataLatestDateTessy$TrendTest7Days, ' compared to one week earlier), the positivity rate was ',TestingDataLatestDateTessy$positivity, '%, which represents a ',TestingDataLatestDateTessy$ChangePositivityAbs,'% ',TestingDataLatestDateTessy$TrendPositivity,' compared to one week earlier.')
} else {
TextTestingTessy<-paste0('No HQ data for testing for ',Country)
}
for (Country in CountriesOfInterest$ADM0NAME){
render(paste0(folder_,"\\Generation_Narratives.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Narratives_",Country),word_document(reference_doc= "Template.docx"))
}
for (Country in CountriesOfInterest$ADM0NAME){
render(paste0(folder_,"\\Generation_Narratives.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Narratives_",Country),word_document(reference_doc= "Template.docx"))
}
VaccineData<-AnalysisVaccineTracker(Country)
View(VaccineData)
Country
Country<-'Belgium'
VaccineData<-AnalysisVaccineTracker(Country)
View(VaccineData)
View(tessy_epi)
View(ECDC_Hosp)
ECDC_Testing<-read_excel(paste0(folder,"/ForDailyUpdate/ECDC_Testing.xlsx"))
View(ECDC_Testing)
AnalysisECDC_Testing<-function(ctr){
ECDCCountry_Testing<-ECDC_Testing %>% filter(country==ctr)
return(ECDCCountry_Testing)
}
TestingDataECDC<-AnalysisECDC_Testing(Country)
View(TestingDataECDC)
TestingDataECDC<-TestingDataECDC %>%
mutate(date=ISOweek2date(paste0(year_week,'-7')))
View(TestingDataECDC)
TestingDataECDC<-AnalysisECDC_Testing(Country)
View(TestingDataECDC)
TestingDataECDC<-TestingDataECDC %>%
mutate(date=ISOweek2date(paste0(year_week,'-7')),
ChangeTest7Days=round(tests_done/lag(tests_done,1)*100-100,1),
ChangeTest7DaysAbs=abs(ChangeTest7Days),
TrendTest7Days=if_else(ChangeTest7Days>0,'increase','decrease'),
ChangePositivity=round(positivity_rate/lag(positivity_rate,1)*100-100,1),
ChangePositivityAbs=abs(ChangePositivity),
TrendPositivity=if_else(ChangePositivity>0,'increase','decrease'))
LatestDateECDC<-max(TestingDataECDC$date)
TestingDataLatestDateECDC<-TestingDataECDC %>% filter(date==LatestDateTessy)
TestingDataECDC<-AnalysisECDC_Testing(Country)
if(nrow(TestingDataECDC)!=0){
TestingDataECDC<-TestingDataECDC %>%
mutate(date=ISOweek2date(paste0(year_week,'-7')),
ChangeTest7Days=round(tests_done/lag(tests_done,1)*100-100,1),
ChangeTest7DaysAbs=abs(ChangeTest7Days),
TrendTest7Days=if_else(ChangeTest7Days>0,'increase','decrease'),
ChangePositivity=round(positivity_rate/lag(positivity_rate,1)*100-100,1),
ChangePositivityAbs=abs(ChangePositivity),
TrendPositivity=if_else(ChangePositivity>0,'increase','decrease'))
LatestDateECDC<-max(TestingDataECDC$date)
TestingDataLatestDateECDC<-TestingDataECDC %>% filter(date==LatestDateTessy)
TextTestingECDC<-paste0('As of ',LatestDateECDC, ', there had been ', TestingDataLatestDateECDC$tests_done,' tests over the previous 7 days (a ', TestingDataLatestDateECDC$ChangeTest7DaysAbs, '% ',TestingDataLatestDateECDC$TrendTest7Days, ' compared to one week earlier), the positivity rate was ',TestingDataLatestDateECDC$positivity, '%, which represents a ',TestingDataLatestDateECDC$ChangePositivityAbs,'% ',TestingDataLatestDateECDC$TrendPositivity,' compared to one week earlier.')
} else {
TextTestingECDC<-paste0('No HQ data for testing for ',Country)
}
TestTestingECDC
TextTestingECDC
TestingDataLatestDateECDC
View(TestingDataLatestDateECDC)
Country
TestingDataECDC<-AnalysisECDC_Testing(Country)
TestingDataECDC<-TestingDataECDC %>%
mutate(date=ISOweek2date(paste0(year_week,'-7')),
ChangeTest7Days=round(tests_done/lag(tests_done,1)*100-100,1),
ChangeTest7DaysAbs=abs(ChangeTest7Days),
TrendTest7Days=if_else(ChangeTest7Days>0,'increase','decrease'),
ChangePositivity=round(positivity_rate/lag(positivity_rate,1)*100-100,1),
ChangePositivityAbs=abs(ChangePositivity),
TrendPositivity=if_else(ChangePositivity>0,'increase','decrease'))
View(TestingDataECDC)
LatestDateECDC<-max(TestingDataECDC$date)
LatestDateECDC
TestingDataLatestDateECDC<-TestingDataECDC %>% filter(date==LatestDateTessy)
View(TestingDataLatestDateECDC)
TestingDataECDC<-TestingDataECDC %>%
mutate(date=ISOweek2date(paste0(year_week,'-7')),
ChangeTest7Days=round(tests_done/lag(tests_done,1)*100-100,1),
ChangeTest7DaysAbs=abs(ChangeTest7Days),
TrendTest7Days=if_else(ChangeTest7Days>0,'increase','decrease'),
ChangePositivity=round(positivity_rate/lag(positivity_rate,1)*100-100,1),
ChangePositivityAbs=abs(ChangePositivity),
TrendPositivity=if_else(ChangePositivity>0,'increase','decrease'))
TestingDataECDC<-AnalysisECDC_Testing(Country)
if(nrow(TestingDataECDC)!=0){
TestingDataECDC<-TestingDataECDC %>%
mutate(date=ISOweek2date(paste0(year_week,'-7')),
ChangeTest7Days=round(tests_done/lag(tests_done,1)*100-100,1),
ChangeTest7DaysAbs=abs(ChangeTest7Days),
TrendTest7Days=if_else(ChangeTest7Days>0,'increase','decrease'),
ChangePositivity=round(positivity_rate/lag(positivity_rate,1)*100-100,1),
ChangePositivityAbs=abs(ChangePositivity),
TrendPositivity=if_else(ChangePositivity>0,'increase','decrease'))
LatestDateECDC<-max(TestingDataECDC$date)
TestingDataLatestDateECDC<-TestingDataECDC %>% filter(date==LatestDateECDC)
TextTestingECDC<-paste0('As of ',LatestDateECDC, ', there had been ', TestingDataLatestDateECDC$tests_done,' tests over the previous 7 days (a ', TestingDataLatestDateECDC$ChangeTest7DaysAbs, '% ',TestingDataLatestDateECDC$TrendTest7Days, ' compared to one week earlier), the positivity rate was ',TestingDataLatestDateECDC$positivity, '%, which represents a ',TestingDataLatestDateECDC$ChangePositivityAbs,'% ',TestingDataLatestDateECDC$TrendPositivity,' compared to one week earlier.')
} else {
TextTestingECDC<-paste0('No HQ data for testing for ',Country)
}
TextTestingECDC
TestingDataECDC<-AnalysisECDC_Testing(Country)
if(nrow(TestingDataECDC)!=0){
TestingDataECDC<-TestingDataECDC %>%
mutate(date=ISOweek2date(paste0(year_week,'-7')),
ChangeTest7Days=round(tests_done/lag(tests_done,1)*100-100,1),
ChangeTest7DaysAbs=abs(ChangeTest7Days),
TrendTest7Days=if_else(ChangeTest7Days>0,'increase','decrease'),
ChangePositivity=round(positivity_rate/lag(positivity_rate,1)*100-100,1),
ChangePositivityAbs=abs(ChangePositivity),
TrendPositivity=if_else(ChangePositivity>0,'increase','decrease'))
LatestDateECDC<-max(TestingDataECDC$date)
TestingDataLatestDateECDC<-TestingDataECDC %>% filter(date==LatestDateECDC)
TextTestingECDC<-paste0('As of ',LatestDateECDC, ', there had been ', TestingDataLatestDateECDC$tests_done,' tests over the previous 7 days (a ', TestingDataLatestDateECDC$ChangeTest7DaysAbs, '% ',TestingDataLatestDateECDC$TrendTest7Days, ' compared to one week earlier), the positivity rate was ',TestingDataLatestDateECDC$positivity_rate, '%, which represents a ',TestingDataLatestDateECDC$ChangePositivityAbs,'% ',TestingDataLatestDateECDC$TrendPositivity,' compared to one week earlier.')
} else {
TextTestingECDC<-paste0('No HQ data for testing for ',Country)
}
TextTestingECDC<-paste0('No HQ data for testing for ',Country)
TestingDataECDC<-AnalysisECDC_Testing(Country)
if(nrow(TestingDataECDC)!=0){
TestingDataECDC<-TestingDataECDC %>%
mutate(date=ISOweek2date(paste0(year_week,'-7')),
ChangeTest7Days=round(tests_done/lag(tests_done,1)*100-100,1),
ChangeTest7DaysAbs=abs(ChangeTest7Days),
TrendTest7Days=if_else(ChangeTest7Days>0,'increase','decrease'),
ChangePositivity=round(positivity_rate/lag(positivity_rate,1)*100-100,1),
ChangePositivityAbs=abs(ChangePositivity),
TrendPositivity=if_else(ChangePositivity>0,'increase','decrease'))
LatestDateECDC<-max(TestingDataECDC$date)
TestingDataLatestDateECDC<-TestingDataECDC %>% filter(date==LatestDateECDC)
TextTestingECDC<-paste0('As of ',LatestDateECDC, ', there had been ', TestingDataLatestDateECDC$tests_done,' tests over the previous 7 days (a ', TestingDataLatestDateECDC$ChangeTest7DaysAbs, '% ',TestingDataLatestDateECDC$TrendTest7Days, ' compared to one week earlier), the positivity rate was ',TestingDataLatestDateECDC$positivity_rate, '%, which represents a ',TestingDataLatestDateECDC$ChangePositivityAbs,'% ',TestingDataLatestDateECDC$TrendPositivity,' compared to one week earlier.')
} else {
TextTestingECDC<-paste0('No HQ data for testing for ',Country)
}
TextTestingECDC
TestingDataECDC<-AnalysisECDC_Testing(Country)
if(nrow(TestingDataECDC)!=0){
TestingDataECDC<-TestingDataECDC %>%
mutate(date=ISOweek2date(paste0(year_week,'-7')),
ChangeTest7Days=round(tests_done/lag(tests_done,1)*100-100,1),
ChangeTest7DaysAbs=abs(ChangeTest7Days),
TrendTest7Days=if_else(ChangeTest7Days>0,'increase','decrease'),
ChangePositivity=round(positivity_rate/lag(positivity_rate,1)*100-100,1),
ChangePositivityAbs=abs(ChangePositivity),
TrendPositivity=if_else(ChangePositivity>0,'increase','decrease'))
LatestDateECDC<-max(TestingDataECDC$date)
TestingDataLatestDateECDC<-TestingDataECDC %>% filter(date==LatestDateECDC)
TextTestingECDC<-paste0('As of ',LatestDateECDC, ', there had been ', TestingDataLatestDateECDC$tests_done,' tests over the previous 7 days (a ', TestingDataLatestDateECDC$ChangeTest7DaysAbs, '% ',TestingDataLatestDateECDC$TrendTest7Days, ' compared to one week earlier), the positivity rate was ',round(TestingDataLatestDateECDC$positivity_rate,1), '%, which represents a ',TestingDataLatestDateECDC$ChangePositivityAbs,'% ',TestingDataLatestDateECDC$TrendPositivity,' compared to one week earlier.')
} else {
TextTestingECDC<-paste0('No HQ data for testing for ',Country)
}
TextTestingECDC
for (Country in CountriesOfInterest$ADM0NAME){
render(paste0(folder_,"\\Generation_Narratives.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Narratives_",Country),word_document(reference_doc= "Template.docx"))
}
rsconnect::showLogs('worldhealthorg','euro-covid19')
rsconnect::showLogs(account='worldhealthorg','euro-covid19')
rsconnect::showLogs(account='worldhealthorg',appName='euro-covid19')
shiny::runApp('~/GitHub/euro_covid_app/aggregate-app')
Severity_Web<-read.csv(paste0(folder,'/ForDailyUpdate/SeverityWeb.csv'))
#### 1 - Initial set-up ####
#Cleans everything (any previously datasets, functions created,..)
rm(list = ls())
#### 1.A - Call of packages needed in the script ####
# Checks first if they are already installed and installs them if they're not
PackagesToInstall<-c('devtools','data.table','ISOweek',"hablar","ggsci",'BBmisc',"stringr","magick","gridExtra","lubridate","readxl","RColorBrewer","ggplot2","dplyr","rmarkdown","kableExtra","flextable","ggpubr","knitr","scales","tidyr","scales","xml2","rvest","qdapRegex",'cowplot','WHOCountryNames')
for (i in PackagesToInstall) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
#### 1.B - Reads all datasets necessary for the script and do some adaptations, reformating or basic calculations ####
#Reads where the file 'ScriptToRun.R' is stored
folder_<-dirname(rstudioapi::getSourceEditorContext()$path)
folderOutGit<-dirname(dirname(folder_))
folder<-paste0(folderOutGit,'/InOutSlideDeck')
Dataset_Epiforecast_ <- read.csv("https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/rt.csv") %>%
filter(type=='estimate')
Dataset_GlobalPopulation<-read.csv(paste0(folder,"/NoUpdateNeeded/ref_Country.csv")) %>%
select(ADM0NAME,UNPOP2019) %>% mutate(ADM0NAME=str_to_title(ADM0NAME))
MainDataset<-read.csv(paste0(folder,"/ForDailyUpdate/qry_COVID_running_cases_country_date.csv")) %>%
mutate(DateReport1=as.Date(parse_date_time(DateReport1, c("dmy", "ymd","mdy"))),ADM0NAME=str_to_title(ADM0NAME)) %>%
left_join(Dataset_GlobalPopulation,by="ADM0NAME")
JRCDataset<-read.csv('https://raw.githubusercontent.com/ec-jrc/COVID-19/master/data-by-country/jrc-covid-19-all-days-by-country.csv') %>%
mutate(CountryName=if_else(CountryName=='Moldova','Republic Of Moldova',CountryName)) %>%
mutate(CountryName=str_to_title(CountryName))
ECDC_Hosp<-read_excel(paste0(folder,"/ForDailyUpdate/ECDC_HospICU.xlsx"))
ECDC_Testing<-read_excel(paste0(folder,"/ForDailyUpdate/ECDC_Testing.xlsx"))
Vaccines_Tracker<-read.csv(paste0(folder,'/ForDailyUpdate/data_for_mapping_vaccines.csv'))
HQTesting<-read_excel(paste0(folder,"/ForDailyUpdate/HQ_Testing.xlsx"))
tessy_epi<-read.csv(paste0(folder,"/ForDailyUpdate/tessy_aggregated.csv"))
tessy_testing<-read.csv(paste0(folder,"/ForDailyUpdate/tessy_national_tests.csv"))
variantdataset<-read_excel(paste0(folder,'/ForDailyUpdate/VOC Monitoring.xlsx'), sheet = 'Summary table')[c(3:64),c(1,2,3,5,6,8,9,15,20)]
colnames(variantdataset)<-c('ADM0NAME','UK_Date','UK_Cases','SA_Date','SA_Cases','Br_Date','Br_Cases','Ind_Date','Ind_Cases')
variantdataset<-variantdataset %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
mutate(UK_Cases=as.numeric(UK_Cases)) %>%
mutate(SA_Cases=as.numeric(SA_Cases)) %>%
mutate(Br_Cases=as.numeric(Br_Cases)) %>%
mutate(Ind_Cases=as.numeric(Ind_Cases))
variantdatasetTessy<-read.csv(paste0(folder,'/ForDailyUpdate/data_for_mapping_variants.csv'))
SubnationalDataset<-read.csv(paste0(folder,"/ForDailyUpdate/SubnationalDataset.csv"),encoding = "UTF-8")
SubnationalDataset<-WHOCountryNames(SubnationalDataset,CountryName)
SubnationalDataset_ <-SubnationalDataset %>%
mutate(Positive7dayWeekBefore=Positive14day-Positive7day) %>%
mutate(Change7Days=round(Positive7day/Positive7dayWeekBefore*100-100,1))
Analysis_Subnational<-function(ctr){
AllregionsPerCountry<-SubnationalDataset_ %>%
filter(CountryName==ctr) %>%
select(CountryName,Region,Change7Days,Incidence7day,DateRpt) %>%
mutate(Change7Days_Abs=abs(Change7Days))
maxDate<-max(AllregionsPerCountry$DateRpt)
Top3_Regions_Change<-AllregionsPerCountry %>% arrange(desc(Change7Days_Abs)) %>% top_n(3)
Top3_Regions_7incidence<-AllregionsPerCountry %>% arrange(desc(Incidence7day)) %>% top_n(3)
return(list(Top3_Regions_Change=Top3_Regions_Change,Top3_Regions_7incidence=Top3_Regions_7incidence,maxDate=maxDate))
}
#### 2 - Analysis ####
AnalysisRtPerCountry<-function(ctr){
Dataset_Epiforecast_Country<-Dataset_Epiforecast_ %>% filter(country==ctr)
Dataset_Epiforecast_Country <- Dataset_Epiforecast_Country %>%
select(date,country,R=median) %>%
arrange(date) %>%
mutate(Trend=if_else(lag(R,1)>=lag(R,0),'decreasing','increasing'),
AboveBelow=if_else(R>1,'above 1','below 1'),
TrendDays:= rowid(rleid(Trend)),
AboveBelowDays := rowid(rleid(AboveBelow)))
return(Dataset_Epiforecast_Country)
}
AnalysisEpi<-function(ctr){
CountryPopulation<-(Dataset_GlobalPopulation %>% filter(ADM0NAME==ctr))$UNPOP2019
CountryEpiDataset<-MainDataset %>% filter(ADM0NAME==ctr)
maxDate<-max(CountryEpiDataset$DateReport1)
CountryEpiDataset <-CountryEpiDataset %>%
mutate(Cases_Last7Days=TotalCases-lag(TotalCases,7),
Cases_Incidence7Days=Cases_Last7Days/CountryPopulation*100000,
Cases_PercChange7Days=Cases_Incidence7Days/lag(Cases_Incidence7Days,7)*100-100,
Cases_Trend7DaysIncidence=if_else(Cases_PercChange7Days<=0,'decrease','increase'),
Cases_AbsolutePercChange=abs(round(Cases_PercChange7Days,1)),
Deaths_Last7Days=TotalDeaths-lag(TotalDeaths,7),
Deaths_Incidence7Days=Deaths_Last7Days/CountryPopulation*100000,
Deaths_PercChange7Days=Deaths_Incidence7Days/lag(Deaths_Incidence7Days,7)*100-100,
Deaths_Trend7DaysIncidence=if_else(Deaths_PercChange7Days<=0,'decrease','increase'),
Deaths_AbsolutePercChange=abs(round(Deaths_PercChange7Days,1)))
return(CountryEpiDataset)
}
AnalysisAge<-function(ctr){
tessy_age<-tessy_epi %>% filter(CountryName==ctr) %>%
select(ReportingCountry,DateUsedForStatisticsISO,Age00.04,Age05.14,Age15.24,
Age25.49,Age50.64,Age65.79,Age80.,
AgeUnk,Deaths00.04,Deaths05.14,
Deaths15.24,Deaths25.49,Deaths50.64,
Deaths65.79,Deaths80.,DeathsUNK) %>%
filter(DateUsedForStatisticsISO %in% c(ISOweek(Sys.Date()-7),ISOweek(Sys.Date()-14))) %>%
pivot_longer(cols=c(Age00.04:DeathsUNK)) %>%
mutate(variable=ifelse(grepl("Age",name),'Cases','Deaths')) %>%
mutate(Age=case_when(grepl("00.04",name)~'0-4',
grepl("05.14",name)~'05-14',
grepl("15.24",name)~'15-24',
grepl("25.49",name)~'25-49',
grepl("50.64",name)~'50-64',
grepl("65.79",name)~'65-79',
grepl("80.",name)~'80 and more',
grepl("UNK",name)~'Unknown',
grepl("Unk",name)~'Unknown')) %>%
group_by(DateUsedForStatisticsISO,variable) %>%
mutate(perc=round(value/sum(value,na.rm=TRUE)*100,1))
return(tessy_age)
}
AnalysisJRC<-function(ctr){
JRCCountry<-JRCDataset %>% filter(CountryName==ctr)
JRCCountry<-JRCCountry %>%
mutate(PercChangeHosp_7Days=round(Hospitalized/lag(Hospitalized,7)*100-100,1),
TrendHosp=if_else(PercChangeHosp_7Days>0,'increase','decrease'),
PercChangeICU_7Days=round(IntensiveCare/lag(IntensiveCare,7)*100-100,1),
TrendICU=if_else(PercChangeICU_7Days>0,'increase','decrease'))
return(JRCCountry)
}
AnalysisECDC_Hosp<-function(ctr){
ECDCCountry_Hosp<-ECDC_Hosp %>% filter(country==ctr)
return(ECDCCountry_Hosp)
}
AnalysisVaccineTracker<-function(ctr){
Vaccine_Country<-Vaccines_Tracker %>% filter(report_country==ctr)
return(Vaccine_Country)
}
AnalysisTesting<-function(ctr){
TestingData<-HQTesting %>% filter(country==ctr)
return(TestingData)
}
AnalysisTestingTessy<-function(ctr){
testing_country<-tessy_testing %>% filter(CountryName==ctr) %>%
select(CountryName,DateUsedForStatisticsISO,TestedAll)
epi_country<-tessy_epi %>% filter(CountryName==ctr) %>%
select(CountryName,NumberOfCases,DateUsedForStatisticsISO)
testing_data<-testing_country %>% left_join(epi_country,by = c("CountryName",'DateUsedForStatisticsISO'))
return(testing_data)
}
AnalysisECDC_Testing<-function(ctr){
ECDCCountry_Testing<-ECDC_Testing %>% filter(country==ctr)
return(ECDCCountry_Testing)
}
Analysis_VariantsWHO<-function(ctr){
variants_country<-variantdataset %>% filter(ADM0NAME==ctr)
return(variants_country)
}
Analysis_VariantsTessy<-function(ctr){
variants_country<-variantdatasetTessy %>% filter(report_country==ctr)
return(variants_country)
}
CurrentDate<-max(MainDataset$DateReport1)
FirstDate<-min(MainDataset$DateReport1)
dir.create(paste0(folder,"/",CurrentDate))
OutputFolder<-paste0(folder,"/",CurrentDate)
dir.create(paste0(OutputFolder,"/Charts"))
dir.create(paste0(OutputFolder,"/SlideDeck"))
CountriesOfInterest<-read.csv(paste0(folder,"/ForDailyUpdate/CountriesOfInterest.csv")) %>%
filter(Interest=="Yes")
# Preparing number formatting
plain <- function(x,...) {
format(x, ..., scientific = FALSE, trim = TRUE,big.mark=" ")
}
# Preparing folder structure
#
# DatasetTesting<-read.csv(paste0(folder,"/ForDailyUpdate//data_export_NCOV_WEEK_AGG_EURO.csv")) %>% filter(AGE_GROUP_FK=='All') %>%
#   mutate(WEEK_START_DATE=as.Date(parse_date_time(WEEK_START_DATE, c("dmy", "ymd","mdy")))) %>%
#   mutate(ï..REPORT_COUNTRY_FK=if_else(ï..REPORT_COUNTRY_FK=='Bosnia and Herzegovina','Bosnia And Herzegovina',ï..REPORT_COUNTRY_FK)) %>%
#   mutate(ï..REPORT_COUNTRY_FK=if_else(ï..REPORT_COUNTRY_FK=='Kosovo (in accordance with Security Council resolution 1244 (1999))','Kosovo',ï..REPORT_COUNTRY_FK)) %>%
#   mutate(ï..REPORT_COUNTRY_FK=if_else(ï..REPORT_COUNTRY_FK=='Czechia','Czech Republic',ï..REPORT_COUNTRY_FK)) %>%
#   mutate(ï..REPORT_COUNTRY_FK=if_else(ï..REPORT_COUNTRY_FK=='Republic of Moldova','Republic Of Moldova',ï..REPORT_COUNTRY_FK))
# Might need to check if this DatasetTesting is created properly, the field name on Country is acting strange
CountriesPerRegion<-read.csv(paste0(folder,"/ForDailyUpdate/CountriesOfInterest.csv")) %>% select(ADM0NAME,Region)
WorldRegions_Data<-read.csv(paste0(folder,"/ForDailyUpdate/WorldRegions_Data.csv"))
KeyMessages<-read_excel(paste0(folder,"/ForDailyUpdate/KeyMessages.xlsx"))
PHSMNarratives<-read_excel(paste0(folder,"/ForDailyUpdate/PHSM_Narratives.xlsx"))
EventsInterest<-read_excel(paste0(folder,"/ForDailyUpdate/EventsInterest.xlsx"))
#### 1.C - Severity Dataset ####
# This section is a bit more complicated and aims at building a unique
# severity dataset coming from all the country sheets of the excel file
# Function that transforms datasets in the sheets of the Severity Index xls file
# Will be used to create a full dataset made of all sheets (one sheet = one country)
# For info, matrix = data of same type, data frame = data can be different type
# If you transpose a data.frame, it becomes a matrix.
# Involves some workaround to recreate a data.frame
readSeverityDataset <- function(country) {
df <- read_excel(paste0(folder,"/ForDailyUpdate/SeverityIndex.xlsx"), sheet = country,col_names=FALSE) #DataFrame
dft <- t(df) #Dataframe has become a character matrix due to transposition
colnames(dft) <- dft[1,] #Rewriting the column names
colnames(dft)<-make.names(colnames(dft)) #Make sure column names are in acceptable format, no special character, no space,...
dft<-dft[-c(1), ] #Removing useless row
Severity<-dft[,c("X1.4_IND","X4.1_IND","X4.2_IND","X4.3_IND","X4.5_IND","X5_IND","PHSM.SI","Date")] #Selects only fields we are interested in
Severity<-as.data.frame(Severity) %>% mutate(Date=as.numeric(Date)) %>%
mutate(Date=as.Date(Date,origin = "1899-12-30")) %>%
convert(num("X1.4_IND","X4.1_IND","X4.2_IND","X4.3_IND","X4.5_IND","X5_IND","PHSM.SI"))
#Retransforms the matrix in a dataframe where different types of data are allowed, converts characters into dates or numbers
Severity$ADM0NAME<-country #Creates new field with country name as the final aim is to have a global dataset with all countries
Severity<-Severity %>% select(
Date,
ADM0NAME,
GlobalIndex=PHSM.SI,
Masks= X1.4_IND,
School = X4.1_IND,
Workplace=X4.2_IND,
Gatherings=X4.3_IND,
StayHome=X4.5_IND,
Travels=X5_IND,
) #Gives understandable column names
return(Severity)
}
#Returns list of all countries in the severity excel file
ListCountries_Index<-excel_sheets(paste0(folder,"/ForDailyUpdate/SeverityIndex.xlsx"))
#Creates the whole severity dataset with all countries
StringencyIndex<-data.frame()
for (country in ListCountries_Index){
StringencyIndex_<-readSeverityDataset(country)
StringencyIndex<-bind_rows(StringencyIndex,StringencyIndex_)
}
StringencyIndex<-WHOCountryNames(StringencyIndex,ADM0NAME)
#StringencyIndex<-StringencyIndex %>% filter(ADM0NAME %in% CountriesOfInterest$ADM0NAME)
write.csv(StringencyIndex,paste0(OutputFolder,'/StringencyIndex.csv'),row.names=FALSE)
### End of steps related to severity/stringency
### 1.D Last final settings, creation of folder structure for the outputs, creation of palettes and chart theme that will be used a couple of times
#Will be used to create a legend
LegendTimeLine<-read.csv(paste0(folder,"/NoUpdateNeeded/LegendTimeLine.csv"))
MyPalette<-c("#008dc9ff", "#d86422ff", "#9E0031", "#d4aa7dff", "#197278ff","#686868", "#f2545bff", "#90a9b7ff", "#224870ff", "#66a182ff", "#885053ff")
ChartTheme <- theme_minimal()+theme(
axis.title.x = element_text(size = 18,color="#58585a"),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 18,color="#58585a"),
axis.text.y = element_text(size = 16),
legend.text=element_text(size=16,color="#58585a"),
)
Severity_Web<-read.csv(paste0(folder,'/ForDailyUpdate/SeverityWeb.csv'))
View(Severity_Web)
View(Severity_Web)
Severity_Web<-read.csv(paste0(folder,'/ForDailyUpdate/SeverityWeb.csv')) %>%
WHOCountryNames(ADM0NAME)
Severity_Web<-read.csv(paste0(folder,'/ForDailyUpdate/SeverityWeb.csv'))
View(StringencyIndex)
#' WHO_Names function
#' This function will transform any country name as per WHO convention
#' @param dataset - dataset containing country names to convert to WHO reference
#' @param countryfield - name of the field containing country names - Don't use quotes!
#' @export
WHOCountryNames <- function(dataset,countryfield) {
who_names<-WHO_ref %>% select(ADM0NAME) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME))
countryfield <- enquo(countryfield)
NewDataset<-dataset %>%
mutate(!!countryfield:=str_to_title(!!countryfield)) %>%
mutate(!!countryfield:=case_when(!!countryfield %in% who_names$ADM0NAME ~ !!countryfield,
!!countryfield=='Czechia' ~ 'Czech Republic',
!!countryfield=='Moldova' ~ 'Republic Of Moldova',
!!countryfield=='Russia' ~ 'Russian Federation',
!!countryfield=='Russian Fed.' ~ 'Russian Federation',
!!countryfield=='UK' ~ 'United Kingdom',
!!countryfield=='Bosnia & Herzegovina' ~ 'Bosnia And Herzegovina',
!!countryfield=='United Kingdom Of Great Britain And Northern Ireland' ~ 'United Kingdom',
!!countryfield=='Kosovo[1]' ~ 'Kosovo',
!!countryfield=='Kosovo(1)' ~ 'Kosovo',
!!countryfield=='Kygyrstan' ~ 'Kyrgyzstan')
return(NewDataset)
}
#' WHO_Names function
#' This function will transform any country name as per WHO convention
#' @param dataset - dataset containing country names to convert to WHO reference
#' @param countryfield - name of the field containing country names - Don't use quotes!
#' @export
WHOCountryNames <- function(dataset,countryfield) {
who_names<-WHO_ref %>% select(ADM0NAME) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME))
countryfield <- enquo(countryfield)
NewDataset<-dataset %>%
mutate(!!countryfield:=str_to_title(!!countryfield)) %>%
mutate(!!countryfield:=case_when(!!countryfield %in% who_names$ADM0NAME ~ !!countryfield,
!!countryfield=='Czechia' ~ 'Czech Republic',
!!countryfield=='Moldova' ~ 'Republic Of Moldova',
!!countryfield=='Russia' ~ 'Russian Federation',
!!countryfield=='Russian Fed.' ~ 'Russian Federation',
!!countryfield=='UK' ~ 'United Kingdom',
!!countryfield=='Bosnia & Herzegovina' ~ 'Bosnia And Herzegovina',
!!countryfield=='United Kingdom Of Great Britain And Northern Ireland' ~ 'United Kingdom',
!!countryfield=='Kosovo[1]' ~ 'Kosovo',
!!countryfield=='Kosovo(1)' ~ 'Kosovo',
!!countryfield=='Kygyrstan' ~ 'Kyrgyzstan'))
return(NewDataset)
}
setwd('C:\Users\romanc\Documents\GitHub\Packages\WHOCountryNames')
setwd('C:/Users/romanc/Documents/GitHub/Packages/WHOCountryNames')
document()
rm(list = c("WHOCountryNames"))
document()
install_github('romanceline/Packages/WHOCountryNames')
