left_join(TableHospitalization,by=c('ADM0NAME'='ctr')) %>%
mutate(HospitalizationRate=Hospitalized/UNPOP2019*1000000,
HospitalizationRate_WeekBefore=Hospitalized_WeekBefore/UNPOP2019*1000000)
SummaryTable_SelectionCountries<-SummaryTable_AllCountries %>%
left_join(TransmissionIndicators,by=c('ADM0NAME'='country')) %>%
select(ADM0NAME,TotalCases,TotalDeaths,TransmissionStatus,RO,Trend,Cases_7Days,
Change7DaysIncidence_1week,Change14DaysIncidence_2Weeks,SvnDaysIncidence_Latest,
FrtDaysIncidence_Latest,CumulativeIncidence,RateDeaths,hosp_rate,mort_rate,case_inc,
class_hosp,class_deaths,class_cases,class_test,trans)
write.csv(SummaryTable_SelectionCountries,paste0(OutputFolder,'/SummaryTable.csv'))
#Top 10 cumulative, all info
SummaryTable_Top10_Cumulative<-SummaryTable_AllCountries %>%
top_n(10,TotalCases) %>%
arrange(desc(TotalCases))
#Top 10 according to 14days incidence
SummaryTable_Top10_14DaysIncidence<-SummaryTable_AllCountries %>%
top_n(10,FrtDaysIncidence_Latest) %>%
arrange(desc(FrtDaysIncidence_Latest)) #%>% plain
SummaryTable_Top10_14DaysIncidence_Increasing <- SummaryTable_Top10_14DaysIncidence %>% filter(Trend=='Increasing')
SummaryTable_Top10_14DaysIncidence_Stable <- SummaryTable_Top10_14DaysIncidence %>% filter(Trend=='Stable')
SummaryTable_Top10_14DaysIncidence_Decreasing <- SummaryTable_Top10_14DaysIncidence %>% filter(Trend=='Decreasing')
NbCountriesIncreasing<-nrow(SummaryTable_Top10_14DaysIncidence_Increasing)
NbCountriesStable<-nrow(SummaryTable_Top10_14DaysIncidence_Stable)
#### 2.2 Slide chart global epicurve ####
#Arrange dataset in ascending order by number of cases at latest date
#Need ascending order and not descending order for the epicurve plot
SortedDataset<-MainDataset %>% group_by(ADM0NAME) %>%
mutate(Rank=max(TotalCases)) %>%
arrange(Rank) %>%
select(-Rank)
SortedDataset<-SortedDataset %>%
mutate(ADM0NAME_=if_else(ADM0NAME %in% SummaryTable_Top10_Cumulative$ADM0NAME,ADM0NAME,'All other countries'))
SortedDataset$ADM0NAME_<-factor(SortedDataset$ADM0NAME_,levels=unique(SortedDataset$ADM0NAME_))
# Plot epicurve all countries
Epicurve_plot<-ggplot(SortedDataset,aes(fill=ADM0NAME_,y=NewCases,x=DateReport1))+
geom_bar(width=1,position="stack",stat="identity")+
scale_fill_manual(values=c('#DCDCDC',TenColors))+
ChartTheme+
theme(plot.title=element_text(size=14,hjust = 0.5,face="bold"),legend.title=element_blank(),legend.key.size=unit(0.2,"cm"),
legend.position="right",legend.text = element_text(size=8),
axis.text.x = element_text(size = 12,angle=-45,vjust=0.5, hjust=0),
axis.text.y = element_text(size = 12),
axis.title.x= element_text(size = 14),
axis.title.y= element_text(size = 14))+
scale_x_date(breaks=rev(seq(CurrentDate,FirstDate,-30)),labels = date_format("%d/%m/%Y"))+
scale_y_continuous(labels=plain,limits=c(0,NA))+
guides(fill=guide_legend(ncol=1))+
labs(y="Number of New Cases",x="Date of Report")+
ggtitle(paste0("Number of Covid-19 Cases reported weekly in the WHO European Region \n", format(FirstDate,"%d/%m/%Y")," - ",format(CurrentDate,"%d/%m/%Y")))+
theme(plot.title=element_text(size=14,hjust = 0.5,face="bold"))
ggsave(paste0(OutputFolder,"/Charts/Epicurve_allcountries.png"),Epicurve_plot,width=14,height=6)
#### 2.3 Slide chart epicurve top 10 ####
SortedDataset_Top10 <- MainDataset %>% filter(ADM0NAME %in% SummaryTable_Top10_Cumulative$ADM0NAME) %>%
group_by(ADM0NAME) %>%
mutate(Rank=max(TotalCases)) %>%
arrange(Rank) %>%
select(-Rank)
SortedDataset_Top10_Week<-SortedDataset_Top10 %>%
group_by(ADM0NAME,epiWeek) %>%
summarise(Totals=sum(NewCases))
SortedDataset_Top10$ADM0NAME<-factor(SortedDataset_Top10$ADM0NAME,levels=unique(SortedDataset_Top10$ADM0NAME))
CutDate<-as.Date("2020-02-24") ### Sets a limit for the epicurve plot top 10
# Plot epicurve top10 countries
EpicurveTop10_plot <- SortedDataset_Top10 %>% filter (DateReport1>CutDate) %>%
ggplot(aes(fill=ADM0NAME,y=NewCases,x=DateReport1))+
scale_fill_manual(values=TenColors)+
#geom_area(position="fill",stat="identity",alpha=0.8,colour="white")+
geom_bar(width=1,position="fill",stat="identity",alpha=0.8,color=alpha('white',0))+
ChartTheme+
scale_x_date(breaks=rev(seq(CurrentDate,FirstDate,-30)),labels = date_format("%d/%m/%Y"))+
scale_y_continuous(limits=c(0,NA),labels=plain)+
ggtitle(paste0("Proportion of COVID-19 New Cases Reported Daily of the Top 10 States Parties with the \n Greatest Number of Total Cases Reported (data shown since ",format(CutDate,"%d/%m/%Y")," to ",format(CurrentDate,"%d/%m/%Y"),")"))+
theme(plot.title=element_text(size=14,hjust = 0.5,face="bold"),
legend.title=element_blank(),
legend.text=element_text(size=14,color="#58585a"),
legend.key.size=unit(0.5,"cm"),
axis.text.x = element_text(size = 12,angle=-45,vjust=0.5, hjust=0),
axis.text.y = element_text(size = 12),
axis.title.x= element_text(size = 14),
axis.title.y= element_text(size = 14))+
labs(y="Proportion of New Cases",x="Date of report")
#+
#scale_x_date(date_breaks = "5 days", labels = date_format("%d/%m/%Y"),limits=c(CutDate-1,max(SortedDataset$DateReport1)+1))
ggsave(paste0(OutputFolder,"/Charts/Epicurve_top10.png"),EpicurveTop10_plot,width=14,height=6)
# Plot epicurve top10 countries - by epiweek
EpicurveTop10_plot_week <- SortedDataset_Top10_Week %>%
ggplot(aes(fill=ADM0NAME,y=Totals,x=epiWeek))+
scale_fill_manual(values=TenColors)+
#geom_area(position="fill",stat="identity",alpha=0.8,colour="white")+
geom_bar(position="fill",stat="identity",alpha=0.8,colour="white")+
ChartTheme+
scale_y_continuous(limits=c(0,NA))+
ggtitle(paste0("Proportion of COVID-19 New Cases Reported Weekly of the Top 10 States Parties with the \n Greatest Number of Total Cases Reported (data shown since ",format(CutDate,"%d/%m/%Y")," to ",format(CurrentDate,"%d/%m/%Y"),")"))+
theme(plot.title=element_text(size=14,hjust = 0.5,face="bold"),
legend.title=element_blank(),
legend.text=element_text(size=14,color="#58585a"),
legend.key.size=unit(0.5,"cm"),
axis.text.x = element_text(size = 12,angle=-45,vjust=0.5, hjust=0),
axis.text.y = element_text(size = 12),
axis.title.x= element_text(size = 14),
axis.title.y= element_text(size = 14))+
labs(y="Proportion of New Cases",x="Week of report")
# scale_x_date(date_breaks = "5 days", labels = date_format("%d/%m/%Y"),limits=c(CutDate-1,max(SortedDataset$DateReport1)+1))
ggsave(paste0(OutputFolder,"/Charts/Epicurve_top10.png"),EpicurveTop10_plot,width=14,height=6)
#### 2.4 Slide SummaryTable ####
#Summary Table for countries of interest only, will be a slide in the slide deck
SummaryTable_CountriesInterest<-SummaryTable_AllCountries %>% filter(ADM0NAME %in% CountriesOfInterest$ADM0NAME) %>% #ADM0NAME %in% Top10Countries$ADM0NAME
select(ADM0NAME,TotalCases,TotalDeaths,TransmissionStatus,RO,Trend,CumulativeIncidence,SvnDaysIncidence_Latest,FrtDaysIncidence_Latest,Change14DaysIncidence_2Weeks)
SummaryTable_flex<- SummaryTable_CountriesInterest %>% plain %>% flextable() %>% theme_vanilla() %>% height_all(height = 0.35) %>%
width(~ ADM0NAME+TotalCases+TotalDeaths+TransmissionStatus+RO+Trend+CumulativeIncidence+SvnDaysIncidence_Latest+FrtDaysIncidence_Latest+Change14DaysIncidence_2Weeks,width =1.2) %>%
set_header_labels(SummaryTable_CountriesInterest,ADM0NAME="Country",TotalCases="Cases",TotalDeaths="Deaths",TransmissionStatus="Transmission scenario",RO="Effective R",Trend="Overall Trend",CumulativeIncidence="Cumulative Cases per 100,000 population",SvnDaysIncidence_Latest="7-day Cumulative Cases per 100,000 population",FrtDaysIncidence_Latest="14-day Cumulative Cases per 100,000 population",Change14DaysIncidence_2Weeks="% Change in 14-day Cumulative Incidence") %>%
bg(bg = "#F4C26E",~ Trend == "Stable", ~ Trend, part = "body") %>%
bg(bg = "#CAE7B9",~ Trend == "Decreasing", ~ Trend, part = "body") %>%
bg(bg = "#EB8886",~ Trend == "Increasing", ~ Trend, part = "body") #%>% autofit()
#### 2.5 Slide chart change 14 days incidence over one week ####
#Creates the chart showing change in 14days incidence over one week difference
DataToPlot<-SummaryTable_Top10_14DaysIncidence %>% select(ADM0NAME,FrtDaysIncidence_Latest,FrtDaysIncidence_1WkEarlier) %>%
arrange(FrtDaysIncidence_Latest) %>%
mutate(col=if_else(FrtDaysIncidence_Latest>FrtDaysIncidence_1WkEarlier,'Red','Green'))
DataToPlot$ADM0NAME<-factor(DataToPlot$ADM0NAME,levels=unique(DataToPlot$ADM0NAME))
PlotChange14Days<-ggplot(DataToPlot,aes(color=col))+
scale_color_manual(breaks=c('Green','Red'),values=c('#0DBF6F','#9E1C1A'))+
scale_x_continuous(labels=plain)+
geom_segment(aes(x=FrtDaysIncidence_1WkEarlier, y=ADM0NAME, xend=FrtDaysIncidence_Latest, yend=ADM0NAME),arrow=arrow(length = unit(0.02, "npc")), size=1,show.legend=FALSE)+
xlab("Change in 14-days cumulative incidence compared to one week ago")+
ylab('')+
ChartTheme
#### 2.6 Charts per country, Epi + PHSM Severity ####
# plain <- function(x,...) {
#   format(x, ..., scientific = FALSE, trim = TRUE)
# }
#### 2.6.1 EpiPlot per country ####
plot_casesdeaths_logscale <- function (country){
minDate<-min(min((MainDataset %>% filter(ADM0NAME==country))$DateReport1),min((StringencyIndex %>% filter(ADM0NAME == country) %>% filter(GlobalIndex!=0))$Date))
maxDate<-max(max((MainDataset %>% filter(ADM0NAME==country))$DateReport1),max((StringencyIndex %>% filter(ADM0NAME == country))$Date))
CountryData<- MainDataset %>% filter(ADM0NAME==country) %>%
select(DateReport1,NewCases,NewDeaths) %>%
pivot_longer(cols=c("NewCases","NewDeaths"),names_to="DailyVariable")
Plot<-ggplot(CountryData,aes(x=DateReport1,y=value)) +
geom_bar(stat="identity",aes(group=DailyVariable,fill=DailyVariable,color=DailyVariable,alpha=0.5))+
ylab("Daily cases and deaths (log scale)")+
xlab("Reporting date")+
scale_x_date(breaks = '15 days',labels = date_format("%d/%m/%Y"),limits=c(min=minDate-7,maxDate))+
theme_minimal()+
theme(axis.title.y = element_text(size = 18),axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.title=element_blank(),
axis.ticks.y = element_line(size = 0.2, colour = "grey"),
axis.ticks.length = unit(5, "pt"),
legend.text=element_text(size=18),
legend.key.height = unit(1.5, "cm"),
legend.key.width = unit(0.3, "cm"),
legend.spacing.y = unit(0.5, 'cm'),legend.spacing.x = unit(1, 'cm'),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank())+
scale_y_log10(labels=plain,position='left',sec.axis = dup_axis())+
scale_fill_manual(values=c("grey","#4472C4"),
breaks=c("NewCases", "NewDeaths"),
labels=c("Daily cases", "Daily deaths"))+
scale_color_manual(values=c("grey","#4472C4"),
breaks=c("NewCases", "NewDeaths"))+
guides(color=FALSE,alpha=FALSE,fill=guide_legend(nrow=2))
return(Plot)}
#### 2.6.2 Severity plot per country ####
PlotTimeLine_Index<-function(country){
#minDate<-as.Date('2020-01-31')
minDate<-min(min((MainDataset %>% filter(ADM0NAME==country))$DateReport1),min((StringencyIndex %>% filter(ADM0NAME == country) %>% filter(GlobalIndex!=0))$Date))
maxDate<-max(max((MainDataset %>% filter(ADM0NAME==country))$DateReport1),max((StringencyIndex %>% filter(ADM0NAME == country))$Date))
Dataset<-StringencyIndex %>% filter(ADM0NAME == country) %>% pivot_longer(cols=c(GlobalIndex:Travels)) %>%
mutate(height=if_else(name=='GlobalIndex',80,30),value_=0)
plot_timeline<-ggplot(Dataset,aes(x=Date,y=height))+
geom_point(aes(color=value),alpha=0)+
scale_color_gradient(high = 'black', low = 'white',breaks=c(0,100),labels=c('No measures','Most severe measures'))+
geom_tile(aes(fill=factor(name,levels=c('Masks',"School",'Workplace','Gatherings','StayHome','Travels',"GlobalIndex")),alpha=value),
stat='identity',position='stack')+theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
scale_fill_manual(breaks=c('Masks','School','Workplace','Gatherings','StayHome','Travels','GlobalIndex'),
labels=c('Masks','Schools', 'Businesses', 'Gatherings', 'Movements', 'Int. Travel','PHSM Severity Index'),values=c('#E57E00','#D0C600','#3C8E05','#A1078B','#0A698A','#AD0C00','#04319D'))+
scale_x_date(breaks = '15 days',labels = date_format("%d/%m/%Y"),limits=c(min=minDate-7,maxDate))+
labs(y='Measure severity',color='Severity scale',fill='')+
scale_y_continuous()+
scale_alpha_continuous(range=c(0,1))+
guides(alpha=FALSE,fill=guide_legend(ncol=2))+
theme_minimal()+
theme(axis.text.x = element_text(size = 16,angle=-45,vjust=0.5, hjust=0),
axis.title.y=element_text(size=18),
axis.text.y=element_blank(),
legend.title=element_blank(),
legend.text=element_text(size=18))+
theme(axis.ticks.x = element_line(size = 0.2, colour = "grey"),
axis.ticks.length = unit(5, "pt"),axis.title.x=element_blank())+
annotate('text',label='PHSM Severity Index',x=minDate+(maxDate-minDate)/2,y=40,color='white',size=6)+
annotate('text',label='Int. Travel',x=minDate+(maxDate-minDate)/2,y=95,color='white',size=6)+
annotate('text',label='Movements',x=minDate+(maxDate-minDate)/2,y=125,color='white',size=6)+
annotate('text',label='Gatherings',x=minDate+(maxDate-minDate)/2,y=155,color='white',size=6)+
annotate('text',label='Businesses',x=minDate+(maxDate-minDate)/2,y=185,color='white',size=6)+
annotate('text',label='Schools',x=minDate+(maxDate-minDate)/2,y=215,color='white',size=6)+
annotate('text',label='Masks',x=minDate+(maxDate-minDate)/2,y=245,color='white',size=6)+
theme(legend.title=element_blank(),legend.box="vertical",legend.position='bottom',legend.key.width = unit(1.5, "cm"),legend.spacing.y = unit(0.5, 'cm'),legend.spacing.x = unit(1, 'cm'))
return(plot_timeline)}
#### 2.6.3 Legend for Severity plot ####
TrickLegend<-ggplot(LegendTimeLine)+
geom_tile(stat='identity',aes(x=x,y=Height,alpha=Alpha,fill=factor(Index,levels=c('Masks',"School",'Workplace','Gatherings','StayHome','Travels',"GlobalIndex"))),position='stack')+
scale_fill_manual(breaks=c('Masks','School','Workplace','Gatherings','StayHome','Travels','GlobalIndex'),
labels=c('Masks','Schools measures', 'Workplace measures', 'Restrictions on gatherings', 'Stay-at-home requirements', 'International travel restrictions','Global Severity Index'),
values=c('#E57E00','#D0C600','#3C8E05','#A1078B','#0A698A','#AD0C00','#04319D'))+
theme_void()+
theme(legend.position="none",plot.title=element_text(hjust=0.5,size=18))+
scale_y_continuous(limits=c(-5,NA))+
scale_x_continuous(limits=c(-100,200))+
annotate("text", x = -10, y = -3, label = "No measures",size=7)+
annotate("text", x = 110, y = -3, label = "Most severe measures",size=7)+
scale_alpha_continuous(range = c(0, 1))+
labs(title='PHSM Severity Index Scale')
#### 2.6.4 Merging of plots (Epi + Severity) ####
#Merges the epi plot and the severity plot in one plot
MixPlot<-function(country){
plots<-plot_grid(plot_casesdeaths_logscale(country)+theme(legend.position='none'),PlotTimeLine_Index(country)+theme(legend.position='none'),align='v',axis='lr',nrow=2,rel_heights = c(7,3))
legends<-plot_grid(get_legend(plot_casesdeaths_logscale(country)),TrickLegend,ncol=2,rel_widths = c(2,8))
plots<-plot_grid(plots,legends,nrow=2,rel_heights = c(9,1))
return(plots)}
#Export the chart for each country of interest
for (ctr in SummaryTable_CountriesInterest$ADM0NAME){
plot<-MixPlot(ctr)+
ggsave(paste0(OutputFolder,"/Charts/",ctr,".png"),width=14,height=16)}
#### 2.7 Subnational data ####
SubnationalDataset_ <-SubnationalDataset %>%
mutate(Positive7dayWeekBefore=Positive14day-Positive7day) %>%
mutate(Change7Days=round(Positive7day/Positive7dayWeekBefore*100-100,1))
Top3_Change7Days<-function(ctr){
AllregionsPerCountry<-SubnationalDataset_ %>%
filter(CountryName==ctr) %>%
select(CountryName,Region,Change7Days) %>%
mutate(Change7Days_Abs=abs(Change7Days))
Top3_Regions<-AllregionsPerCountry %>% arrange(desc(Change7Days_Abs)) %>% top_n(3)
return(Top3_Regions)
}
# Top3_7DaysIncidence<-function(ctr){
#   AllregionsPerCountry<-SubnationalDataset %>% filter(CountryName==ctr) %>% select(CountryName,Region,Incidence7day)
#   Top3_Regions<-AllregionsPerCountry %>% arrange(desc(Incidence7day)) %>% top_n(3)
#   return(Top3_Regions)
# }
#
NationalAverage<-function(ctr){
NationalAverage_<-(SummaryTable_AllCountries %>% filter(ADM0NAME==ctr))$Change7DaysIncidence_1week
return(NationalAverage_)
}
# Top3_7DaysIncidence<-function(ctr){
#   #   AllregionsPerCountry<-SubnationalDataset %>% filter(CountryName==ctr) %>% select(CountryName,Region,Incidence7day)
#   #   Top3_Regions<-AllregionsPerCountry %>% arrange(desc(Incidence7day)) %>% top_n(3)
#   #   return(Top3_Regions)
#   # }
###
# #### 2.8 Keymessages per country slide #### - NOT USED ANYMORE
# #Generation of Richard's bullet points
# #First step, function that returns status (according to R or 14days cumulative incidence if R not available)
# GlobalStatus <- function(Country){
#   Trend<-(SummaryTable %>% filter(ADM0NAME==Country))$Trend
#   if (is.na(Trend)){
#     if (!is.na(Change_14Days_Incidence(Country)$Change)){
#       if(Change_14Days_Incidence(Country)$Change > 10){Trend<-"Increasing"}
#       else if(Change_14Days_Incidence(Country)$Change < 10){Trend<-"Decreasing"}
#       else {Trend<-"Stable"}}
#     else if (is.na(Change_14Days_Incidence(Country)$Change)){
#       if(Change_7Days_Incidence(Country)$Change > 10){Trend<-"Increasing"}
#       else if(Change_7Days_Incidence(Country)$Change < 10){Trend<-"Decreasing"}
#       else {Trend<-"Stable"}}
#     }
#   return(Trend)
# }
#
# Bulleting <-function(Country){
#   FirstDate<-min((MainDataset %>% filter(ADM0NAME==Country))$DateReport1)
#   if ((CurrentDate-FirstDate)<28){
#     Bullet1<-paste0(Country," is at the early stages of the outbreak:")
#     Bullet2<-"Continue implementing a blended approach, including detection and isolation of all suspected cases,
#     testing them, contact tracing and quarantining; including NPI"
#     Bullet3<-"Surge capacities to be in place in public health, primary care, hospitals and laboratories"
#   }
#   else if (GlobalStatus(Country)=="Decreasing"){
#     Bullet1<-"Incident rate is decreasing"
#     Bullet2<-"Continue NPI as part of a blended approach"
#     Bullet3<-"Start preparing for national transition using
#     lessons learnt from subnational level providing epidemiological,
#     health-care and public health-care criteria are met"
#   }
#   else if (GlobalStatus(Country)=="Increasing"){
#     Bullet1<-paste0(Country," is still seeing an increasing incidence")
#     Bullet2<-"Continue implementing a blended approach,
#     including detection and isolation of all suspected cases,
#     testing them, contact tracing and quarantining; including NPI"
#     Bullet3<-"Surge capacities to be in place in public health, primary care, hospitals and laboratories"
#   }
#   else if (GlobalStatus(Country)=="Stable"){
#     Bullet1<-"Incident rate is stabilizing"
#     Bullet2<-"Continue NPI as part of a blended approach"
#     Bullet3<-"Start preparing for national transition using lessons
#     learnt from subnational level providing epidemiological, health-care
#     and public health-care criteria are met"
#   }
#   return(list(Bullet1=Bullet1,Bullet2=Bullet2,Bullet3=Bullet3))
# }
#### 2.9 Regional charts ####
#This part is quite long and involves different steps to create the charts needed in slide variations at regional level
par1<-0.5 #smoothing parameter
PHSMKeyDates<-read.csv(paste0(folder,"/ForDailyUpdate/PHSMTableDates.csv")) %>%
select(Country,Date,Measure,Order,Type) %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
mutate(Measure=case_when(Measure=='Domestic Movement Restrictions' ~"Movements",
Measure=='Land Borders'~"Borders",
Measure=='Mass Gathering'~"Mass.gatherings",
Measure=='Non-essential Businesses'~"Businesses",
Measure=='Schools Closure'~"Schools")) %>% filter(!is.na(Measure)) %>%
mutate(Country=if_else(Country=="Russia","Russian Federation",Country)) %>%
mutate(Country=if_else(Country=="Republic of Moldova","Republic Of Moldova",Country)) %>%
mutate(Country=if_else(Country=='Bosnia and Herzegovina','Bosnia And Herzegovina',Country)) %>%
filter(Measure!='State of Emergency')
# PlayingwithPHSMKeyDates to find key date for ANY measure
PHSMKeyDates_<-PHSMKeyDates %>% pivot_wider(names_from=Measure,values_from=Date,names_repair='universal') %>%
mutate(Any=pmin(Movements,Borders,Mass.gatherings,Businesses,Schools,na.rm=TRUE)) %>%
pivot_longer(cols=c("Movements":"Any"),names_to="Measure") %>% rename(Date=value)
#Returns dates related to measure for specific country
DatesByMeasure<-function(ctr,msr){
DateFirstImplementation<-(PHSMKeyDates_ %>% filter(Measure==msr,Country==ctr,Type=='Introduction',Order=='First'))$Date
DateReimplementations<-(PHSMKeyDates_ %>% filter(Measure==msr,Country==ctr,Type=='Introduction',Order!='First'))$Date
DatesLifting<-(PHSMKeyDates_ %>% filter(Measure==msr,Country==ctr,Type=='Lifting'))$Date
return(list(DateFirstImplementation=DateFirstImplementation,DateReimplementations=DateReimplementations,DatesLifting=DatesLifting))
}
#Function that builds new fields in the dataset
#Moving average at each date for cases and deaths
#Log values at each date on moving averages for cases and deaths
BuildNewDataset<-function(ctr){
CountryDataset<-MainDataset %>% filter(ADM0NAME==ctr)
CountryDataset_<-data.frame()
for (date in unique(CountryDataset$DateReport1)){
valueYesterday_Cases<-(CountryDataset %>% filter(DateReport1==date-1))$NewCases
valueToday_Cases<-(CountryDataset %>% filter(DateReport1==date))$NewCases
valueTomorrow_Cases<-(CountryDataset %>% filter(DateReport1==date+1))$NewCases
MovingAverage_Cases<-(valueYesterday_Cases[1]+valueToday_Cases[1]+valueTomorrow_Cases[1])/3
valueYesterday_Deaths<-(CountryDataset %>% filter(DateReport1==date-1))$NewDeaths
valueToday_Deaths<-(CountryDataset %>% filter(DateReport1==date))$NewDeaths
valueTomorrow_Deaths<-(CountryDataset %>% filter(DateReport1==date+1))$NewDeaths
MovingAverage_Deaths<-(valueYesterday_Deaths[1]+valueToday_Deaths[1]+valueTomorrow_Deaths[1])/3
CountryDataset_Atdate<-CountryDataset %>% filter(DateReport1==date)
CountryDataset_Atdate$ThreeDaysAverage_Cases<- MovingAverage_Cases
CountryDataset_Atdate$ThreeDaysAverage_Deaths<- MovingAverage_Deaths
CountryDataset_<-bind_rows(CountryDataset_,CountryDataset_Atdate)
}
CountryDataset_<-CountryDataset_ %>% select(-c("WHO_Code","TotalCases","TotalDeaths","epiWeek")) %>%
mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths))
return(CountryDataset_)
}
#Function that creates new field (Days) once the reference date (speficic measure) is chosen
ResetZero<-function(ctr,Measure){
ReferenceDate<-DatesByMeasure(ctr,Measure)$DateFirstImplementation
CountryDataset<-BuildNewDataset(ctr) %>% mutate(Days=DateReport1-ReferenceDate) %>%
mutate(Days=as.numeric(Days))
return(CountryDataset)
}
#Prepares the dataset to be smoothened depending on the variable and type of scale
DatasetToSmooth<-function(ctr,CasesOrDeaths,Measure,Log){
CountryDataset<-ResetZero(ctr,Measure)
if(Log=="True"){
if(CasesOrDeaths=="Cases"){
CountryDataset<-CountryDataset %>%
select(ADM0NAME,DateReport1,Days,Variable=log10_MovingAverage_Cases)}
if(CasesOrDeaths=="Deaths"){
CountryDataset<-CountryDataset %>%
select(ADM0NAME,DateReport1,Days,Variable=log10_MovingAverage_Deaths)}}
if(Log=="False"){
if(CasesOrDeaths=="Cases"){
CountryDataset<-CountryDataset %>%
select(ADM0NAME,DateReport1,Days,Variable=ThreeDaysAverage_Cases)}
if(CasesOrDeaths=="Deaths"){
CountryDataset<-CountryDataset %>%
select(ADM0NAME,DateReport1,Days,Variable=ThreeDaysAverage_Deaths)}}
CountryDataset_ <-CountryDataset %>% filter(Variable!=-Inf)
return(CountryDataset_)
}
#Functions calculating spline values
SplineSmooth<-function(ctr,CasesOrDeaths,Measure,par1,Log){
CountryDataset<-DatasetToSmooth(ctr,CasesOrDeaths,Measure,Log) %>% filter(Variable!=-Inf)
SplineFunction<-smooth.spline(x=CountryDataset$Days,y=CountryDataset$Variable,spar=par1)
ValuesSpline<-data.frame(SplineValue=predict(SplineFunction,deriv=0))
CountryDataset<-data.frame(CountryDataset,ValuesSpline) %>% select(-"SplineValue.x","SplineValue"="SplineValue.y")
return(CountryDataset)
}
#Add new column to dataset to spot the date (and so, spline value) of Measure2 (Measure2 means relaxation of measure1)
GlobalCountryDataset<-function(ctr,CasesOrDeaths,Measure,par1,Log){
DatasetToPlot<-DatasetToSmooth(ctr,CasesOrDeaths,Measure,Log) %>%
# left_join((LoessSmooth(ctr,DailyOrMovingAverage,CasesOrDeaths,Measure1,par1,cutDate,Log) %>% select(Days,LoessValue)),by="Days") %>%
left_join((SplineSmooth(ctr,CasesOrDeaths,Measure,par1,Log) %>% select(Days,SplineValue)),by="Days")
DateFirstIntroduction<-DatesByMeasure(ctr,Measure)$DateFirstImplementation
DatesLifting<-DatesByMeasure(ctr,Measure)$DatesLifting
DatesIntroductions<-DateFirstIntroduction<-DatesByMeasure(ctr,Measure)$DateReimplementations
DatasetToPlot<-DatasetToPlot %>% mutate(Reintroduction=if_else(DateReport1 %in% DatesIntroductions,"Yes","No"),
Lifting=if_else(DateReport1 %in% DatesLifting,"Yes","No"))
return(DatasetToPlot)}
DatasetAllCountries<-function(ListCountries,CasesOrDeaths,Measure,par1,Log){
BigDataset<-data.frame()
for (ctry in ListCountries){
CountryDataset<-GlobalCountryDataset(ctry,CasesOrDeaths,Measure,par1,Log)
BigDataset<-bind_rows(CountryDataset,BigDataset)
}
return(BigDataset)
}
# NPIPlot<-function(ListCountries,CasesOrDeaths,Measure,par1,cutDate,Log,RealValues){
#
#   ttl <-case_when(CasesOrDeaths=="Cases" & Log =='True' ~"Daily cases",
#                   CasesOrDeaths=="Cases" & Log =='False' ~"Number of daily COVID-19 Cases",
#                   CasesOrDeaths=='Deaths'& Log =='False'~"Number of daily COVID-19 Deaths",
#                   CasesOrDeaths=='Deaths'& Log =='True'~"Number of daily COVID-19 Deaths (log scale)")
#
#   BigDataset<-DatasetAllCountries(ListCountries,CasesOrDeaths,Measure,par1,Log)
#
#   BigDataset<-BigDataset %>% pivot_longer(cols=c("Variable","SplineValue")) %>%
#     mutate(name = replace(name, name == 'SplineValue', 'Spline approach')) %>%
#     filter(DateReport1<=cutDate)
#
#   BigDataset_Smooth <- BigDataset %>% filter(name == 'Spline approach')
#
#   BigDataset_Values<-BigDataset %>% filter(name == "Variable")
#
#   BigDataset_Reintroduction<- BigDataset_Smooth %>% filter(Reintroduction=="Yes")
#   BigDataset_Lifting<-BigDataset_Smooth %>% filter(Lifting=="Yes")
#
#
#   plot<-ggplot(BigDataset_Smooth)+
#     labs(y=ttl,linetype="Smoothing Approach")+
#     geom_vline(xintercept = 0,linetype="dashed",show.legend = TRUE)+
#     geom_line(aes(x=Days,y=value,group=ADM0NAME,color='First implementation of the \nmeasure at national level'),linetype=2,size=0.75,show.legend=TRUE)+
#     geom_line(aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),linetype=1,size=0.75)+
#     scale_x_continuous(breaks=seq(-50,150,50))+theme(legend.title=element_blank(),axis.title.x =element_blank(),legend.text=element_text(size=16))#
#
#   if(Log=="True"){
#     plot<-plot+scale_y_continuous(labels=function(x) round(10^x))}
#
#   if(RealValues=="Yes")
#   {plot<-plot+geom_point(data=BigDataset_Values,aes(x=Days,y=value,color=ADM0NAME),shape=3,alpha=0.5,size=1)}
#
#   if(nrow(BigDataset_Lifting)!=0 & nrow(BigDataset_Reintroduction)==0){
#     plot<-plot+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color="Relaxation of the measure \nat national level"),shape=25,fill='white',size=4,stroke=1,show.legend=TRUE)+
#       #geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=21,fill="white",size=5,stroke=1,show.legend=FALSE)+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=25,stroke=1,size=4,show.legend=FALSE)+
#       scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level',"Relaxation of the measure \nat national level"),values=c(MyPalette[1:length(ListCountries)],"black",'black'),guide="legend")+
#       guides(colour=guide_legend(override.aes=list(
#         linetype = c(rep("solid",length(ListCountries)),'dashed','blank'),
#         shape=c(rep(NA,length(ListCountries)),NA,25),
#         size=c(rep(1,length(ListCountries)),0.5,2))))
#   }
#
#   if(nrow(BigDataset_Lifting)==0 & nrow(BigDataset_Reintroduction)==0){
#     plot<-plot+scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level'),values=c(MyPalette[1:length(ListCountries)],"black"),guide="legend")+
#       guides(colour=guide_legend(override.aes=list(
#         linetype = c(rep(length(ListCountries)),'dashed'),
#         shape =c(rep(NA,length(ListCountries)),NA),
#         size=c(rep(1,length(ListCountries)),0.5))))
#   }
#
#
#   if(nrow(BigDataset_Lifting)!=0 & nrow(BigDataset_Reintroduction)!=0){
#     plot<-plot+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color="Relaxation of the measure \nat national level"),shape=25,fill="white",size=4,stroke=1,show.legend=TRUE)+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=25,stroke=1,size=4,show.legend=FALSE)+
#       geom_point(data=BigDataset_Reintroduction,aes(x=Days,y=value,group=ADM0NAME,color="Reintroduction of the \nmeasure at national level"),shape=24,fill="white",size=4,stroke=1,show.legend=TRUE)+
#       geom_point(data=BigDataset_Reintroduction,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=24,stroke=1,size=4,show.legend=FALSE)+
#       scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level',"Relaxation of the measure \nat national level","Reintroduction of the \nmeasure at national level"),values=c(MyPalette[1:length(ListCountries)],"black","black","black"),guide="legend")+
#       guides(colour=guide_legend(override.aes=list(
#         linetype = c(rep("solid",length(ListCountries)),'dashed',"blank","blank"),
#         shape=c(rep(NA,length(ListCountries)),NA,25,24),
#         size=c(rep(1,length(ListCountries)),0.5,2,2))))
#   }
#
#   return(plot)
# }
#Simplified NPI Plot (Keep only date of first implementation, not relaxatiom, second reintroduction,...)
NPIPlot<-function(ListCountries,CasesOrDeaths,Measure,par1,cutDate,Log,RealValues){
ttl <-case_when(CasesOrDeaths=="Cases" & Log =='True' ~"Daily cases",
CasesOrDeaths=="Cases" & Log =='False' ~"Number of daily COVID-19 Cases",
CasesOrDeaths=='Deaths'& Log =='False'~"Number of daily COVID-19 Deaths",
CasesOrDeaths=='Deaths'& Log =='True'~"Number of daily COVID-19 Deaths (log scale)")
BigDataset<-DatasetAllCountries(ListCountries,CasesOrDeaths,Measure,par1,Log)
BigDataset<-BigDataset %>% pivot_longer(cols=c("Variable","SplineValue")) %>%
mutate(name = replace(name, name == 'SplineValue', 'Spline approach')) %>%
filter(DateReport1<=cutDate)
BigDataset_Smooth <- BigDataset %>% filter(name == 'Spline approach')
# BigDataset_Values<-BigDataset %>% filter(name == "Variable")
#
# BigDataset_Reintroduction<- BigDataset_Smooth %>% filter(Reintroduction=="Yes")
# BigDataset_Lifting<-BigDataset_Smooth %>% filter(Lifting=="Yes")
plot<-ggplot(BigDataset_Smooth)+
labs(y=ttl,linetype="Smoothing Approach")+
geom_vline(xintercept = 0,linetype="dashed",show.legend = TRUE)+
geom_line(aes(x=Days,y=value,group=ADM0NAME,color='First implementation of the \nmeasure at national level'),linetype=2,size=0.75,show.legend=TRUE)+
geom_line(aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),linetype=1,size=0.75)+
scale_x_continuous(breaks=seq(-50,max(BigDataset_Smooth$Days),50))+
theme(legend.title=element_blank(),axis.title.x =element_blank(),legend.text=element_text(size=16))+
scale_y_continuous(labels=plain)+
scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level'),values=c(MyPalette[1:length(ListCountries)],"black"),guide="legend")+
guides(colour=guide_legend(override.aes=list(
linetype=c(rep('solid',length(ListCountries)),'dashed'))))
if(Log=="True"){
plot<-plot+scale_y_continuous(labels=function(x) round(10^x) %>% plain)}
if(RealValues=="Yes")
{plot<-plot+geom_point(data=BigDataset_Values,aes(x=Days,y=value,color=ADM0NAME),shape=3,alpha=0.5,size=1)}
return(plot)
}
getwd()
setwd('C:/Users/romanc/Documents/GitHub/Packages/WHOCountryNames')
document()
install_github('romanceline/Packages/WHOCountryNames')
