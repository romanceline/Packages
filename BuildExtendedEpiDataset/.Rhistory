if(Log=="False"){
if(CasesOrDeaths=="Cases"){
CountryDataset<-CountryDataset %>%
select(ADM0NAME,DateReport1,Days,Variable=ThreeDaysAverage_Cases)}
if(CasesOrDeaths=="Deaths"){
CountryDataset<-CountryDataset %>%
select(ADM0NAME,DateReport1,Days,Variable=ThreeDaysAverage_Deaths)}}
CountryDataset_ <-CountryDataset %>% filter(Variable!=-Inf)
return(CountryDataset_)
}
#Functions calculating spline values
SplineSmooth<-function(ctr,CasesOrDeaths,Measure,par1,Log){
CountryDataset<-DatasetToSmooth(ctr,CasesOrDeaths,Measure,Log) %>% filter(Variable!=-Inf)
SplineFunction<-smooth.spline(x=CountryDataset$Days,y=CountryDataset$Variable,spar=par1)
ValuesSpline<-data.frame(SplineValue=predict(SplineFunction,deriv=0))
CountryDataset<-data.frame(CountryDataset,ValuesSpline) %>% select(-"SplineValue.x","SplineValue"="SplineValue.y")
return(CountryDataset)
}
#Add new column to dataset to spot the date (and so, spline value) of Measure2 (Measure2 means relaxation of measure1)
GlobalCountryDataset<-function(ctr,CasesOrDeaths,Measure,par1,Log){
DatasetToPlot<-DatasetToSmooth(ctr,CasesOrDeaths,Measure,Log) %>%
# left_join((LoessSmooth(ctr,DailyOrMovingAverage,CasesOrDeaths,Measure1,par1,cutDate,Log) %>% select(Days,LoessValue)),by="Days") %>%
left_join((SplineSmooth(ctr,CasesOrDeaths,Measure,par1,Log) %>% select(Days,SplineValue)),by="Days")
DateFirstIntroduction<-DatesByMeasure(ctr,Measure)$DateFirstImplementation
DatesLifting<-DatesByMeasure(ctr,Measure)$DatesLifting
DatesIntroductions<-DateFirstIntroduction<-DatesByMeasure(ctr,Measure)$DateReimplementations
DatasetToPlot<-DatasetToPlot %>% mutate(Reintroduction=if_else(DateReport1 %in% DatesIntroductions,"Yes","No"),
Lifting=if_else(DateReport1 %in% DatesLifting,"Yes","No"))
return(DatasetToPlot)}
DatasetAllCountries<-function(ListCountries,CasesOrDeaths,Measure,par1,Log){
BigDataset<-data.frame()
for (ctry in ListCountries){
CountryDataset<-GlobalCountryDataset(ctry,CasesOrDeaths,Measure,par1,Log)
BigDataset<-bind_rows(CountryDataset,BigDataset)
}
return(BigDataset)
}
# NPIPlot<-function(ListCountries,CasesOrDeaths,Measure,par1,cutDate,Log,RealValues){
#
#   ttl <-case_when(CasesOrDeaths=="Cases" & Log =='True' ~"Daily cases",
#                   CasesOrDeaths=="Cases" & Log =='False' ~"Number of daily COVID-19 Cases",
#                   CasesOrDeaths=='Deaths'& Log =='False'~"Number of daily COVID-19 Deaths",
#                   CasesOrDeaths=='Deaths'& Log =='True'~"Number of daily COVID-19 Deaths (log scale)")
#
#   BigDataset<-DatasetAllCountries(ListCountries,CasesOrDeaths,Measure,par1,Log)
#
#   BigDataset<-BigDataset %>% pivot_longer(cols=c("Variable","SplineValue")) %>%
#     mutate(name = replace(name, name == 'SplineValue', 'Spline approach')) %>%
#     filter(DateReport1<=cutDate)
#
#   BigDataset_Smooth <- BigDataset %>% filter(name == 'Spline approach')
#
#   BigDataset_Values<-BigDataset %>% filter(name == "Variable")
#
#   BigDataset_Reintroduction<- BigDataset_Smooth %>% filter(Reintroduction=="Yes")
#   BigDataset_Lifting<-BigDataset_Smooth %>% filter(Lifting=="Yes")
#
#
#   plot<-ggplot(BigDataset_Smooth)+
#     labs(y=ttl,linetype="Smoothing Approach")+
#     geom_vline(xintercept = 0,linetype="dashed",show.legend = TRUE)+
#     geom_line(aes(x=Days,y=value,group=ADM0NAME,color='First implementation of the \nmeasure at national level'),linetype=2,size=0.75,show.legend=TRUE)+
#     geom_line(aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),linetype=1,size=0.75)+
#     scale_x_continuous(breaks=seq(-50,150,50))+theme(legend.title=element_blank(),axis.title.x =element_blank(),legend.text=element_text(size=16))#
#
#   if(Log=="True"){
#     plot<-plot+scale_y_continuous(labels=function(x) round(10^x))}
#
#   if(RealValues=="Yes")
#   {plot<-plot+geom_point(data=BigDataset_Values,aes(x=Days,y=value,color=ADM0NAME),shape=3,alpha=0.5,size=1)}
#
#   if(nrow(BigDataset_Lifting)!=0 & nrow(BigDataset_Reintroduction)==0){
#     plot<-plot+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color="Relaxation of the measure \nat national level"),shape=25,fill='white',size=4,stroke=1,show.legend=TRUE)+
#       #geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=21,fill="white",size=5,stroke=1,show.legend=FALSE)+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=25,stroke=1,size=4,show.legend=FALSE)+
#       scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level',"Relaxation of the measure \nat national level"),values=c(MyPalette[1:length(ListCountries)],"black",'black'),guide="legend")+
#       guides(colour=guide_legend(override.aes=list(
#         linetype = c(rep("solid",length(ListCountries)),'dashed','blank'),
#         shape=c(rep(NA,length(ListCountries)),NA,25),
#         size=c(rep(1,length(ListCountries)),0.5,2))))
#   }
#
#   if(nrow(BigDataset_Lifting)==0 & nrow(BigDataset_Reintroduction)==0){
#     plot<-plot+scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level'),values=c(MyPalette[1:length(ListCountries)],"black"),guide="legend")+
#       guides(colour=guide_legend(override.aes=list(
#         linetype = c(rep(length(ListCountries)),'dashed'),
#         shape =c(rep(NA,length(ListCountries)),NA),
#         size=c(rep(1,length(ListCountries)),0.5))))
#   }
#
#
#   if(nrow(BigDataset_Lifting)!=0 & nrow(BigDataset_Reintroduction)!=0){
#     plot<-plot+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color="Relaxation of the measure \nat national level"),shape=25,fill="white",size=4,stroke=1,show.legend=TRUE)+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=25,stroke=1,size=4,show.legend=FALSE)+
#       geom_point(data=BigDataset_Reintroduction,aes(x=Days,y=value,group=ADM0NAME,color="Reintroduction of the \nmeasure at national level"),shape=24,fill="white",size=4,stroke=1,show.legend=TRUE)+
#       geom_point(data=BigDataset_Reintroduction,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=24,stroke=1,size=4,show.legend=FALSE)+
#       scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level',"Relaxation of the measure \nat national level","Reintroduction of the \nmeasure at national level"),values=c(MyPalette[1:length(ListCountries)],"black","black","black"),guide="legend")+
#       guides(colour=guide_legend(override.aes=list(
#         linetype = c(rep("solid",length(ListCountries)),'dashed',"blank","blank"),
#         shape=c(rep(NA,length(ListCountries)),NA,25,24),
#         size=c(rep(1,length(ListCountries)),0.5,2,2))))
#   }
#
#   return(plot)
# }
#Simplified NPI Plot (Keep only date of first implementation, not relaxatiom, second reintroduction,...)
NPIPlot<-function(ListCountries,CasesOrDeaths,Measure,par1,cutDate,Log,RealValues){
ttl <-case_when(CasesOrDeaths=="Cases" & Log =='True' ~"Daily cases",
CasesOrDeaths=="Cases" & Log =='False' ~"Number of daily COVID-19 Cases",
CasesOrDeaths=='Deaths'& Log =='False'~"Number of daily COVID-19 Deaths",
CasesOrDeaths=='Deaths'& Log =='True'~"Number of daily COVID-19 Deaths (log scale)")
BigDataset<-DatasetAllCountries(ListCountries,CasesOrDeaths,Measure,par1,Log)
BigDataset<-BigDataset %>% pivot_longer(cols=c("Variable","SplineValue")) %>%
mutate(name = replace(name, name == 'SplineValue', 'Spline approach')) %>%
filter(DateReport1<=cutDate)
BigDataset_Smooth <- BigDataset %>% filter(name == 'Spline approach')
# BigDataset_Values<-BigDataset %>% filter(name == "Variable")
#
# BigDataset_Reintroduction<- BigDataset_Smooth %>% filter(Reintroduction=="Yes")
# BigDataset_Lifting<-BigDataset_Smooth %>% filter(Lifting=="Yes")
plot<-ggplot(BigDataset_Smooth)+
labs(y=ttl,linetype="Smoothing Approach")+
geom_vline(xintercept = 0,linetype="dashed",show.legend = TRUE)+
geom_line(aes(x=Days,y=value,group=ADM0NAME,color='First implementation of the \nmeasure at national level'),linetype=2,size=0.75,show.legend=TRUE)+
geom_line(aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),linetype=1,size=0.75)+
scale_x_continuous(breaks=seq(-50,max(BigDataset_Smooth$Days),50))+
theme(legend.title=element_blank(),axis.title.x =element_blank(),legend.text=element_text(size=16))+
scale_y_continuous(labels=plain)+
scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level'),values=c(MyPalette[1:length(ListCountries)],"black"),guide="legend")+
guides(colour=guide_legend(override.aes=list(
linetype=c(rep('solid',length(ListCountries)),'dashed'))))
if(Log=="True"){
plot<-plot+scale_y_continuous(labels=function(x) round(10^x) %>% plain)}
if(RealValues=="Yes")
{plot<-plot+geom_point(data=BigDataset_Values,aes(x=Days,y=value,color=ADM0NAME),shape=3,alpha=0.5,size=1)}
return(plot)
}
ListCountries_1<-(CountriesPerRegion %>% filter(Region==1))$ADM0NAME
ListCountries_2<-(CountriesPerRegion %>% filter(Region==2))$ADM0NAME
ListCountries_3<-(CountriesPerRegion %>% filter(Region==3))$ADM0NAME
ListCountries_4<-(CountriesPerRegion %>% filter(Region==4))$ADM0NAME
ListCountries_5<-(CountriesPerRegion %>% filter(Region==5))$ADM0NAME
ListCountries_6<-(CountriesPerRegion %>% filter(Region==6))$ADM0NAME
ListCountries_7<-(CountriesPerRegion %>% filter(Region==7))$ADM0NAME
ListCountries_8<-(CountriesPerRegion %>% filter(Region==8))$ADM0NAME
ListCountries_9<-(CountriesPerRegion %>% filter(Region==9))$ADM0NAME
plot1<-NPIPlot(ListCountries_1,'Cases','Any',0.5,CurrentDate,'True','No')
plot2<-NPIPlot(ListCountries_2,'Cases','Any',0.5,CurrentDate,'True','No')
plot3<-NPIPlot(ListCountries_3,'Cases','Any',0.5,CurrentDate,'True','No')
plot4<-NPIPlot(ListCountries_4,'Cases','Any',0.5,CurrentDate,'True','No')
plot5<-NPIPlot(ListCountries_5,'Cases','Any',0.5,CurrentDate,'True','No')
plot6<-NPIPlot(ListCountries_6,'Cases','Any',0.5,CurrentDate,'True','No')
plot7<-NPIPlot(ListCountries_7,'Cases','Any',0.5,CurrentDate,'True','No')
plot8<-NPIPlot(ListCountries_8,'Cases','Any',0.5,CurrentDate,'True','No')
plot9<-NPIPlot(ListCountries_9,'Cases','Any',0.5,CurrentDate,'True','No')
PlotsNPI<-plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,plot7,plot8,plot9,ncol=3,nrow=3)
#### 3 - Generates slide deck ####
render(paste0(folder_,"\\Powerpoint_Creation.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Presentation_",CurrentDate),powerpoint_presentation(reference_doc= "Template.pptx"))
render(paste0(folder_,"\\Powerpoint_Creation.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Presentation_",CurrentDate),powerpoint_presentation(reference_doc= "Template.pptx"))
render(paste0(folder_,"\\Powerpoint_Creation.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Presentation_",CurrentDate),powerpoint_presentation(reference_doc= "Template.pptx"))
install_github('romanceline/Packages/GetEpiData')
GetEpiData()
test<-GetEpiData()
View(test)
# Checks first if they are already installed and installs them if they're not
PackagesToInstall<-c('openxlsx',"hablar","ggsci",'BBmisc',"stringr","magick","gridExtra","lubridate","readxl","RColorBrewer","ggplot2","dplyr","rmarkdown","kableExtra","flextable","ggpubr","knitr","scales","tidyr","scales","xml2","rvest","qdapRegex",'cowplot')
for (i in PackagesToInstall) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
folder_<-dirname(rstudioapi::getSourceEditorContext()$path)
folderRawData<-paste0(folder_,'/rawdata_to_update')
folderCleanData<-paste0(folder_,'/cleandata_to_update')
folderApp_Single<-paste0(dirname(folder_),'/app_single')
folderApp_Multiple<-paste0(dirname(folder_),'/app_multiple')
#folderAppData<-paste0(dirname(folder_),'/input_to_update')
readSeverityDataset <- function(country) {
df <- read_excel(paste0(folderRawData,"/SeverityIndex.xlsx"), sheet = country,col_names=FALSE) #DataFrame
dft <- t(df) #Dataframe has become a character matrix due to transposition
colnames(dft) <- dft[1,] #Rewriting the column names
colnames(dft)<-make.names(colnames(dft)) #Make sure column names are in acceptable format, no special character, no space,...
dft<-dft[-c(1), ] #Removing useless row
Severity<-dft[,c("X1.4_IND","X4.1_IND","X4.2_IND","X4.3_IND","X4.5_IND","X5_IND","PHSM.SI","Date")] #Selects only fields we are interested in
Severity<-as.data.frame(Severity) %>% mutate(Date=as.numeric(Date)) %>%
mutate(Date=as.Date(Date,origin = "1899-12-30")) %>%
convert(num("X1.4_IND","X4.1_IND","X4.2_IND","X4.3_IND","X4.5_IND","X5_IND","PHSM.SI"))
#Retransforms the matrix in a dataframe where different types of data are allowed, converts characters into dates or numbers
Severity$ADM0NAME<-country #Creates new field with country name as the final aim is to have a global dataset with all countries
Severity<-Severity %>% select(
Date,
ADM0NAME,
GlobalIndex=PHSM.SI,
Masks= X1.4_IND,
School = X4.1_IND,
Workplace=X4.2_IND,
Gatherings=X4.3_IND,
StayHome=X4.5_IND,
Travels=X5_IND,
) #Gives understandable column names
return(Severity)
}
#Returns list of all countries in the severity excel file
ListCountries_Index<-excel_sheets(paste0(folderRawData,"/SeverityIndex.xlsx"))
#Creates the whole severity dataset with all countries
StringencyIndex<-data.frame()
for (country in ListCountries_Index){
StringencyIndex_<-readSeverityDataset(country)
StringencyIndex<-bind_rows(StringencyIndex,StringencyIndex_)
}
write.csv(StringencyIndex,paste0(folderCleanData,'/StringencyIndex.csv'),row.names=FALSE)
ExistingKeyDates_PHSM<-read_excel(paste0(folderCleanData,"/KeyDates.xlsx"),sheet='Severity Index') %>% mutate(Date=as.Date(Date))
ExistingKeyDates_Masks<-read_excel(paste0(folderCleanData,"/KeyDates.xlsx"),sheet='Masks') %>% mutate(Date=as.Date(Date),ADM0NAME=as.character(ADM0NAME))
ExistingKeyDates_Schools<-read_excel(paste0(folderCleanData,"/KeyDates.xlsx"),sheet='Schools') %>% mutate(Date=as.Date(Date),ADM0NAME=as.character(ADM0NAME))
ExistingKeyDates_Businesses<-read_excel(paste0(folderCleanData,"/KeyDates.xlsx"),sheet='Businesses') %>% mutate(Date=as.Date(Date),ADM0NAME=as.character(ADM0NAME))
ExistingKeyDates_Borders<-read_excel(paste0(folderCleanData,"/KeyDates.xlsx"),sheet='Borders') %>% mutate(Date=as.Date(Date),ADM0NAME=as.character(ADM0NAME))
ExistingKeyDates_Movements<-read_excel(paste0(folderCleanData,"/KeyDates.xlsx"),sheet='Movements') %>% mutate(Date=as.Date(Date),ADM0NAME=as.character(ADM0NAME))
ExistingKeyDates_Gatherings<-read_excel(paste0(folderCleanData,"/KeyDates.xlsx"),sheet='Gatherings') %>% mutate(Date=as.Date(Date),ADM0NAME=as.character(ADM0NAME))
StringencyCountryKeyDates<-function(ctr,Measure){
Dataset<-StringencyIndex %>% filter(ADM0NAME==ctr)
if (Measure=='All'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=GlobalIndex)
}
if (Measure=='Schools'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=School)
}
if (Measure=='Masks'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=Masks)
}
if (Measure=='Businesses'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=Workplace)
}
if (Measure=='Borders'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=Travels)
}
if (Measure=='Movements'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=StayHome)
}
if (Measure=='Gatherings'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=Gatherings)
}
Dataset<-Dataset %>% mutate(Change=if_else(lag(Index,1)==Index,'No','Yes'))
return(Dataset)
}
Dataset_Schools_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Schools<-StringencyCountryKeyDates(ctr,'Schools')
Dataset_Schools_<-rbind(Dataset_Schools,Dataset_Schools_)
}
Dataset_Masks_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Masks<-StringencyCountryKeyDates(ctr,'Masks')
Dataset_Masks_<-rbind(Dataset_Masks,Dataset_Masks_)
}
Dataset_Businesses_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Businesses<-StringencyCountryKeyDates(ctr,'Businesses')
Dataset_Businesses_<-rbind(Dataset_Businesses,Dataset_Businesses_)
}
Dataset_Gatherings_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Gatherings<-StringencyCountryKeyDates(ctr,'Gatherings')
Dataset_Gatherings_<-rbind(Dataset_Gatherings,Dataset_Gatherings_)
}
Dataset_Borders_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Borders<-StringencyCountryKeyDates(ctr,'Borders')
Dataset_Borders_<-rbind(Dataset_Borders,Dataset_Borders_)
}
Dataset_All_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_All<-StringencyCountryKeyDates(ctr,'All')
Dataset_All_<-rbind(Dataset_All,Dataset_All_)
}
Dataset_Movements_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Movements<-StringencyCountryKeyDates(ctr,'Movements')
Dataset_Movements_<-rbind(Dataset_Movements,Dataset_Movements_)
}
Dataset_Movements_ <- Dataset_Movements_ %>% mutate(Date=as.Date(Date))
Dataset_All_ <- Dataset_All_ %>% mutate(Date=as.Date(Date))
Dataset_Businesses_ <- Dataset_Businesses_ %>% mutate(Date=as.Date(Date))
Dataset_Borders_ <- Dataset_Borders_ %>% mutate(Date=as.Date(Date))
Dataset_Movements_ <- Dataset_Movements_ %>% mutate(Date=as.Date(Date))
Dataset_Gatherings_ <- Dataset_Gatherings_ %>% mutate(Date=as.Date(Date))
Dataset_Schools_ <- Dataset_Schools_ %>% mutate(Date=as.Date(Date))
Dataset_Masks_ <- Dataset_Masks_ %>% mutate(Date=as.Date(Date))
Dataset_Movements<-Dataset_Movements_ %>%
left_join(ExistingKeyDates_Movements %>% select(Date,ADM0NAME,Narrative_Movements),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Schools<-Dataset_Schools_ %>%
left_join(ExistingKeyDates_Schools %>% select(Date,ADM0NAME,Narrative_Schools),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Masks<-Dataset_Masks_ %>%
left_join(ExistingKeyDates_Masks %>% select(Date,ADM0NAME,Narrative_Masks),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_All<-Dataset_All_ %>%
left_join(ExistingKeyDates_PHSM %>% select(Date,ADM0NAME,Narrative_All),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Borders<-Dataset_Borders_ %>%
left_join(ExistingKeyDates_Borders %>% select(Date,ADM0NAME,Narrative_Borders),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Businesses<-Dataset_Businesses_ %>%
left_join(ExistingKeyDates_Businesses %>% select(Date,ADM0NAME,Narrative_Businesses),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Gatherings<-Dataset_Gatherings_ %>%
left_join(ExistingKeyDates_Gatherings %>% select(Date,ADM0NAME,Narrative_Gatherings),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
list_of_datasets <- list("Severity Index"=Dataset_All,
"Masks"=Dataset_Masks,
"Schools"=Dataset_Schools,
"Businesses"=Dataset_Businesses,
"Gatherings"=Dataset_Gatherings,
"Movements"=Dataset_Movements,
"Borders"=Dataset_Borders)
write.xlsx(list_of_datasets, file = paste0(folder_,"/KeyDatesUpdated.xlsx"))
test<-GetEpiData()
install_github('romanceline/Packages/GetEpiData')
library(devtools)
install_github('romanceline/Packages/SummaryTable')
library(SummaryTable)
dataset<-read.csv('C:/Users/romanc/Documents/GitHub/qry_COVID_cases_by_date_final.csv')
SummaryTable(dataset)
test<-SummaryTable(dataset)
View(test)
install_github('romanceline/Packages/SummaryTable')
install_github('romanceline/Packages/SummaryTable',force=TRUE)
#Cleans everything (any previously datasets, functions created,..)
rm(list = ls())
PackagesToInstall_CRAN<-c('dplyr','rmarkdown','readxl','devtools','webshot')
for (i in PackagesToInstall_CRAN) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
PackagesToInstall_Custom<-c('GetEpiData','WHOCountryNames','SummaryTable')
for (i in PackagesToInstall_Custom) {
print(i)
if (!i %in% installed.packages())
{install_github(paste0('romanceline/Packages/',i))}
library(i, character.only = TRUE)
}
plain <- function(x,...) {
format(x, ..., scientific = FALSE, trim = TRUE,big.mark=" ")
}
folder<-paste0(dirname(rstudioapi::getActiveDocumentContext()$path),'/InOutDailyList')
pathExtract <- nchar(folder) - nchar("/HIM/DailyList/InOutDailyList")
folder <- substr(folder,1,pathExtract)
runningdataset<-read.csv(paste0(folder,'/qry_COVID_cases_by_date_final.CSV'))
ListSheets<-excel_sheets(paste0(folder,'/VariantData.xlsx'))
variantdataset_UK<-read_excel(paste0(folder,'/VariantData.xlsx'), sheet = 'UK variant summary')[c(1:63),c(2,3)] %>%
mutate(ADM0NAME=str_to_title(ADM0NAME))
colnames(variantdataset_UK)<-c('ADM0NAME','cases')
variantdataset_SA<-read_excel(paste0(folder,'/VariantData.xlsx'), sheet = 'SA variant summary')[c(1:63),c(2,3)] %>%
mutate(ADM0NAME=str_to_title(ADM0NAME))
colnames(variantdataset_SA)<-c('ADM0NAME','cases')
variantdataset_Brazil<-read_excel(paste0(folder,'/VariantData.xlsx'), sheet = 'Brazilian variant summary')[c(1:63),c(2,3)] %>%
mutate(ADM0NAME=str_to_title(ADM0NAME))
colnames(variantdataset_Brazil)<-c('ADM0NAME','cases')
Table2<-read_excel(paste0(folder,'/EpiDataCOVID19_MASTER.xlsm'), sheet = 'Table2')[c(3:64),c(1:2)]
colnames(Table2)<-make.names(Table2[c(1),])
Table2<-Table2[c(2:62),]  %>% mutate(Last.Reported=as.numeric(Last.Reported)) %>%
mutate(Last.Reported=as.Date(Last.Reported,origin='1899-12-30'))
LastDate <- max(Table2$Last.Reported) #SHould also be TODAY
NbCountriesReporting<-nrow(Table2 %>% filter(Last.Reported==LastDate))
EuroDataset<-GetEpiData() %>% mutate(ADM0NAME=str_to_title(ADM0NAME))
CurrentDate<-max(EuroDataset$DateReport)
CurrentDate_<-format(CurrentDate,"%Y-%m-%d")
DateFull<-format(CurrentDate,'%d %B %Y')
EuroDataset_Today<-EuroDataset %>% filter(DateReport==CurrentDate)
HQDataset<-read.csv('https://covid19.who.int/WHO-COVID-19-global-data.csv',fileEncoding="UTF-8-BOM")
HQDataset_LatestDate<-data.frame()
for (ctr in unique(HQDataset$Country)){
#print(ctr)
HQDataset_ctr<-HQDataset %>% filter(Country==ctr)
maxDate<-max(HQDataset_ctr$Date_reported)
HQData_ctr<-HQDataset_ctr %>% filter(Date_reported==maxDate)
HQDataset_LatestDate<-bind_rows(HQData_ctr,HQDataset_LatestDate)
}
TotalCasesToday_EU<-plain(sum(EuroDataset_Today$NewCases))
TotalDeathsToday_EU<-plain(sum(EuroDataset_Today$NewDeaths))
NbCountriesCasesToday_EU<-nrow(EuroDataset_Today %>% filter(NewCases!=0))
CountriesMore5000Cases_EU<-EuroDataset_Today %>% filter(NewCases>=5000) %>%
arrange(desc(NewCases)) %>% mutate(NewCases=plain(NewCases))
NbCountriesMore5000Cases_EU<-nrow(CountriesMore5000Cases_EU)
ListCountriesOver5000Cases<-function(){
txt<-as.character()
for (i in seq(1,NbCountriesMore5000Cases_EU-1,1)){
txt_<-paste0(CountriesMore5000Cases_EU$ADM0NAME[i],' (',CountriesMore5000Cases_EU$NewCases[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesMore5000Cases_EU$ADM0NAME[NbCountriesMore5000Cases_EU],' (',CountriesMore5000Cases_EU$NewCases[NbCountriesMore5000Cases_EU],')')
return(txt)
}
CountriesMore100Deaths_EU<-EuroDataset_Today %>% filter(NewDeaths>=100) %>% arrange(desc(NewDeaths)) %>%
mutate(NewDeaths=plain(NewDeaths))
NbCountriesMore100Deaths_EU<-nrow(CountriesMore100Deaths_EU)
ListCountriesOver100Deaths<-function(){
txt<-as.character()
for (i in seq(1,NbCountriesMore100Deaths_EU-1,1)){
txt_<-paste0(CountriesMore100Deaths_EU$ADM0NAME[i],' (',CountriesMore100Deaths_EU$NewDeaths[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesMore100Deaths_EU$ADM0NAME[NbCountriesMore100Deaths_EU],' (',CountriesMore100Deaths_EU$NewDeaths[NbCountriesMore100Deaths_EU],')')
return(txt)
}
SummTable_EU<-SummaryTable(runningdataset)
Top10Countries_7DaysIncidence_EU<-SummTable_EU %>%
filter(UNPOP2019>=100000) %>%
arrange(desc(SvnDaysIncidence_Latest)) %>%
mutate(SvnDaysIncidence_Latest=round(SvnDaysIncidence_Latest,0))
TopCountries_CumCases_EU<-SummTable_EU %>%
arrange(desc(TotalCases)) %>%
mutate(TotalCases=plain(TotalCases))
Top10Countries_CumIncidence_EU<-SummTable_EU %>%
filter(UNPOP2019>=100000) %>%
arrange(desc(CumulativeIncidence)) %>%
mutate(CumulativeIncidence=plain(round(CumulativeIncidence,0)))
TotalCases_EU<-plain(sum(SummTable_EU$TotalCases))
TotalCases_HQ<-plain(sum(HQDataset_LatestDate$Cumulative_cases))
Share_EU_Cases<-round(sum(SummTable_EU$TotalCases)/sum(HQDataset_LatestDate$Cumulative_cases)*100,0)
TotalDeaths_EU<-plain(sum(SummTable_EU$TotalDeaths))
TotalDeaths_HQ<-plain(sum(HQDataset_LatestDate$Cumulative_deaths))
Share_EU_Deaths<-round(sum(SummTable_EU$TotalDeaths)/sum(HQDataset_LatestDate$Cumulative_deaths)*100,0)
Top3_CumCases_HQ<-HQDataset_LatestDate %>%
arrange(desc(Cumulative_cases)) %>%
top_n(3,Cumulative_cases) %>%
mutate(Cumulative_cases=plain(Cumulative_cases))
CountriesOver30000Deaths_EU<-SummTable_EU %>%
filter(TotalDeaths>=30000) %>% arrange(desc(TotalDeaths)) %>%
mutate(TotalDeaths=plain(TotalDeaths))
Nb_CountriesOver30000Deaths_EU<-nrow(CountriesOver30000Deaths_EU)
ListCountriesOver30000Deaths<-function(){
txt<-as.character()
for (i in seq(1,Nb_CountriesOver30000Deaths_EU-1,1)){
txt_<-paste0(CountriesOver30000Deaths_EU$ADM0NAME[i],' (',CountriesOver30000Deaths_EU$TotalDeaths[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesOver30000Deaths_EU$ADM0NAME[Nb_CountriesOver30000Deaths_EU],' (',CountriesOver30000Deaths_EU$TotalDeaths[Nb_CountriesOver30000Deaths_EU],')')
return(txt)
}
NbCountries_VariantUK<-nrow(variantdataset_UK %>% filter(!is.na(cases)))
NbCountries_VariantSA<-nrow(variantdataset_SA %>% filter(!is.na(cases)))
NbCountries_VariantBrazil<-nrow(variantdataset_Brazil %>% filter(!is.na(cases)))
TotalCases_VariantUK<-plain(sum(variantdataset_UK$cases,na.rm=TRUE))
TotalCases_VariantSA<-plain(sum(variantdataset_SA$cases,na.rm=TRUE))
TotalCases_VariantBrazil<-plain(sum(variantdataset_Brazil$cases,na.rm=TRUE))
render(paste0(folder,"/HIM/DailyList/DailyList.Rmd"),output_file=paste0(folder,'/DailyList_',CurrentDate),word_document(reference_doc= "Template.docx"))
getwd(0)
getwd()
C:/Users/romanc/Documents/GitHub/Packages/BuildExtendedEpiDataset/
setwd('C:/Users/romanc/Documents/GitHub/Packages/BuildExtendedEpiDataset/')
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/BuildExtendedEpiDataset/data-raw/ref_Country.csv')
usethis::use_data(WHO_ref, overwrite = TRUE)
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(WHO_ref, overwrite = TRUE)
getwd()
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(dirname(rstudioapi::getActiveDocumentContext()$path))
dirname(dirname(rstudioapi::getActiveDocumentContext()$path))
dirname(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(WHO_ref, overwrite = TRUE)
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
PopulationData<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(PopulationData, overwrite = TRUE)
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
Population<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(Population, overwrite = TRUE)
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(WHO_ref, overwrite = TRUE)
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(WHO_ref, overwrite = TRUE)
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(WHO_ref, overwrite = TRUE)
document()
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(WHO_ref, overwrite = TRUE)
document()
getwd()
document()
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
Population<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(Population, overwrite = TRUE)
document()
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
getwd()
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
PopulationData<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(PopulationData, overwrite = TRUE)
document()
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(WHO_ref, overwrite = TRUE)
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(WHO_ref, overwrite = TRUE)
document()
setwd(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)))
WHO_ref<-read.csv('C:/Users/romanc/Documents/GitHub/Packages/ref_Country.csv')
usethis::use_data(WHO_ref, overwrite = TRUE)
document()
