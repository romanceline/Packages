Dataset_Borders<-StringencyCountryKeyDates(ctr,'Borders')
Dataset_Borders_<-rbind(Dataset_Borders,Dataset_Borders_)
}
Dataset_All_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_All<-StringencyCountryKeyDates(ctr,'All')
Dataset_All_<-rbind(Dataset_All,Dataset_All_)
}
Dataset_Movements_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Movements<-StringencyCountryKeyDates(ctr,'Movements')
Dataset_Movements_<-rbind(Dataset_Movements,Dataset_Movements_)
}
Dataset_Movements_ <- Dataset_Movements_ %>% mutate(Date=as.Date(Date))
Dataset_All_ <- Dataset_All_ %>% mutate(Date=as.Date(Date))
Dataset_Businesses_ <- Dataset_Businesses_ %>% mutate(Date=as.Date(Date))
Dataset_Borders_ <- Dataset_Borders_ %>% mutate(Date=as.Date(Date))
Dataset_Movements_ <- Dataset_Movements_ %>% mutate(Date=as.Date(Date))
Dataset_Gatherings_ <- Dataset_Gatherings_ %>% mutate(Date=as.Date(Date))
Dataset_Schools_ <- Dataset_Schools_ %>% mutate(Date=as.Date(Date))
Dataset_Masks_ <- Dataset_Masks_ %>% mutate(Date=as.Date(Date))
Dataset_Movements<-Dataset_Movements_ %>%
left_join(ExistingKeyDates_Movements %>% select(Date,ADM0NAME,Narrative_Movements),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Schools<-Dataset_Schools_ %>%
left_join(ExistingKeyDates_Schools %>% select(Date,ADM0NAME,Narrative_Schools),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Masks<-Dataset_Masks_ %>%
left_join(ExistingKeyDates_Masks %>% select(Date,ADM0NAME,Narrative_Masks),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_All<-Dataset_All_ %>%
left_join(ExistingKeyDates_PHSM %>% select(Date,ADM0NAME,Narrative_All),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Borders<-Dataset_Borders_ %>%
left_join(ExistingKeyDates_Borders %>% select(Date,ADM0NAME,Narrative_Borders),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Businesses<-Dataset_Businesses_ %>%
left_join(ExistingKeyDates_Businesses %>% select(Date,ADM0NAME,Narrative_Businesses),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Gatherings<-Dataset_Gatherings_ %>%
left_join(ExistingKeyDates_Gatherings %>% select(Date,ADM0NAME,Narrative_Gatherings),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
list_of_datasets <- list("Severity Index"=Dataset_All,
"Masks"=Dataset_Masks,
"Schools"=Dataset_Schools,
"Businesses"=Dataset_Businesses,
"Gatherings"=Dataset_Gatherings,
"Movements"=Dataset_Movements,
"Borders"=Dataset_Borders)
write.xlsx(list_of_datasets, file = paste0(folder_,"/KeyDatesUpdated.xlsx"))
PackagesToInstall<-c('imputeTS','zoo',"hablar","ggsci",'BBmisc',"stringr","magick","gridExtra","lubridate","readxl","RColorBrewer","ggplot2","dplyr","rmarkdown","kableExtra","flextable","ggpubr","knitr","scales","tidyr","scales","xml2","rvest","qdapRegex",'cowplot')
for (i in PackagesToInstall) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
folder_<-dirname(rstudioapi::getSourceEditorContext()$path)
folderRawData<-paste0(folder_,'/rawdata_to_update')
folderCleanData<-paste0(folder_,'/cleandata_to_update')
folderApp_Single<-paste0(dirname(folder_),'/app_single')
folderApp_Multiple<-paste0(dirname(folder_),'/app_multiple')
StringencyIndex<-read.csv(paste0(folderCleanData,'/StringencyIndex.csv'))
StringencyIndex<-StringencyIndex %>% rename(Schools=School,Businesses=Workplace,Movements=StayHome,Borders=Travels) %>%
mutate(Date=as.Date(Date)) %>% mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME)) %>%
arrange(ADM0NAME)
KeyDates_SeverityIndex<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Severity Index') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_All) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Schools<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Schools') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Schools) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Masks<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Masks') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Masks) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Businesses<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Businesses') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Businesses) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Movements<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Movements') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Movements)
KeyDates_Borders<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Borders') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Borders) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Gatherings<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Gatherings') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy"))))%>%
select(Date,ADM0NAME,Narrative_Gatherings) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
MainDataset<-read.csv(paste0(folderCleanData,"/qry_covid_running_cases_country_date.CSV")) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME),
DateReport1=as.Date(parse_date_time(DateReport1,c("dmy", "ymd","mdy")))) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Kosovo','Kosovo(1)',ADM0NAME))
MainDataset<-MainDataset %>%
merge(StringencyIndex,by.x=c('DateReport1','ADM0NAME'),by.y=c('Date','ADM0NAME'),all=TRUE) %>%
filter(!is.na(DateReport1)) %>%
filter(ADM0NAME %in% unique(StringencyIndex$ADM0NAME)) %>%
mutate(NewCases = replace_na(NewCases, 0),
NewDeaths = replace_na(NewDeaths, 0),
TotalCases = replace_na(TotalCases, 0),
TotalDeaths = replace_na(TotalDeaths, 0)) %>%
#left_join(StringencyIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_SeverityIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Masks,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Schools,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Businesses,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Borders,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Gatherings,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Movements,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date"))
RelativeDays<-function(ctr){
DatasetCountry<-MainDataset %>% filter(ADM0NAME==ctr)
minDateAll<-min((DatasetCountry %>% filter(!is.na(Narrative_All)))$DateReport1)
minDateSchools<-min((DatasetCountry %>% filter(!is.na(Narrative_Schools)))$DateReport1)
minDateMasks<-min((DatasetCountry %>% filter(!is.na(Narrative_Masks)))$DateReport1)
minDateGatherings<-min((DatasetCountry %>% filter(!is.na(Narrative_Gatherings)))$DateReport1)
minDateBusinesses<-min((DatasetCountry %>% filter(!is.na(Narrative_Businesses)))$DateReport1)
minDateBorders<-min((DatasetCountry %>% filter(!is.na(Narrative_Borders)))$DateReport1)
minDateMovements<-min((DatasetCountry %>% filter(!is.na(Narrative_Movements)))$DateReport1)
DatasetCountry<-DatasetCountry %>% mutate(Days_All=DateReport1-minDateAll) %>%
mutate(Days_Schools=as.numeric(DateReport1-minDateSchools)) %>%
mutate(Days_Masks=as.numeric(DateReport1-minDateMasks)) %>%
mutate(Days_Gatherings=as.numeric(DateReport1-minDateGatherings)) %>%
mutate(Days_Movements=as.numeric(DateReport1-minDateMovements)) %>%
mutate(Days_Borders=as.numeric(DateReport1-minDateBorders)) %>%
mutate(Days_Businesses=as.numeric(DateReport1-minDateBusinesses))
return(DatasetCountry)
}
BuildNewDataset<-function(ctr){
CountryDataset<-RelativeDays(ctr)
CountryDataset<-CountryDataset %>%
mutate(ThreeDaysAverage_Cases=(NewCases+lag(NewCases,1)+lead(NewCases,1))/3,
ThreeDaysAverage_Deaths=(NewDeaths+lag(NewDeaths,1)+lead(NewDeaths,1))/3)
CountryDataset_<-CountryDataset %>% select(-c("WHO_Code","TotalCases","TotalDeaths","epiWeek")) %>%
mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths))
return(CountryDataset_)
}
DatasetToSmooth<-function(ctr){
CountryDataset<-BuildNewDataset(ctr)
CountryDataset<-CountryDataset %>% mutate(log_cases=log10(NewCases),log_deaths=log10(NewDeaths))
return(CountryDataset)}
DatasetWithSplineValues<-function(ctr){
CountryDataset<-DatasetToSmooth(ctr)
CountryDataset_Cases<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Cases)) %>% select(DateReport1,ThreeDaysAverage_Cases)
CountryDataset_Deaths<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Deaths)) %>% select(DateReport1,ThreeDaysAverage_Deaths)
CountryDataset_logCases<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Cases)) %>%
select(DateReport1,log10_MovingAverage_Cases) %>% filter(log10_MovingAverage_Cases!=-Inf)
CountryDataset_logDeaths<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Deaths)) %>%
select(DateReport1,log10_MovingAverage_Deaths) %>% filter(log10_MovingAverage_Deaths!=-Inf)
Spline_3DaysAverageCases<-smooth.spline(x=CountryDataset_Cases$DateReport1,y=CountryDataset_Cases$ThreeDaysAverage_Cases,spar=0.5)
Spline_3DaysAverageDeaths<-smooth.spline(x=CountryDataset_Deaths$DateReport1,y=CountryDataset_Deaths$ThreeDaysAverage_Deaths,spar=0.5)
Spline_3DaysAverage_LogCases<-smooth.spline(x=CountryDataset_logCases$DateReport1,y=CountryDataset_logCases$log10_MovingAverage_Cases,spar=0.5)
Spline_3DaysAverage_LogDeaths<-smooth.spline(x=CountryDataset_logDeaths$DateReport1,y=CountryDataset_logDeaths$log10_MovingAverage_Deaths,spar=0.5)
ValuesSpline_3DaysAverageCases<-data.frame(SplineValue_3DaysAverageCases=predict(Spline_3DaysAverageCases,deriv=0))
ValuesSpline_3DaysAverageDeaths<-data.frame(SplineValue_3DaysAverageDeaths=predict(Spline_3DaysAverageDeaths,deriv=0))
ValuesSpline_3DaysAverage_LogCases<-data.frame(SplineValue_3DaysAverage_LogCases=predict(Spline_3DaysAverage_LogCases,deriv=0))
ValuesSpline_3DaysAverage_LogDeaths<-data.frame(SplineValue_3DaysAverage_LogDeaths=predict(Spline_3DaysAverage_LogDeaths,deriv=0))
CountryDataset_Cases<-data.frame(CountryDataset_Cases,ValuesSpline_3DaysAverageCases) %>%
select(DateReport1,"Spline_3DaysAverageCases"="SplineValue_3DaysAverageCases.y")
CountryDataset_Deaths<-data.frame(CountryDataset_Deaths,ValuesSpline_3DaysAverageDeaths) %>%
select(DateReport1,"Spline_3DaysAverageDeaths"="SplineValue_3DaysAverageDeaths.y")
CountryDataset_logCases<-data.frame(CountryDataset_logCases,ValuesSpline_3DaysAverage_LogCases) %>%
select(DateReport1,"Spline_3DaysAverage_logCases"="SplineValue_3DaysAverage_LogCases.y")
CountryDataset_logDeaths<-data.frame(CountryDataset_logDeaths,ValuesSpline_3DaysAverage_LogDeaths) %>%
select(DateReport1,"Spline_3DaysAverage_logDeaths"="SplineValue_3DaysAverage_LogDeaths.y")
CountryDataset_<-CountryDataset %>%
left_join(CountryDataset_Cases,by='DateReport1') %>%
left_join(CountryDataset_Deaths,by='DateReport1') %>%
left_join(CountryDataset_logCases,by='DateReport1') %>%
left_join(CountryDataset_logDeaths,by='DateReport1')
x <- zoo(CountryDataset_$Spline_3DaysAverage_logCases,CountryDataset_$DateReport1)
x <- na_interpolation(x, option = "linear") %>% fortify.zoo
y <- zoo(CountryDataset_$Spline_3DaysAverage_logDeaths,CountryDataset_$DateReport1)
y <- na_interpolation(y, option = "linear") %>% fortify.zoo
CountryDataset_<-CountryDataset_ %>% left_join(x,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logCases_='.')
CountryDataset_<-CountryDataset_ %>% left_join(y,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logDeaths_='.')
return(CountryDataset_)
}
CheckAtLeast4Values<-function(){
ListCountriesOkToSpline<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
CountryDataset<-MainDataset %>% filter(ADM0NAME==ctr)
CountryDataset<-CountryDataset %>% filter(NewDeaths!=0)
if ((nrow(CountryDataset)) > 3){
ListCountriesOkToSpline<-c(ctr,ListCountriesOkToSpline)}
}
return(ListCountriesOkToSpline)}
GlobalDataset_<-data.frame()
for (ctr in CheckAtLeast4Values()){
GlobalDataset<-DatasetWithSplineValues(ctr)
GlobalDataset_<-bind_rows(GlobalDataset_,GlobalDataset)
}
write.csv(GlobalDataset_,paste0(folderCleanData,'/GlobalDataset.csv'))
PackagesToInstall<-c('imputeTS','zoo',"hablar","ggsci",'BBmisc',"stringr","magick","gridExtra","lubridate","readxl","RColorBrewer","ggplot2","dplyr","rmarkdown","kableExtra","flextable","ggpubr","knitr","scales","tidyr","scales","xml2","rvest","qdapRegex",'cowplot')
for (i in PackagesToInstall) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
folder_<-dirname(rstudioapi::getSourceEditorContext()$path)
folderRawData<-paste0(folder_,'/rawdata_to_update')
folderCleanData<-paste0(folder_,'/cleandata_to_update')
folderApp_Single<-paste0(dirname(folder_),'/app_single')
folderApp_Multiple<-paste0(dirname(folder_),'/app_multiple')
StringencyIndex<-read.csv(paste0(folderCleanData,'/StringencyIndex.csv'))
StringencyIndex<-StringencyIndex %>% rename(Schools=School,Businesses=Workplace,Movements=StayHome,Borders=Travels) %>%
mutate(Date=as.Date(Date)) %>% mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME)) %>%
arrange(ADM0NAME)
KeyDates_SeverityIndex<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Severity Index') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_All) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Schools<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Schools') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Schools) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Masks<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Masks') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Masks) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Businesses<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Businesses') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Businesses) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Movements<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Movements') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Movements)
KeyDates_Borders<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Borders') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Borders) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Gatherings<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Gatherings') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy"))))%>%
select(Date,ADM0NAME,Narrative_Gatherings) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
MainDataset<-read.csv(paste0(folderCleanData,"/qry_covid_running_cases_country_date.CSV")) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME),
DateReport1=as.Date(parse_date_time(DateReport1,c("dmy", "ymd","mdy")))) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Kosovo','Kosovo(1)',ADM0NAME))
MainDataset<-MainDataset %>%
merge(StringencyIndex,by.x=c('DateReport1','ADM0NAME'),by.y=c('Date','ADM0NAME'),all=TRUE) %>%
filter(!is.na(DateReport1)) %>%
filter(ADM0NAME %in% unique(StringencyIndex$ADM0NAME)) %>%
mutate(NewCases = replace_na(NewCases, 0),
NewDeaths = replace_na(NewDeaths, 0),
TotalCases = replace_na(TotalCases, 0),
TotalDeaths = replace_na(TotalDeaths, 0)) %>%
#left_join(StringencyIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_SeverityIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Masks,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Schools,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Businesses,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Borders,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Gatherings,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Movements,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date"))
RelativeDays<-function(ctr){
DatasetCountry<-MainDataset %>% filter(ADM0NAME==ctr)
minDateAll<-min((DatasetCountry %>% filter(!is.na(Narrative_All)))$DateReport1)
minDateSchools<-min((DatasetCountry %>% filter(!is.na(Narrative_Schools)))$DateReport1)
minDateMasks<-min((DatasetCountry %>% filter(!is.na(Narrative_Masks)))$DateReport1)
minDateGatherings<-min((DatasetCountry %>% filter(!is.na(Narrative_Gatherings)))$DateReport1)
minDateBusinesses<-min((DatasetCountry %>% filter(!is.na(Narrative_Businesses)))$DateReport1)
minDateBorders<-min((DatasetCountry %>% filter(!is.na(Narrative_Borders)))$DateReport1)
minDateMovements<-min((DatasetCountry %>% filter(!is.na(Narrative_Movements)))$DateReport1)
DatasetCountry<-DatasetCountry %>% mutate(Days_All=DateReport1-minDateAll) %>%
mutate(Days_Schools=as.numeric(DateReport1-minDateSchools)) %>%
mutate(Days_Masks=as.numeric(DateReport1-minDateMasks)) %>%
mutate(Days_Gatherings=as.numeric(DateReport1-minDateGatherings)) %>%
mutate(Days_Movements=as.numeric(DateReport1-minDateMovements)) %>%
mutate(Days_Borders=as.numeric(DateReport1-minDateBorders)) %>%
mutate(Days_Businesses=as.numeric(DateReport1-minDateBusinesses))
return(DatasetCountry)
}
BuildNewDataset<-function(ctr){
CountryDataset<-RelativeDays(ctr)
CountryDataset<-CountryDataset %>%
mutate(ThreeDaysAverage_Cases=(NewCases+lag(NewCases,1)+lead(NewCases,1))/3,
ThreeDaysAverage_Deaths=(NewDeaths+lag(NewDeaths,1)+lead(NewDeaths,1))/3)
CountryDataset_<-CountryDataset %>% select(-c("WHO_Code","TotalCases","TotalDeaths","epiWeek")) %>%
mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths))
return(CountryDataset_)
}
DatasetToSmooth<-function(ctr){
CountryDataset<-BuildNewDataset(ctr)
CountryDataset<-CountryDataset %>% mutate(log_cases=log10(NewCases),log_deaths=log10(NewDeaths))
return(CountryDataset)}
DatasetWithSplineValues<-function(ctr){
CountryDataset<-DatasetToSmooth(ctr)
CountryDataset_Cases<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Cases)) %>% select(DateReport1,ThreeDaysAverage_Cases)
CountryDataset_Deaths<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Deaths)) %>% select(DateReport1,ThreeDaysAverage_Deaths)
CountryDataset_logCases<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Cases)) %>%
select(DateReport1,log10_MovingAverage_Cases) %>% filter(log10_MovingAverage_Cases!=-Inf)
CountryDataset_logDeaths<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Deaths)) %>%
select(DateReport1,log10_MovingAverage_Deaths) %>% filter(log10_MovingAverage_Deaths!=-Inf)
Spline_3DaysAverageCases<-smooth.spline(x=CountryDataset_Cases$DateReport1,y=CountryDataset_Cases$ThreeDaysAverage_Cases,spar=0.5)
Spline_3DaysAverageDeaths<-smooth.spline(x=CountryDataset_Deaths$DateReport1,y=CountryDataset_Deaths$ThreeDaysAverage_Deaths,spar=0.5)
Spline_3DaysAverage_LogCases<-smooth.spline(x=CountryDataset_logCases$DateReport1,y=CountryDataset_logCases$log10_MovingAverage_Cases,spar=0.5)
Spline_3DaysAverage_LogDeaths<-smooth.spline(x=CountryDataset_logDeaths$DateReport1,y=CountryDataset_logDeaths$log10_MovingAverage_Deaths,spar=0.5)
ValuesSpline_3DaysAverageCases<-data.frame(SplineValue_3DaysAverageCases=predict(Spline_3DaysAverageCases,deriv=0))
ValuesSpline_3DaysAverageDeaths<-data.frame(SplineValue_3DaysAverageDeaths=predict(Spline_3DaysAverageDeaths,deriv=0))
ValuesSpline_3DaysAverage_LogCases<-data.frame(SplineValue_3DaysAverage_LogCases=predict(Spline_3DaysAverage_LogCases,deriv=0))
ValuesSpline_3DaysAverage_LogDeaths<-data.frame(SplineValue_3DaysAverage_LogDeaths=predict(Spline_3DaysAverage_LogDeaths,deriv=0))
CountryDataset_Cases<-data.frame(CountryDataset_Cases,ValuesSpline_3DaysAverageCases) %>%
select(DateReport1,"Spline_3DaysAverageCases"="SplineValue_3DaysAverageCases.y")
CountryDataset_Deaths<-data.frame(CountryDataset_Deaths,ValuesSpline_3DaysAverageDeaths) %>%
select(DateReport1,"Spline_3DaysAverageDeaths"="SplineValue_3DaysAverageDeaths.y")
CountryDataset_logCases<-data.frame(CountryDataset_logCases,ValuesSpline_3DaysAverage_LogCases) %>%
select(DateReport1,"Spline_3DaysAverage_logCases"="SplineValue_3DaysAverage_LogCases.y")
CountryDataset_logDeaths<-data.frame(CountryDataset_logDeaths,ValuesSpline_3DaysAverage_LogDeaths) %>%
select(DateReport1,"Spline_3DaysAverage_logDeaths"="SplineValue_3DaysAverage_LogDeaths.y")
CountryDataset_<-CountryDataset %>%
left_join(CountryDataset_Cases,by='DateReport1') %>%
left_join(CountryDataset_Deaths,by='DateReport1') %>%
left_join(CountryDataset_logCases,by='DateReport1') %>%
left_join(CountryDataset_logDeaths,by='DateReport1')
x <- zoo(CountryDataset_$Spline_3DaysAverage_logCases,CountryDataset_$DateReport1)
x <- na_interpolation(x, option = "linear") %>% fortify.zoo
y <- zoo(CountryDataset_$Spline_3DaysAverage_logDeaths,CountryDataset_$DateReport1)
y <- na_interpolation(y, option = "linear") %>% fortify.zoo
CountryDataset_<-CountryDataset_ %>% left_join(x,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logCases_='.')
CountryDataset_<-CountryDataset_ %>% left_join(y,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logDeaths_='.')
return(CountryDataset_)
}
CheckAtLeast4Values<-function(){
ListCountriesOkToSpline<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
CountryDataset<-MainDataset %>% filter(ADM0NAME==ctr)
CountryDataset<-CountryDataset %>% filter(NewDeaths!=0)
if ((nrow(CountryDataset)) > 3){
ListCountriesOkToSpline<-c(ctr,ListCountriesOkToSpline)}
}
return(ListCountriesOkToSpline)}
GlobalDataset_<-data.frame()
for (ctr in CheckAtLeast4Values()){
GlobalDataset<-DatasetWithSplineValues(ctr)
GlobalDataset_<-bind_rows(GlobalDataset_,GlobalDataset)
}
write.csv(GlobalDataset_,paste0(folderCleanData,'/GlobalDataset.csv'))
shiny::runApp('GitHub/HIM/Shiny_PHSM/app_multiple')
library(TableIndicators)
TableIndicators('Belgium')
getwd('')
getwd
getwd()
setwd('C:/Users/romanc/Documents/GitHub/Packages/TableIndicators')
use_package('WHOCountryNames',type=)
use_package('WHOCountryNames',type='Depends')
library(devtools)
use_package('WHOCountryNames',type='Depends')
library(WHOCountryNames)
Dataset_Epiforecast_ <- read.csv("https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/rt.csv") %>%
filter(type=='estimate')
Rt_country<-function(ctr){
Dataset_Epiforecast_Country<-WHOCountryNames(Dataset_Epiforecast_,country) %>% filter(country==ctr)
MaxDate<-max(Dataset_Epiforecast_Country$date)
DataMaxDate<-Dataset_Epiforecast_Country %>% filter(date==MaxDate)
return(DataMaxDate)
}
Rt_country<-Rt_country(country) %>%
select(ADM0NAME="country", Last_Update='date',RO='median',CI_low='lower_90', CI_up='upper_90') %>%
mutate(Trend=if_else(CI_low<1 & CI_up<1,"Decreasing",if_else(CI_low<=1 & CI_up>=1,"Stable","Increasing")))
Dataset_GlobalPopulation<-WHO_ref %>%
select(ADM0NAME,UNPOP2019) %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
filter(ADM0NAME==country)
country<-'Belgium'
Rt_country<-Rt_country(country) %>%
select(ADM0NAME="country", Last_Update='date',RO='median',CI_low='lower_90', CI_up='upper_90') %>%
mutate(Trend=if_else(CI_low<1 & CI_up<1,"Decreasing",if_else(CI_low<=1 & CI_up>=1,"Stable","Increasing")))
Dataset_GlobalPopulation<-WHO_ref %>%
select(ADM0NAME,UNPOP2019) %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
filter(ADM0NAME==country)
use_package('GetEpiData',type=)
use_package('GetEpiData',type='Depends')
library('GetEpiData')
MainDataset<-GetEpiData() %>%
mutate(DateReport=as.Date(parse_date_time(DateReport, c("dmy", "ymd","mdy"))),ADM0NAME=str_to_title(ADM0NAME)) %>%
left_join(Dataset_GlobalPopulation,by="ADM0NAME") %>%
filter(ADM0NAME==country)
use_package('lubridate',type='Depends')
MainDataset<-GetEpiData() %>%
mutate(DateReport=as.Date(parse_date_time(DateReport, c("dmy", "ymd","mdy"))),ADM0NAME=str_to_title(ADM0NAME)) %>%
left_join(Dataset_GlobalPopulation,by="ADM0NAME") %>%
filter(ADM0NAME==country)
library('lubridate')
MainDataset<-GetEpiData() %>%
mutate(DateReport=as.Date(parse_date_time(DateReport, c("dmy", "ymd","mdy"))),ADM0NAME=str_to_title(ADM0NAME)) %>%
left_join(Dataset_GlobalPopulation,by="ADM0NAME") %>%
filter(ADM0NAME==country)
CurrentDate<-max(MainDataset$DateReport)
FirstDate<-min(MainDataset$DateReport)
LastReportingDate<-max(MainDataset$DateReport) #(This is meant to change at some point)
CurrentDataset<-MainDataset %>% filter(DateReport==CurrentDate)
TableIndicators<-function(country){
Dataset_Epiforecast_ <- read.csv("https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/national/cases/summary/rt.csv") %>%
filter(type=='estimate')
Rt_country<-function(ctr){
Dataset_Epiforecast_Country<-WHOCountryNames(Dataset_Epiforecast_,country) %>% filter(country==ctr)
MaxDate<-max(Dataset_Epiforecast_Country$date)
DataMaxDate<-Dataset_Epiforecast_Country %>% filter(date==MaxDate)
return(DataMaxDate)
}
Rt_country<-Rt_country(country) %>%
select(ADM0NAME="country", Last_Update='date',RO='median',CI_low='lower_90', CI_up='upper_90') %>%
mutate(Trend=if_else(CI_low<1 & CI_up<1,"Decreasing",if_else(CI_low<=1 & CI_up>=1,"Stable","Increasing")))
Dataset_GlobalPopulation<-WHO_ref %>%
select(ADM0NAME,UNPOP2019) %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
filter(ADM0NAME==country)
MainDataset<-GetEpiData() %>%
mutate(DateReport=as.Date(parse_date_time(DateReport, c("dmy", "ymd","mdy"))),ADM0NAME=str_to_title(ADM0NAME)) %>%
left_join(Dataset_GlobalPopulation,by="ADM0NAME") %>%
filter(ADM0NAME==country)
CurrentDate<-max(MainDataset$DateReport)
FirstDate<-min(MainDataset$DateReport)
LastReportingDate<-max(MainDataset$DateReport) #(This is meant to change at some point)
CurrentDataset<-MainDataset %>% filter(DateReport==CurrentDate)
# NbCases_Days('France',14) would give the number of cases in France over the last 14 days (starting from last reporting date)
NbCases_Days<-function(Days){
if (CurrentDate-LastReportingDate<=3){
Cases<-(((MainDataset %>% filter(DateReport==LastReportingDate))$TotalCases-
(MainDataset %>% filter(DateReport==LastReportingDate-Days))$TotalCases))}
else {
Cases<-NA
}
return(Cases)
}
NbDeaths_Days<-function(Days){
if (CurrentDate-LastReportingDate<=3){
Cases<-(((MainDataset %>% filter(DateReport==LastReportingDate))$TotalDeaths-
(MainDataset %>% filter(DateReport==LastReportingDate-Days))$TotalDeaths))}
else {
Cases<-NA
}
return(Cases)
}
Cases_7Days<-NbCases_Days(7)
Cases_14Days<-NbCases_Days(14)
Deaths_7Days<-NbDeaths_Days(7)
Deaths_14Days<-NbDeaths_Days(14)
# Function that calculates a certain incidence with a certain delay
# Ex:
# - Incidence(14,0) will give the latest 14 days incidence
# - Incidence(7,7) will give the 7 days incidence one week before last reporting date.
# The function takes into account potential reporting delays.
# If the delay is more than 3 days, will return NA.
Incidence<-function(incidence,delay){
if (CurrentDate-LastReportingDate<=3){
Pop<-Dataset_GlobalPopulation$UNPOP2019
Incidence<-round(((MainDataset %>%  filter(DateReport==LastReportingDate-delay))$TotalCases-
(MainDataset %>% filter(DateReport==LastReportingDate-incidence-delay))$TotalCases)/Pop*100000,1)}
else {
Incidence<-NA
}
return(Incidence)
}
FrtDaysIncidence_Latest<-Incidence(14,0)
FrtDaysIncidence_1WkEarlier<-Incidence(14,7)
FrtDaysIncidence_2WkEarlier<-Incidence(14,14)
SvnDaysIncidence_Latest<-Incidence(7,0)
SvnDaysIncidence_1WkEarlier<-Incidence(7,7)
SvnDaysIncidence_2WkEarlier<-Incidence(7,14)
Change14DaysIncidence_2Weeks<-round(FrtDaysIncidence_Latest/FrtDaysIncidence_2WkEarlier*100-100,1)
Change7DaysIncidence_1week<-round(SvnDaysIncidence_Latest/SvnDaysIncidence_1WkEarlier*100-100,1)
Table<-data.frame(Indicator=c('Total cases',
'Cases over the last 24h',
'Cases over the last 7 days',
'7-days incidence (per 100.000 population)',
'Change in 7-days incidence (over one week)',
'Cases over the last 14 days',
'14-days incidence (per 100.000 population)',
'Change in 14-days incidence (over 2 weeks)',
'Total deaths',
'Deaths over the last 24h',
'Deaths over the last 7 days',
'Deaths over the last 14 days'),
Value=c(round(CurrentDataset$TotalCases,0),
round(CurrentDataset$NewCases,0),
round(Cases_7Days,0),
SvnDaysIncidence_Latest,
Change7DaysIncidence_1week,
round(Cases_14Days,0),
FrtDaysIncidence_Latest,
Change7DaysIncidence_1week,
round(CurrentDataset$TotalDeaths,0),
round(CurrentDataset$NewDeaths,0),
round(Deaths_7Days,0),
round(Deaths_14Days,0)))
return(Table)
}
TableIndicators('Belgium')
document()
rm(list = c("TableIndicators"))
document()
