sec.axis = sec_axis(~ ./ratio,
labels=function(x) comma(round(10^x),digits=0,big.mark = ' '),
breaks=c(seq(0,maxlabel_round,1),maxlabel),
name="Weekly totals")) +
xlab(current$Week)+
geom_hline(aes(yintercept = 0)) +
scale_color_manual(name='',
breaks=c('cases','deaths','hospitalizations'),
values=c('#20313B','#007EB4','#D86422'),
labels=c('Weekly cases','Weekly deaths','Weekly hospitalizations'))+
theme(title = element_text(size = 12, colour = "black", face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5, size = 12, colour = "black"),
axis.text.y = element_text(hjust = 1, size = 12, colour = "black"),
legend.text= element_text(hjust = 1, size = 10, colour = "black", face="bold"),
axis.title = element_text(size=12, face="bold"),
strip.text.y = element_text(hjust = 1, size = 12, colour = "black", face="bold"),
legend.position = "top",
legend.spacing = unit(0, "line"),
legend.title=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line.y = element_line(color="darkgrey", size = 1),
panel.background = element_blank()) +
ggtitle(str_wrap(paste0(current[[country]], ": ", "Vaccination of ", group_name,' compared to weekly ',paste(listindicators,collapse=', ')),50)) +
ylab(current$PercPopulation) +
scale_x_discrete(breaks = levels(vaccine_epi_data$year_week)[c(TRUE, rep(FALSE, 1))],
drop = FALSE)
}
return(impact_plot)}
combined_file_name <- dir(here::here("data", "weekly"), "^tessy_aggregated_")
infl_file_name <- "INFL_RawData.xlsx"
testing_file_name <- dir(here::here("data", "weekly"), "^tessy_national_tests_")
variant_file_name <- dir(here::here("data", "weekly"), "^VirusVariant_AGG_")
# check only one match for file name in directory
assert_that(length(combined_file_name) == 1)
assert_that(length(testing_file_name) == 1)
assert_that(length(variant_file_name) == 1)
# read in files
combined_raw_data <- read_csv(here::here("data", "weekly", combined_file_name[1]),
guess_max=5000)
inflvir_data <- read_excel(here::here("data", "weekly", infl_file_name),
sheet = "INFLVIR", col_types = "text") %>% type_convert()
inflsari_data <- read_excel(here::here("data", "weekly", infl_file_name),
sheet="INFLSARIAGGR", col_types = "text") %>% type_convert()
testing_data <- read_csv(here::here("data", "weekly", testing_file_name),
guess_max=5000)
data <- convert_raw_to_xmart_format(combined=combined_raw_data, inflvir=inflvir_data,
inflsar=inflsari_data, testing=testing_data, pop_data=country_pop_new)
incidence_age_pop <- read_csv(here::here("data", "age_group_denominators_for_incidence_figures_2020.csv")) %>%
select(report_country, age_group, population)
# Flu data- clinical, virological, historical; thresholds; iso lookup; population; vaccinations --
vaccine_file_name <- dir(here::here("data", "weekly"), "TESSy_backup.csv$")
assert_that(length(vaccine_file_name) == 1)
vaccine_data <- read_csv(here::here("data", "weekly", vaccine_file_name), guess_max=5000)
un_vaccine_age_pop <- read_csv(here::here("data", "un_vaccine_age_group_denominators_2020.csv"))
vaccine_data <- vaccine_data %>% clean_vaccine_data(un_vaccine_age_pop, country_pop_new, reporting.week)
variant_data <- read_csv(here::here("data", "weekly", variant_file_name)) %>% clean_variant_calc('English')
data.c <- read_excel(here::here("data","weekly", "INFL_RawData.xlsx"), sheet = "INFLCLIN", guess_max=5000)
data.h <- read_csv(here::here("data", "1.INFLCLINAGGR.csv"), guess_max=5000)
thresholds <- read_excel(here::here("data", "Thresholds.xlsx"))
geog.lookup <- read_excel(here::here("data", "CountryCode.xlsx"))
data.v <- inflvir_data
plot_impact_vaccines(data,vaccine_data, 'Albania', language, pop_group='1_Age60+',listindicators=c('cases','deaths','hospitalizations'))
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp()
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
combined_file_name <- dir(here::here("data", "weekly"), "^tessy_aggregated_")
infl_file_name <- "INFL_RawData.xlsx"
testing_file_name <- dir(here::here("data", "weekly"), "^tessy_national_tests_")
variant_file_name <- dir(here::here("data", "weekly"), "^VirusVariant_AGG_")
# check only one match for file name in directory
assert_that(length(combined_file_name) == 1)
assert_that(length(testing_file_name) == 1)
assert_that(length(variant_file_name) == 1)
# read in files
combined_raw_data <- read_csv(here::here("data", "weekly", combined_file_name[1]),
guess_max=5000)
inflvir_data <- read_excel(here::here("data", "weekly", infl_file_name),
sheet = "INFLVIR", col_types = "text") %>% type_convert()
inflsari_data <- read_excel(here::here("data", "weekly", infl_file_name),
sheet="INFLSARIAGGR", col_types = "text") %>% type_convert()
testing_data <- read_csv(here::here("data", "weekly", testing_file_name),
guess_max=5000)
data <- convert_raw_to_xmart_format(combined=combined_raw_data, inflvir=inflvir_data,
inflsar=inflsari_data, testing=testing_data, pop_data=country_pop_new)
incidence_age_pop <- read_csv(here::here("data", "age_group_denominators_for_incidence_figures_2020.csv")) %>%
select(report_country, age_group, population)
# Flu data- clinical, virological, historical; thresholds; iso lookup; population; vaccinations --
vaccine_file_name <- dir(here::here("data", "weekly"), "TESSy_backup.csv$")
assert_that(length(vaccine_file_name) == 1)
vaccine_data <- read_csv(here::here("data", "weekly", vaccine_file_name), guess_max=5000)
un_vaccine_age_pop <- read_csv(here::here("data", "un_vaccine_age_group_denominators_2020.csv"))
vaccine_data <- vaccine_data %>% clean_vaccine_data(un_vaccine_age_pop, country_pop_new, reporting.week)
variant_data <- read_csv(here::here("data", "weekly", variant_file_name)) %>% clean_variant_calc('English')
data.c <- read_excel(here::here("data","weekly", "INFL_RawData.xlsx"), sheet = "INFLCLIN", guess_max=5000)
data.h <- read_csv(here::here("data", "1.INFLCLINAGGR.csv"), guess_max=5000)
thresholds <- read_excel(here::here("data", "Thresholds.xlsx"))
geog.lookup <- read_excel(here::here("data", "CountryCode.xlsx"))
data.v <- inflvir_data
#' function to plot first doses time series by country
#' @param data - main data containing cases, deaths, hosp
#' @param vaccine_data - cleaned vaccination data
#' @param country - reporting region
#' @param language - language for figure
#' @param pop_group - whether all population, -65yo or +65yo ('ALL', '1_Age<60', '1_Age60+')
#' @param listindicators - list made of maximum 3 indicators but can be less, default=c()
plot_impact_vaccines <- function(data,vaccine_data, country, language, pop_group,listindicators) {
require(assertthat)
require(here)
require(tidyverse)
require(ISOweek)
source(here::here("R", "utils", "sum_keep_na.R"))
source(here::here("R", "lexical.R"))
# configuration -----------------------------------------------------------
# making sure not using options that are exclusive to each other (no age group for hospi data)
# graphing weeks
first_week <- '2020-52'
last_week <- '2021-52'
# create vector for factoring year-week to help label graph
all.weeks <- seq(Sys.Date() - 5000, Sys.Date() + 5000, 1)
all.weeks <- unique(str_replace(ISOweek(all.weeks), "W", ""))
all.weeks <- c(all.weeks[cumsum(all.weeks %in% c(first_week, last_week)) == 1],
all.weeks[cumsum(all.weeks %in% c(first_week, last_week)) == 2][1])
# add russian-english dictionary
current<-lexical(language)
# transform vaccine data ----------------------------------------------------------
# data is unique on vaccine, year_week, report_country, and targetgroup
if (pop_group=='ALL') {
vaccine_data <- vaccine_data %>% mutate(derived_denominator = country_population)
}
# keep only country of interest and overall target group
vaccine_data <- vaccine_data %>%
filter(report_country == country) %>%
filter(targetgroup == pop_group) %>%
filter(!is.na(dosefirst)) %>%
filter(!is.na(derived_denominator))
if (nrow(vaccine_data != 0)) {
# sum over vaccine brand
vaccine_data <- vaccine_data %>%
group_by(year_week) %>%
summarise(dosefirst = sum(dosefirst), derived_denominator = first(derived_denominator), .groups='drop')
# calculate cumulative number of doses
vaccine_data$date <- ISOweek2date(paste0(str_replace(vaccine_data$year_week, "-", "-W"), "-1"))
vaccine_data <- vaccine_data %>%
arrange(date) %>%
mutate(cum_dosefirst = cumsum(dosefirst),
cum_perc = (cum_dosefirst / derived_denominator) * 100)
# keep only if cumulative percentage is less than 100% (otherwise there is an error in the denominator or numerator)
vaccine_data <- vaccine_data %>% filter(cum_perc <= 100)
# keep only weeks of interest - important this step is carried out after calculation of cumulative no. of doses
vaccine_data <- vaccine_data %>%
filter(year_week %in% all.weeks)
# factor year_week
vaccine_data <- vaccine_data %>%
mutate(year_week = factor(year_week, all.weeks))
# join vaccine data to main data (cases, deaths, hosp) ----------------------------------------------------------
data<-data %>%
filter(report_country==country) %>%
mutate(year_week=if_else(report_week<=9,
paste0(report_year,'-0',report_week),
paste0(report_year,'-',report_week))) %>%
select(year_week,age_group,cases,deaths,hospitalised,population) %>%
filter(year_week %in% all.weeks) %>%
mutate(year_week = factor(year_week, all.weeks))
# rearranging age groups
data<-data %>% filter(age_group!='UNK_AGE') %>%
mutate(age_group_recoded=if_else(age_group=='All','All',
if_else(age_group=="65_79" | age_group=='80_OVER','60_OVER','60_BELOW'))) %>%
group_by(age_group_recoded,year_week) %>%
summarise(cases=sum(cases,na.rm=TRUE),
deaths=sum(deaths,na.rm=TRUE),
hospitalised=sum(hospitalised,na.rm=TRUE))
if(pop_group=='1_Age60+'){
data<-data %>% filter(age_group_recoded=='60_OVER')
}
if(pop_group=='1_Age<60'){
data<-data %>% filter(age_group_recoded=='60_BELOW')
}
if(pop_group=='ALL'){
data<-data %>% filter(age_group_recoded=='All')
}
vaccine_epi_data<-data %>%
left_join(vaccine_data,by='year_week') %>%
mutate(cases=log10(cases),
deaths=log10(deaths),
hospitalizations=log10(hospitalised))
vaccine_epi_data<-vaccine_epi_data %>%
select(year_week,cum_perc,cases,deaths,hospitalizations) %>%
pivot_longer(cols=c('cum_perc','cases','deaths','hospitalizations'),names_to='indicator')
}
# create plot -------------------------------------------------------------
impact_plot <- ggplot(data = vaccine_epi_data)
group_name<-case_when(pop_group=='ALL'~'the total population',
pop_group=='1_Age<60'~'the population aged <60 years',
pop_group=='1_Age60+'~'the population aged >=60 years')
# return null plot if no data
if (nrow(vaccine_data) == 0) {
impact_plot <- impact_plot + geom_blank() +
ggtitle(str_wrap(paste0(current[[country]], ": ", "Vaccination of ", group_name,' compared to weekly',listindicators),50),
subtitle = current$NoDataToPlot) +
theme(title = element_text(size = 12, face = "bold"),
panel.background = element_blank())
return(impact_plot)
}
if (nrow(vaccine_data) != 0) {
vaccine_to_plot<-vaccine_epi_data %>% filter(indicator == 'cum_perc')
epi_to_plot<-vaccine_epi_data %>%
filter(indicator %in% listindicators) %>%
filter(!is.infinite(value))
ratio<- 2 * max(vaccine_to_plot$value,na.rm=TRUE)/max(epi_to_plot$value,na.rm=TRUE)
maxlabel<-max(epi_to_plot$value,na.rm=TRUE)
maxlabel_round<-round(maxlabel,0)
impact_plot<-ggplot(epi_to_plot,aes(x=year_week))+
geom_col(data=vaccine_to_plot,aes(y=value),fill="grey",col='black',size=0.6)+
geom_line(aes(y=value*ratio,color=indicator,group=indicator),size=1)+
theme_minimal()+
scale_y_continuous(position='right',
labels=comma,
name="% of population having \n received first dose of vaccine",
limits=c(0,NA),
sec.axis = sec_axis(~ ./ratio,
labels=function(x) comma(round(10^x),digits=0,big.mark = ' '),
breaks=c(seq(0,maxlabel_round,1),maxlabel),
name="Weekly totals")) +
xlab(current$Week)+
geom_hline(aes(yintercept = 0)) +
scale_color_manual(name='',
breaks=c('cases','deaths','hospitalizations'),
values=c('#20313B','#007EB4','#D86422'),
labels=c('Weekly cases','Weekly deaths','Weekly hospitalizations'))+
theme(title = element_text(size = 12, colour = "black", face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5, size = 12, colour = "black"),
axis.text.y = element_text(hjust = 1, size = 12, colour = "black"),
legend.text= element_text(hjust = 1, size = 10, colour = "black", face="bold"),
axis.title = element_text(size=12, face="bold"),
strip.text.y = element_text(hjust = 1, size = 12, colour = "black", face="bold"),
legend.position = "top",
legend.spacing = unit(0, "line"),
legend.title=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line.y = element_line(color="darkgrey", size = 1),
panel.background = element_blank()) +
ggtitle(str_wrap(paste0(current[[country]], ": ", "Vaccination of ", group_name,' compared to weekly ',paste(listindicators,collapse=', ')),50)) +
ylab(current$PercPopulation) +
scale_x_discrete(breaks = levels(vaccine_epi_data$year_week)[c(TRUE, rep(FALSE, 1))],
drop = FALSE)
}
return(impact_plot)}
plot_impact_vaccines(data,vaccine_data, 'Belgium', language, '1_Age60+',c('cases','deaths'))
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp()
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp()
runApp('~/GitHub/euro_covid_app/aggregate-app')
plot_impact_vaccines(data,vaccine_data, 'Bulgaria', 'English', 'ALL',c('deaths'))
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp()
runApp('~/GitHub/euro_covid_app/aggregate-app')
View(data)
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
rsconnect::showLogs()
rsconnect::showLogs('worldhealthorg')
rsconnect::showLogs(appName='euro-covid19-beta')
rsconnect::showLogs(appName='euro-covid19-beta',account='worldhealthorg')
View(vaccine_epi_data)
country
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
expression("">=80)
install.packages(plotmath)
install.packages('plotmath')
library(plotmath)
library('plotmath')
.d <- data.frame(a = letters[1:6], y = 1:6)
ggplot(.d, aes(x=a,y=y)) + geom_point() +
scale_x_discrete(labels = c(letters[1:5], "\u2265 80"))
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
devtools::install_github('rstudio/htmltools')
devtools::install_github('yihui/shiny@bugfix/961-unicode')
runApp('~/GitHub/euro_covid_app/aggregate-app')
library('961-unicode')
rsconnect::showLogs(appName='euro-covid19-beta',account='worldhealthorg')
runApp('~/GitHub/euro_covid_app/aggregate-app')
#Cleans everything (any previously datasets, functions created,..)
rm(list = ls())
PackagesToInstall_CRAN<-c('dplyr','rmarkdown','readxl','devtools','webshot')
for (i in PackagesToInstall_CRAN) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
PackagesToInstall_Custom<-c('GetEpiData','WHOCountryNames','SummaryTable')
for (i in PackagesToInstall_Custom) {
print(i)
if (!i %in% installed.packages())
{install_github(paste0('romanceline/Packages/',i))}
library(i, character.only = TRUE)
}
plain <- function(x,...) {
format(x, ..., scientific = FALSE, trim = TRUE,big.mark=" ")
}
folder<-paste0(dirname(rstudioapi::getActiveDocumentContext()$path),'/InOutDailyList')
pathExtract <- nchar(folder) - nchar("/HIM/DailyList/InOutDailyList")
folder <- substr(folder,1,pathExtract)
runningdataset<-read.csv(paste0(folder,'/qry_COVID_cases_by_date_final.CSV'))
ListSheets<-excel_sheets(paste0(folder,'/VOC Monitoring.xlsx'))
variantdataset<-read_excel(paste0(folder,'/VOC Monitoring.xlsx'), sheet = 'Summary table')[c(3:64),c(1,4,8,12)]
colnames(variantdataset)<-c('ADM0NAME','UK_Cases','SA_Cases','Br_Cases')
variantdataset<-variantdataset %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
mutate(UK_Cases=as.numeric(UK_Cases)) %>%
mutate(SA_Cases=as.numeric(SA_Cases)) %>%
mutate(Br_Cases=as.numeric(Br_Cases))
folder<-paste0(dirname(rstudioapi::getActiveDocumentContext()$path),'/InOutDailyList')
folder
pathExtract <- nchar(folder) - nchar("/HIM/DailyList/InOutDailyList")
folder <- substr(folder,1,pathExtract)
runningdataset<-read.csv(paste0(folder,'/qry_COVID_cases_by_date_final.CSV'))
ListSheets<-excel_sheets(paste0(folder,'/VOC Monitoring.xlsx'))
variantdataset<-read_excel(paste0(folder,'/VOC Monitoring.xlsx'), sheet = 'Summary table')[c(3:64),c(1,4,8,12)]
colnames(variantdataset)<-c('ADM0NAME','UK_Cases','SA_Cases','Br_Cases')
variantdataset<-variantdataset %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
mutate(UK_Cases=as.numeric(UK_Cases)) %>%
mutate(SA_Cases=as.numeric(SA_Cases)) %>%
mutate(Br_Cases=as.numeric(Br_Cases))
View(variantdataset)
ListSheets<-excel_sheets(paste0(folder,'/VOC Monitoring.xlsx'))
variantdataset<-read_excel(paste0(folder,'/VOC Monitoring.xlsx'), sheet = 'Summary table')[c(3:64),c(1,4,8,12)]
colnames(variantdataset)<-c('ADM0NAME','UK_Cases','SA_Cases','Br_Cases')
variantdataset<-variantdataset %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
mutate(UK_Cases=as.numeric(UK_Cases)) %>%
mutate(SA_Cases=as.numeric(SA_Cases)) %>%
mutate(Br_Cases=as.numeric(Br_Cases))
View(variantdataset)
nbCountries_VariantUK<-nrow(variantdataset %>% filter(UK_Cases!=0))
nbCountries_VariantUK
variantdataset<-variantdataset %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
mutate(UK_Cases=as.numeric(UK_Cases)) %>%
mutate(SA_Cases=as.numeric(SA_Cases)) %>%
mutate(Br_Cases=as.numeric(Br_Cases))
View(variantdataset)
variantdataset<-read_excel(paste0(folder,'/VOC Monitoring.xlsx'), sheet = 'Summary table')[c(3:64),c(1,4,8,12)]
variantdataset<-read_excel(paste0(folder,'/VOC Monitoring.xlsx'), sheet = 'Summary table')[c(3:64),c(1,4,8,12)]
View(variantdataset)
variantdataset<-read_excel(paste0(folder,'/VOC Monitoring.xlsx'), sheet = 'Summary table')[c(3:64),c(1,3,4,7,8,11,12)]
colnames(variantdataset)<-c('ADM0NAME','UK_Date','UK_Cases','SA_Date','SA_Cases','Br_Date','Br_Cases')
View(variantdataset)
variantdataset<-variantdataset %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
mutate(UK_Cases=as.numeric(UK_Cases)) %>%
mutate(SA_Cases=as.numeric(SA_Cases)) %>%
mutate(Br_Cases=as.numeric(Br_Cases))
View(variantdataset)
nbCountries_VariantUK<-nrow(variantdataset %>% filter(UK_Date!=0))
nbCountries_VariantUK
TotalCases_VariantSA<-sum(variantdataset$SA_Cases) %>% plain()
nbCountries_VariantSA<-nrow(variantdataset %>% filter(SA_Date!=0))
TotalCases_VariantBr<-sum(variantdataset$Br_Cases) %>% plain()
nbCountries_VariantBr<-nrow(variantdataset %>% filter(Br_Date!=0))
#Cleans everything (any previously datasets, functions created,..)
rm(list = ls())
PackagesToInstall_CRAN<-c('dplyr','rmarkdown','readxl','devtools','webshot')
for (i in PackagesToInstall_CRAN) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
PackagesToInstall_Custom<-c('GetEpiData','WHOCountryNames','SummaryTable')
for (i in PackagesToInstall_Custom) {
print(i)
if (!i %in% installed.packages())
{install_github(paste0('romanceline/Packages/',i))}
library(i, character.only = TRUE)
}
plain <- function(x,...) {
format(x, ..., scientific = FALSE, trim = TRUE,big.mark=" ")
}
folder<-paste0(dirname(rstudioapi::getActiveDocumentContext()$path),'/InOutDailyList')
pathExtract <- nchar(folder) - nchar("/HIM/DailyList/InOutDailyList")
folder <- substr(folder,1,pathExtract)
runningdataset<-read.csv(paste0(folder,'/qry_COVID_cases_by_date_final.CSV'))
ListSheets<-excel_sheets(paste0(folder,'/VOC Monitoring.xlsx'))
variantdataset<-read_excel(paste0(folder,'/VOC Monitoring.xlsx'), sheet = 'Summary table')[c(3:64),c(1,3,4,7,8,11,12)]
colnames(variantdataset)<-c('ADM0NAME','UK_Date','UK_Cases','SA_Date','SA_Cases','Br_Date','Br_Cases')
variantdataset<-variantdataset %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
mutate(UK_Cases=as.numeric(UK_Cases)) %>%
mutate(SA_Cases=as.numeric(SA_Cases)) %>%
mutate(Br_Cases=as.numeric(Br_Cases))
TotalCases_VariantUK<-sum(variantdataset$UK_Cases) %>% plain()
nbCountries_VariantUK<-nrow(variantdataset %>% filter(UK_Date!=0))
TotalCases_VariantSA<-sum(variantdataset$SA_Cases) %>% plain()
nbCountries_VariantSA<-nrow(variantdataset %>% filter(SA_Date!=0))
TotalCases_VariantBr<-sum(variantdataset$Br_Cases) %>% plain()
nbCountries_VariantBr<-nrow(variantdataset %>% filter(Br_Date!=0))
Table2<-read_excel(paste0(folder,'/EpiDataCOVID19_MASTER.xlsm'), sheet = 'Table2')[c(3:64),c(1:2)]
colnames(Table2)<-make.names(Table2[c(1),])
Table2<-Table2[c(2:62),]  %>% mutate(Last.Reported=as.numeric(Last.Reported)) %>%
mutate(Last.Reported=as.Date(Last.Reported,origin='1899-12-30'))
LastDate <- max(Table2$Last.Reported) #SHould also be TODAY
NbCountriesReporting<-nrow(Table2 %>% filter(Last.Reported==LastDate))
EuroDataset<-GetEpiData() %>% mutate(ADM0NAME=str_to_title(ADM0NAME))
CurrentDate<-max(EuroDataset$DateReport)
CurrentDate_<-format(CurrentDate,"%Y-%m-%d")
DateFull<-format(CurrentDate,'%d %B %Y')
EuroDataset_Today<-EuroDataset %>% filter(DateReport==CurrentDate)
HQDataset<-read.csv('https://covid19.who.int/WHO-COVID-19-global-data.csv',fileEncoding="UTF-8-BOM")
HQDataset_LatestDate<-data.frame()
for (ctr in unique(HQDataset$Country)){
#print(ctr)
HQDataset_ctr<-HQDataset %>% filter(Country==ctr)
maxDate<-max(HQDataset_ctr$Date_reported)
HQData_ctr<-HQDataset_ctr %>% filter(Date_reported==maxDate)
HQDataset_LatestDate<-bind_rows(HQData_ctr,HQDataset_LatestDate)
}
TotalCasesToday_EU<-plain(sum(EuroDataset_Today$NewCases))
TotalDeathsToday_EU<-plain(sum(EuroDataset_Today$NewDeaths))
NbCountriesCasesToday_EU<-nrow(EuroDataset_Today %>% filter(NewCases!=0))
CountriesMore5000Cases_EU<-EuroDataset_Today %>% filter(NewCases>=5000) %>%
arrange(desc(NewCases)) %>% mutate(NewCases=plain(NewCases))
NbCountriesMore5000Cases_EU<-nrow(CountriesMore5000Cases_EU)
ListCountriesOver5000Cases<-function(){
txt<-as.character()
for (i in seq(1,NbCountriesMore5000Cases_EU-1,1)){
txt_<-paste0(CountriesMore5000Cases_EU$ADM0NAME[i],' (',CountriesMore5000Cases_EU$NewCases[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesMore5000Cases_EU$ADM0NAME[NbCountriesMore5000Cases_EU],' (',CountriesMore5000Cases_EU$NewCases[NbCountriesMore5000Cases_EU],')')
return(txt)
}
CountriesMore100Deaths_EU<-EuroDataset_Today %>% filter(NewDeaths>=100) %>% arrange(desc(NewDeaths)) %>%
mutate(NewDeaths=plain(NewDeaths))
NbCountriesMore100Deaths_EU<-nrow(CountriesMore100Deaths_EU)
ListCountriesOver100Deaths<-function(){
txt<-as.character()
for (i in seq(1,NbCountriesMore100Deaths_EU-1,1)){
txt_<-paste0(CountriesMore100Deaths_EU$ADM0NAME[i],' (',CountriesMore100Deaths_EU$NewDeaths[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesMore100Deaths_EU$ADM0NAME[NbCountriesMore100Deaths_EU],' (',CountriesMore100Deaths_EU$NewDeaths[NbCountriesMore100Deaths_EU],')')
return(txt)
}
SummTable_EU<-SummaryTable(runningdataset)
Top10Countries_7DaysIncidence_EU<-SummTable_EU %>%
filter(UNPOP2019>=100000) %>%
arrange(desc(SvnDaysIncidence_Latest)) %>%
mutate(SvnDaysIncidence_Latest=round(SvnDaysIncidence_Latest,0))
TopCountries_CumCases_EU<-SummTable_EU %>%
arrange(desc(TotalCases)) %>%
mutate(TotalCases=plain(TotalCases))
Top10Countries_CumIncidence_EU<-SummTable_EU %>%
filter(UNPOP2019>=100000) %>%
arrange(desc(CumulativeIncidence)) %>%
mutate(CumulativeIncidence=plain(round(CumulativeIncidence,0)))
TotalCases_EU<-plain(sum(SummTable_EU$TotalCases))
TotalCases_HQ<-plain(sum(HQDataset_LatestDate$Cumulative_cases))
Share_EU_Cases<-round(sum(SummTable_EU$TotalCases)/sum(HQDataset_LatestDate$Cumulative_cases)*100,0)
TotalDeaths_EU<-plain(sum(SummTable_EU$TotalDeaths))
TotalDeaths_HQ<-plain(sum(HQDataset_LatestDate$Cumulative_deaths))
Share_EU_Deaths<-round(sum(SummTable_EU$TotalDeaths)/sum(HQDataset_LatestDate$Cumulative_deaths)*100,0)
Top3_CumCases_HQ<-HQDataset_LatestDate %>%
arrange(desc(Cumulative_cases)) %>%
top_n(3,Cumulative_cases) %>%
mutate(Cumulative_cases=plain(Cumulative_cases))
CountriesOver30000Deaths_EU<-SummTable_EU %>%
filter(TotalDeaths>=30000) %>% arrange(desc(TotalDeaths)) %>%
mutate(TotalDeaths=plain(TotalDeaths))
Nb_CountriesOver30000Deaths_EU<-nrow(CountriesOver30000Deaths_EU)
ListCountriesOver30000Deaths<-function(){
txt<-as.character()
for (i in seq(1,Nb_CountriesOver30000Deaths_EU-1,1)){
txt_<-paste0(CountriesOver30000Deaths_EU$ADM0NAME[i],' (',CountriesOver30000Deaths_EU$TotalDeaths[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesOver30000Deaths_EU$ADM0NAME[Nb_CountriesOver30000Deaths_EU],' (',CountriesOver30000Deaths_EU$TotalDeaths[Nb_CountriesOver30000Deaths_EU],')')
return(txt)
}
render(paste0(folder,"/HIM/DailyList/DailyList.Rmd"),output_file=paste0(folder,'/DailyList_',CurrentDate),word_document(reference_doc= "Template.docx"))
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp()
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp('~/GitHub/euro_covid_app/aggregate-app')
runApp()
runApp('~/GitHub/euro_covid_app/aggregate-app')
setwd('C:/Users/romanc/Documents/GitHub/Packages/SummaryTable')
use_package('GetPopulation',type='Depends')
document()
install_github('romanceline/Packages/SummaryTable')
