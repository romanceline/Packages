ExistingKeyDates_Gatherings<-read_excel(paste0(folderCleanData,"/KeyDates.xlsx"),sheet='Gatherings') %>% mutate(Date=as.Date(Date),ADM0NAME=as.character(ADM0NAME))
StringencyCountryKeyDates<-function(ctr,Measure){
Dataset<-StringencyIndex %>% filter(ADM0NAME==ctr)
if (Measure=='All'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=GlobalIndex)
}
if (Measure=='Schools'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=School)
}
if (Measure=='Masks'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=Masks)
}
if (Measure=='Businesses'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=Workplace)
}
if (Measure=='Borders'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=Travels)
}
if (Measure=='Movements'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=StayHome)
}
if (Measure=='Gatherings'){
Dataset<-Dataset %>% select(Date,ADM0NAME,Index=Gatherings)
}
Dataset<-Dataset %>% mutate(Change=if_else(lag(Index,1)==Index,'No','Yes'))
return(Dataset)
}
Dataset_Schools_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Schools<-StringencyCountryKeyDates(ctr,'Schools')
Dataset_Schools_<-rbind(Dataset_Schools,Dataset_Schools_)
}
Dataset_Masks_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Masks<-StringencyCountryKeyDates(ctr,'Masks')
Dataset_Masks_<-rbind(Dataset_Masks,Dataset_Masks_)
}
Dataset_Businesses_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Businesses<-StringencyCountryKeyDates(ctr,'Businesses')
Dataset_Businesses_<-rbind(Dataset_Businesses,Dataset_Businesses_)
}
Dataset_Gatherings_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Gatherings<-StringencyCountryKeyDates(ctr,'Gatherings')
Dataset_Gatherings_<-rbind(Dataset_Gatherings,Dataset_Gatherings_)
}
Dataset_Borders_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Borders<-StringencyCountryKeyDates(ctr,'Borders')
Dataset_Borders_<-rbind(Dataset_Borders,Dataset_Borders_)
}
Dataset_All_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_All<-StringencyCountryKeyDates(ctr,'All')
Dataset_All_<-rbind(Dataset_All,Dataset_All_)
}
Dataset_Movements_<-data.frame()
for (ctr in unique(StringencyIndex$ADM0NAME)){
Dataset_Movements<-StringencyCountryKeyDates(ctr,'Movements')
Dataset_Movements_<-rbind(Dataset_Movements,Dataset_Movements_)
}
Dataset_Movements_ <- Dataset_Movements_ %>% mutate(Date=as.Date(Date))
Dataset_All_ <- Dataset_All_ %>% mutate(Date=as.Date(Date))
Dataset_Businesses_ <- Dataset_Businesses_ %>% mutate(Date=as.Date(Date))
Dataset_Borders_ <- Dataset_Borders_ %>% mutate(Date=as.Date(Date))
Dataset_Movements_ <- Dataset_Movements_ %>% mutate(Date=as.Date(Date))
Dataset_Gatherings_ <- Dataset_Gatherings_ %>% mutate(Date=as.Date(Date))
Dataset_Schools_ <- Dataset_Schools_ %>% mutate(Date=as.Date(Date))
Dataset_Masks_ <- Dataset_Masks_ %>% mutate(Date=as.Date(Date))
Dataset_Movements<-Dataset_Movements_ %>%
left_join(ExistingKeyDates_Movements %>% select(Date,ADM0NAME,Narrative_Movements),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Schools<-Dataset_Schools_ %>%
left_join(ExistingKeyDates_Schools %>% select(Date,ADM0NAME,Narrative_Schools),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Masks<-Dataset_Masks_ %>%
left_join(ExistingKeyDates_Masks %>% select(Date,ADM0NAME,Narrative_Masks),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_All<-Dataset_All_ %>%
left_join(ExistingKeyDates_PHSM %>% select(Date,ADM0NAME,Narrative_All),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Borders<-Dataset_Borders_ %>%
left_join(ExistingKeyDates_Borders %>% select(Date,ADM0NAME,Narrative_Borders),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Businesses<-Dataset_Businesses_ %>%
left_join(ExistingKeyDates_Businesses %>% select(Date,ADM0NAME,Narrative_Businesses),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
Dataset_Gatherings<-Dataset_Gatherings_ %>%
left_join(ExistingKeyDates_Gatherings %>% select(Date,ADM0NAME,Narrative_Gatherings),by=c('Date','ADM0NAME')) %>%
filter(Change=='Yes') %>% select(-Change)
list_of_datasets <- list("Severity Index"=Dataset_All,
"Masks"=Dataset_Masks,
"Schools"=Dataset_Schools,
"Businesses"=Dataset_Businesses,
"Gatherings"=Dataset_Gatherings,
"Movements"=Dataset_Movements,
"Borders"=Dataset_Borders)
write.xlsx(list_of_datasets, file = paste0(folder_,"/KeyDatesUpdated.xlsx"))
PackagesToInstall<-c('imputeTS','zoo',"hablar","ggsci",'BBmisc',"stringr","magick","gridExtra","lubridate","readxl","RColorBrewer","ggplot2","dplyr","rmarkdown","kableExtra","flextable","ggpubr","knitr","scales","tidyr","scales","xml2","rvest","qdapRegex",'cowplot')
for (i in PackagesToInstall) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
folder_<-dirname(rstudioapi::getSourceEditorContext()$path)
folderRawData<-paste0(folder_,'/rawdata_to_update')
folderCleanData<-paste0(folder_,'/cleandata_to_update')
folderApp_Single<-paste0(dirname(folder_),'/app_single')
folderApp_Multiple<-paste0(dirname(folder_),'/app_multiple')
StringencyIndex<-read.csv(paste0(folderCleanData,'/StringencyIndex.csv'))
StringencyIndex<-StringencyIndex %>% rename(Schools=School,Businesses=Workplace,Movements=StayHome,Borders=Travels) %>%
mutate(Date=as.Date(Date)) %>% mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME)) %>%
arrange(ADM0NAME)
KeyDates_SeverityIndex<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Severity Index') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_All) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Schools<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Schools') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Schools) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Masks<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Masks') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Masks) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Businesses<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Businesses') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Businesses) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Movements<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Movements') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Movements)
KeyDates_Borders<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Borders') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Borders) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Gatherings<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Gatherings') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy"))))%>%
select(Date,ADM0NAME,Narrative_Gatherings) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
MainDataset<-read.csv(paste0(folderCleanData,"/qry_covid_running_cases_country_date.CSV")) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME),
DateReport1=as.Date(parse_date_time(DateReport1,c("dmy", "ymd","mdy")))) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Kosovo','Kosovo(1)',ADM0NAME))
MainDataset<-MainDataset %>%
merge(StringencyIndex,by.x=c('DateReport1','ADM0NAME'),by.y=c('Date','ADM0NAME'),all=TRUE) %>%
filter(!is.na(DateReport1)) %>%
filter(ADM0NAME %in% unique(StringencyIndex$ADM0NAME)) %>%
mutate(NewCases = if_else(is.na(NewCases),0,NewCases),
NewDeaths = if_else(is.na(NewDeaths),0,NewDeaths),
TotalCases = if_else(is.na(TotalCases),0,TotalCases),
TotalDeaths = if_else(is.na(TotalDeaths),0,TotalDeaths)) %>%
#left_join(StringencyIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_SeverityIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Masks,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Schools,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Businesses,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Borders,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Gatherings,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Movements,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date"))
RelativeDays<-function(ctr){
DatasetCountry<-MainDataset %>% filter(ADM0NAME==ctr)
minDateAll<-min((DatasetCountry %>% filter(!is.na(Narrative_All)))$DateReport1)
minDateSchools<-min((DatasetCountry %>% filter(!is.na(Narrative_Schools)))$DateReport1)
minDateMasks<-min((DatasetCountry %>% filter(!is.na(Narrative_Masks)))$DateReport1)
minDateGatherings<-min((DatasetCountry %>% filter(!is.na(Narrative_Gatherings)))$DateReport1)
minDateBusinesses<-min((DatasetCountry %>% filter(!is.na(Narrative_Businesses)))$DateReport1)
minDateBorders<-min((DatasetCountry %>% filter(!is.na(Narrative_Borders)))$DateReport1)
minDateMovements<-min((DatasetCountry %>% filter(!is.na(Narrative_Movements)))$DateReport1)
DatasetCountry<-DatasetCountry %>% mutate(Days_All=DateReport1-minDateAll) %>%
mutate(Days_Schools=as.numeric(DateReport1-minDateSchools)) %>%
mutate(Days_Masks=as.numeric(DateReport1-minDateMasks)) %>%
mutate(Days_Gatherings=as.numeric(DateReport1-minDateGatherings)) %>%
mutate(Days_Movements=as.numeric(DateReport1-minDateMovements)) %>%
mutate(Days_Borders=as.numeric(DateReport1-minDateBorders)) %>%
mutate(Days_Businesses=as.numeric(DateReport1-minDateBusinesses))
return(DatasetCountry)
}
BuildNewDataset<-function(ctr){
CountryDataset<-RelativeDays(ctr)
CountryDataset<-CountryDataset %>%
mutate(ThreeDaysAverage_Cases=(NewCases+lag(NewCases,1)+lead(NewCases,1))/3,
ThreeDaysAverage_Deaths=(NewDeaths+lag(NewDeaths,1)+lead(NewDeaths,1))/3)
CountryDataset_<-CountryDataset %>% select(-c("WHO_Code","TotalCases","TotalDeaths","epiWeek")) %>%
mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths))
return(CountryDataset_)
}
DatasetToSmooth<-function(ctr){
CountryDataset<-BuildNewDataset(ctr)
CountryDataset<-CountryDataset %>% mutate(log_cases=log10(NewCases),log_deaths=log10(NewDeaths))
return(CountryDataset)}
DatasetWithSplineValues<-function(ctr){
CountryDataset<-DatasetToSmooth(ctr)
CountryDataset_Cases<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Cases)) %>% select(DateReport1,ThreeDaysAverage_Cases)
CountryDataset_Deaths<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Deaths)) %>% select(DateReport1,ThreeDaysAverage_Deaths)
CountryDataset_logCases<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Cases)) %>%
select(DateReport1,log10_MovingAverage_Cases) %>% filter(log10_MovingAverage_Cases!=-Inf)
CountryDataset_logDeaths<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Deaths)) %>%
select(DateReport1,log10_MovingAverage_Deaths) %>% filter(log10_MovingAverage_Deaths!=-Inf)
Spline_3DaysAverageCases<-smooth.spline(x=CountryDataset_Cases$DateReport1,y=CountryDataset_Cases$ThreeDaysAverage_Cases,spar=0.5)
Spline_3DaysAverageDeaths<-smooth.spline(x=CountryDataset_Deaths$DateReport1,y=CountryDataset_Deaths$ThreeDaysAverage_Deaths,spar=0.5)
Spline_3DaysAverage_LogCases<-smooth.spline(x=CountryDataset_logCases$DateReport1,y=CountryDataset_logCases$log10_MovingAverage_Cases,spar=0.5)
Spline_3DaysAverage_LogDeaths<-smooth.spline(x=CountryDataset_logDeaths$DateReport1,y=CountryDataset_logDeaths$log10_MovingAverage_Deaths,spar=0.5)
ValuesSpline_3DaysAverageCases<-data.frame(SplineValue_3DaysAverageCases=predict(Spline_3DaysAverageCases,deriv=0))
ValuesSpline_3DaysAverageDeaths<-data.frame(SplineValue_3DaysAverageDeaths=predict(Spline_3DaysAverageDeaths,deriv=0))
ValuesSpline_3DaysAverage_LogCases<-data.frame(SplineValue_3DaysAverage_LogCases=predict(Spline_3DaysAverage_LogCases,deriv=0))
ValuesSpline_3DaysAverage_LogDeaths<-data.frame(SplineValue_3DaysAverage_LogDeaths=predict(Spline_3DaysAverage_LogDeaths,deriv=0))
CountryDataset_Cases<-data.frame(CountryDataset_Cases,ValuesSpline_3DaysAverageCases) %>%
select(DateReport1,"Spline_3DaysAverageCases"="SplineValue_3DaysAverageCases.y")
CountryDataset_Deaths<-data.frame(CountryDataset_Deaths,ValuesSpline_3DaysAverageDeaths) %>%
select(DateReport1,"Spline_3DaysAverageDeaths"="SplineValue_3DaysAverageDeaths.y")
CountryDataset_logCases<-data.frame(CountryDataset_logCases,ValuesSpline_3DaysAverage_LogCases) %>%
select(DateReport1,"Spline_3DaysAverage_logCases"="SplineValue_3DaysAverage_LogCases.y")
CountryDataset_logDeaths<-data.frame(CountryDataset_logDeaths,ValuesSpline_3DaysAverage_LogDeaths) %>%
select(DateReport1,"Spline_3DaysAverage_logDeaths"="SplineValue_3DaysAverage_LogDeaths.y")
CountryDataset_<-CountryDataset %>%
left_join(CountryDataset_Cases,by='DateReport1') %>%
left_join(CountryDataset_Deaths,by='DateReport1') %>%
left_join(CountryDataset_logCases,by='DateReport1') %>%
left_join(CountryDataset_logDeaths,by='DateReport1')
x <- zoo(CountryDataset_$Spline_3DaysAverage_logCases,CountryDataset_$DateReport1)
x <- na_interpolation(x, option = "linear") %>% fortify.zoo
y <- zoo(CountryDataset_$Spline_3DaysAverage_logDeaths,CountryDataset_$DateReport1)
y <- na_interpolation(y, option = "linear") %>% fortify.zoo
CountryDataset_<-CountryDataset_ %>% left_join(x,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logCases_='.')
CountryDataset_<-CountryDataset_ %>% left_join(y,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logDeaths_='.')
return(CountryDataset_)
}
CheckAtLeast4Values<-function(){
ListCountriesOkToSpline<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
CountryDataset<-MainDataset %>% filter(ADM0NAME==ctr)
CountryDataset<-CountryDataset %>% filter(NewDeaths!=0)
if ((nrow(CountryDataset)) > 3){
ListCountriesOkToSpline<-c(ctr,ListCountriesOkToSpline)}
}
return(ListCountriesOkToSpline)}
GlobalDataset_<-data.frame()
for (ctr in CheckAtLeast4Values()){
GlobalDataset<-DatasetWithSplineValues(ctr)
GlobalDataset_<-bind_rows(GlobalDataset_,GlobalDataset)
}
write.csv(GlobalDataset_,paste0(folderCleanData,'/GlobalDataset.csv'))
shiny::runApp('~/GitHub/Shiny_PHSM/app_single')
runApp('~/GitHub/Shiny_PHSM/app_single')
runApp('~/GitHub/Shiny_PHSM/app_multiple')
install_github('romanceline/Packages/SummaryTable')
library(devtools)
install_github('romanceline/Packages/SummaryTable')
#Cleans everything (any previously datasets, functions created,..)
rm(list = ls())
PackagesToInstall_CRAN<-c('dplyr','rmarkdown','readxl','devtools','webshot')
for (i in PackagesToInstall_CRAN) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
PackagesToInstall_Custom<-c('GetEpiData','WHOCountryNames','GetPopulation','SummaryTable',)
for (i in PackagesToInstall_Custom) {
print(i)
if (!i %in% installed.packages())
{install_github(paste0('romanceline/Packages/',i))}
library(i, character.only = TRUE)
}
plain <- function(x,...) {
format(x, ..., scientific = FALSE, trim = TRUE,big.mark=" ")
}
folder<-paste0(dirname(rstudioapi::getActiveDocumentContext()$path),'/InOutDailyList')
pathExtract <- nchar(folder) - nchar("/HIM/DailyList/InOutDailyList")
folder <- substr(folder,1,pathExtract)
runningdataset<-read.csv(paste0(folder,'/qry_COVID_cases_by_date_final.CSV'))
ListSheets<-excel_sheets(paste0(folder,'/VOC Monitoring.xlsx'))
variantdataset<-read_excel(paste0(folder,'/VOC Monitoring.xlsx'), sheet = 'Summary table')[c(3:64),c(1,3,4,7,8,11,12)]
colnames(variantdataset)<-c('ADM0NAME','UK_Date','UK_Cases','SA_Date','SA_Cases','Br_Date','Br_Cases')
variantdataset<-variantdataset %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
mutate(UK_Cases=as.numeric(UK_Cases)) %>%
mutate(SA_Cases=as.numeric(SA_Cases)) %>%
mutate(Br_Cases=as.numeric(Br_Cases))
TotalCases_VariantUK<-sum(variantdataset$UK_Cases) %>% plain()
nbCountries_VariantUK<-nrow(variantdataset %>% filter(UK_Date!=0))
TotalCases_VariantSA<-sum(variantdataset$SA_Cases) %>% plain()
nbCountries_VariantSA<-nrow(variantdataset %>% filter(SA_Date!=0))
TotalCases_VariantBr<-sum(variantdataset$Br_Cases) %>% plain()
nbCountries_VariantBr<-nrow(variantdataset %>% filter(Br_Date!=0))
Table2<-read_excel(paste0(folder,'/EpiDataCOVID19_MASTER.xlsm'), sheet = 'Table2')[c(3:64),c(1:2)]
colnames(Table2)<-make.names(Table2[c(1),])
Table2<-Table2[c(2:62),]  %>% mutate(Last.Reported=as.numeric(Last.Reported)) %>%
mutate(Last.Reported=as.Date(Last.Reported,origin='1899-12-30'))
LastDate <- max(Table2$Last.Reported) #SHould also be TODAY
NbCountriesReporting<-nrow(Table2 %>% filter(Last.Reported==LastDate))
EuroDataset<-GetEpiData() %>% mutate(ADM0NAME=str_to_title(ADM0NAME))
CurrentDate<-max(EuroDataset$DateReport)
CurrentDate_<-format(CurrentDate,"%Y-%m-%d")
DateFull<-format(CurrentDate,'%d %B %Y')
EuroDataset_Today<-EuroDataset %>% filter(DateReport==CurrentDate)
HQDataset<-read.csv('https://covid19.who.int/WHO-COVID-19-global-data.csv',fileEncoding="UTF-8-BOM")
HQDataset_LatestDate<-data.frame()
for (ctr in unique(HQDataset$Country)){
#print(ctr)
HQDataset_ctr<-HQDataset %>% filter(Country==ctr)
maxDate<-max(HQDataset_ctr$Date_reported)
HQData_ctr<-HQDataset_ctr %>% filter(Date_reported==maxDate)
HQDataset_LatestDate<-bind_rows(HQData_ctr,HQDataset_LatestDate)
}
TotalCasesToday_EU<-plain(sum(EuroDataset_Today$NewCases))
TotalDeathsToday_EU<-plain(sum(EuroDataset_Today$NewDeaths))
NbCountriesCasesToday_EU<-nrow(EuroDataset_Today %>% filter(NewCases!=0))
CountriesMore5000Cases_EU<-EuroDataset_Today %>% filter(NewCases>=5000) %>%
arrange(desc(NewCases)) %>% mutate(NewCases=plain(NewCases))
NbCountriesMore5000Cases_EU<-nrow(CountriesMore5000Cases_EU)
ListCountriesOver5000Cases<-function(){
txt<-as.character()
for (i in seq(1,NbCountriesMore5000Cases_EU-1,1)){
txt_<-paste0(CountriesMore5000Cases_EU$ADM0NAME[i],' (',CountriesMore5000Cases_EU$NewCases[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesMore5000Cases_EU$ADM0NAME[NbCountriesMore5000Cases_EU],' (',CountriesMore5000Cases_EU$NewCases[NbCountriesMore5000Cases_EU],')')
return(txt)
}
CountriesMore100Deaths_EU<-EuroDataset_Today %>% filter(NewDeaths>=100) %>% arrange(desc(NewDeaths)) %>%
mutate(NewDeaths=plain(NewDeaths))
NbCountriesMore100Deaths_EU<-nrow(CountriesMore100Deaths_EU)
ListCountriesOver100Deaths<-function(){
txt<-as.character()
for (i in seq(1,NbCountriesMore100Deaths_EU-1,1)){
txt_<-paste0(CountriesMore100Deaths_EU$ADM0NAME[i],' (',CountriesMore100Deaths_EU$NewDeaths[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesMore100Deaths_EU$ADM0NAME[NbCountriesMore100Deaths_EU],' (',CountriesMore100Deaths_EU$NewDeaths[NbCountriesMore100Deaths_EU],')')
return(txt)
}
SummTable_EU<-SummaryTable(runningdataset)
Top10Countries_7DaysIncidence_EU<-SummTable_EU %>%
filter(UNPOP2019>=100000) %>%
arrange(desc(SvnDaysIncidence_Latest)) %>%
mutate(SvnDaysIncidence_Latest=round(SvnDaysIncidence_Latest,0))
TopCountries_CumCases_EU<-SummTable_EU %>%
arrange(desc(TotalCases)) %>%
mutate(TotalCases=plain(TotalCases))
Top10Countries_CumIncidence_EU<-SummTable_EU %>%
filter(UNPOP2019>=100000) %>%
arrange(desc(CumulativeIncidence)) %>%
mutate(CumulativeIncidence=plain(round(CumulativeIncidence,0)))
TotalCases_EU<-plain(sum(SummTable_EU$TotalCases))
TotalCases_HQ<-plain(sum(HQDataset_LatestDate$Cumulative_cases))
Share_EU_Cases<-round(sum(SummTable_EU$TotalCases)/sum(HQDataset_LatestDate$Cumulative_cases)*100,0)
TotalDeaths_EU<-plain(sum(SummTable_EU$TotalDeaths))
TotalDeaths_HQ<-plain(sum(HQDataset_LatestDate$Cumulative_deaths))
Share_EU_Deaths<-round(sum(SummTable_EU$TotalDeaths)/sum(HQDataset_LatestDate$Cumulative_deaths)*100,0)
Top3_CumCases_HQ<-HQDataset_LatestDate %>%
arrange(desc(Cumulative_cases)) %>%
top_n(3,Cumulative_cases) %>%
mutate(Cumulative_cases=plain(Cumulative_cases))
CountriesOver30000Deaths_EU<-SummTable_EU %>%
filter(TotalDeaths>=30000) %>% arrange(desc(TotalDeaths)) %>%
mutate(TotalDeaths=plain(TotalDeaths))
Nb_CountriesOver30000Deaths_EU<-nrow(CountriesOver30000Deaths_EU)
ListCountriesOver30000Deaths<-function(){
txt<-as.character()
for (i in seq(1,Nb_CountriesOver30000Deaths_EU-1,1)){
txt_<-paste0(CountriesOver30000Deaths_EU$ADM0NAME[i],' (',CountriesOver30000Deaths_EU$TotalDeaths[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesOver30000Deaths_EU$ADM0NAME[Nb_CountriesOver30000Deaths_EU],' (',CountriesOver30000Deaths_EU$TotalDeaths[Nb_CountriesOver30000Deaths_EU],')')
return(txt)
}
render(paste0(folder,"/HIM/DailyList/DailyList.Rmd"),output_file=paste0(folder,'/DailyList_',CurrentDate),word_document(reference_doc= "Template.docx"))
CurrentDate<-max(EuroDataset$DateReport)
EuroDataset<-GetEpiData() %>% mutate(ADM0NAME=str_to_title(ADM0NAME))
PackagesToInstall_Custom<-c('GetEpiData','WHOCountryNames','GetPopulation','SummaryTable',)
for (i in PackagesToInstall_Custom) {
print(i)
if (!i %in% installed.packages())
{install_github(paste0('romanceline/Packages/',i))}
library(i, character.only = TRUE)
}
PackagesToInstall_Custom<-c('GetEpiData','WHOCountryNames','GetPopulation','SummaryTable')
for (i in PackagesToInstall_Custom) {
print(i)
if (!i %in% installed.packages())
{install_github(paste0('romanceline/Packages/',i))}
library(i, character.only = TRUE)
}
plain <- function(x,...) {
format(x, ..., scientific = FALSE, trim = TRUE,big.mark=" ")
}
folder<-paste0(dirname(rstudioapi::getActiveDocumentContext()$path),'/InOutDailyList')
pathExtract <- nchar(folder) - nchar("/HIM/DailyList/InOutDailyList")
folder <- substr(folder,1,pathExtract)
runningdataset<-read.csv(paste0(folder,'/qry_COVID_cases_by_date_final.CSV'))
ListSheets<-excel_sheets(paste0(folder,'/VOC Monitoring.xlsx'))
variantdataset<-read_excel(paste0(folder,'/VOC Monitoring.xlsx'), sheet = 'Summary table')[c(3:64),c(1,3,4,7,8,11,12)]
colnames(variantdataset)<-c('ADM0NAME','UK_Date','UK_Cases','SA_Date','SA_Cases','Br_Date','Br_Cases')
variantdataset<-variantdataset %>% mutate(ADM0NAME=str_to_title(ADM0NAME)) %>%
mutate(UK_Cases=as.numeric(UK_Cases)) %>%
mutate(SA_Cases=as.numeric(SA_Cases)) %>%
mutate(Br_Cases=as.numeric(Br_Cases))
TotalCases_VariantUK<-sum(variantdataset$UK_Cases) %>% plain()
nbCountries_VariantUK<-nrow(variantdataset %>% filter(UK_Date!=0))
TotalCases_VariantSA<-sum(variantdataset$SA_Cases) %>% plain()
nbCountries_VariantSA<-nrow(variantdataset %>% filter(SA_Date!=0))
TotalCases_VariantBr<-sum(variantdataset$Br_Cases) %>% plain()
nbCountries_VariantBr<-nrow(variantdataset %>% filter(Br_Date!=0))
Table2<-read_excel(paste0(folder,'/EpiDataCOVID19_MASTER.xlsm'), sheet = 'Table2')[c(3:64),c(1:2)]
colnames(Table2)<-make.names(Table2[c(1),])
Table2<-Table2[c(2:62),]  %>% mutate(Last.Reported=as.numeric(Last.Reported)) %>%
mutate(Last.Reported=as.Date(Last.Reported,origin='1899-12-30'))
LastDate <- max(Table2$Last.Reported) #SHould also be TODAY
NbCountriesReporting<-nrow(Table2 %>% filter(Last.Reported==LastDate))
EuroDataset<-GetEpiData() %>% mutate(ADM0NAME=str_to_title(ADM0NAME))
CurrentDate<-max(EuroDataset$DateReport)
CurrentDate_<-format(CurrentDate,"%Y-%m-%d")
DateFull<-format(CurrentDate,'%d %B %Y')
EuroDataset_Today<-EuroDataset %>% filter(DateReport==CurrentDate)
HQDataset<-read.csv('https://covid19.who.int/WHO-COVID-19-global-data.csv',fileEncoding="UTF-8-BOM")
HQDataset_LatestDate<-data.frame()
for (ctr in unique(HQDataset$Country)){
#print(ctr)
HQDataset_ctr<-HQDataset %>% filter(Country==ctr)
maxDate<-max(HQDataset_ctr$Date_reported)
HQData_ctr<-HQDataset_ctr %>% filter(Date_reported==maxDate)
HQDataset_LatestDate<-bind_rows(HQData_ctr,HQDataset_LatestDate)
}
TotalCasesToday_EU<-plain(sum(EuroDataset_Today$NewCases))
TotalDeathsToday_EU<-plain(sum(EuroDataset_Today$NewDeaths))
NbCountriesCasesToday_EU<-nrow(EuroDataset_Today %>% filter(NewCases!=0))
CountriesMore5000Cases_EU<-EuroDataset_Today %>% filter(NewCases>=5000) %>%
arrange(desc(NewCases)) %>% mutate(NewCases=plain(NewCases))
NbCountriesMore5000Cases_EU<-nrow(CountriesMore5000Cases_EU)
ListCountriesOver5000Cases<-function(){
txt<-as.character()
for (i in seq(1,NbCountriesMore5000Cases_EU-1,1)){
txt_<-paste0(CountriesMore5000Cases_EU$ADM0NAME[i],' (',CountriesMore5000Cases_EU$NewCases[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesMore5000Cases_EU$ADM0NAME[NbCountriesMore5000Cases_EU],' (',CountriesMore5000Cases_EU$NewCases[NbCountriesMore5000Cases_EU],')')
return(txt)
}
CountriesMore100Deaths_EU<-EuroDataset_Today %>% filter(NewDeaths>=100) %>% arrange(desc(NewDeaths)) %>%
mutate(NewDeaths=plain(NewDeaths))
NbCountriesMore100Deaths_EU<-nrow(CountriesMore100Deaths_EU)
ListCountriesOver100Deaths<-function(){
txt<-as.character()
for (i in seq(1,NbCountriesMore100Deaths_EU-1,1)){
txt_<-paste0(CountriesMore100Deaths_EU$ADM0NAME[i],' (',CountriesMore100Deaths_EU$NewDeaths[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesMore100Deaths_EU$ADM0NAME[NbCountriesMore100Deaths_EU],' (',CountriesMore100Deaths_EU$NewDeaths[NbCountriesMore100Deaths_EU],')')
return(txt)
}
SummTable_EU<-SummaryTable(runningdataset)
Top10Countries_7DaysIncidence_EU<-SummTable_EU %>%
filter(UNPOP2019>=100000) %>%
arrange(desc(SvnDaysIncidence_Latest)) %>%
mutate(SvnDaysIncidence_Latest=round(SvnDaysIncidence_Latest,0))
TopCountries_CumCases_EU<-SummTable_EU %>%
arrange(desc(TotalCases)) %>%
mutate(TotalCases=plain(TotalCases))
Top10Countries_CumIncidence_EU<-SummTable_EU %>%
filter(UNPOP2019>=100000) %>%
arrange(desc(CumulativeIncidence)) %>%
mutate(CumulativeIncidence=plain(round(CumulativeIncidence,0)))
TotalCases_EU<-plain(sum(SummTable_EU$TotalCases))
TotalCases_HQ<-plain(sum(HQDataset_LatestDate$Cumulative_cases))
Share_EU_Cases<-round(sum(SummTable_EU$TotalCases)/sum(HQDataset_LatestDate$Cumulative_cases)*100,0)
TotalDeaths_EU<-plain(sum(SummTable_EU$TotalDeaths))
TotalDeaths_HQ<-plain(sum(HQDataset_LatestDate$Cumulative_deaths))
Share_EU_Deaths<-round(sum(SummTable_EU$TotalDeaths)/sum(HQDataset_LatestDate$Cumulative_deaths)*100,0)
Top3_CumCases_HQ<-HQDataset_LatestDate %>%
arrange(desc(Cumulative_cases)) %>%
top_n(3,Cumulative_cases) %>%
mutate(Cumulative_cases=plain(Cumulative_cases))
CountriesOver30000Deaths_EU<-SummTable_EU %>%
filter(TotalDeaths>=30000) %>% arrange(desc(TotalDeaths)) %>%
mutate(TotalDeaths=plain(TotalDeaths))
Nb_CountriesOver30000Deaths_EU<-nrow(CountriesOver30000Deaths_EU)
ListCountriesOver30000Deaths<-function(){
txt<-as.character()
for (i in seq(1,Nb_CountriesOver30000Deaths_EU-1,1)){
txt_<-paste0(CountriesOver30000Deaths_EU$ADM0NAME[i],' (',CountriesOver30000Deaths_EU$TotalDeaths[i],'), ')
txt<-paste0(txt,txt_)}
txt<-paste0(txt,' and ',CountriesOver30000Deaths_EU$ADM0NAME[Nb_CountriesOver30000Deaths_EU],' (',CountriesOver30000Deaths_EU$TotalDeaths[Nb_CountriesOver30000Deaths_EU],')')
return(txt)
}
render(paste0(folder,"/HIM/DailyList/DailyList.Rmd"),output_file=paste0(folder,'/DailyList_',CurrentDate),word_document(reference_doc= "Template.docx"))
Dataset_GlobalPopulation <- GetPopulation()
View(Dataset_GlobalPopulation)
getwd()
setwd('C:/Users/romanc/Documents/GitHub/Packages/SummaryTable)
setwd('C:/Users/romanc/Documents/GitHub/Packages/SummaryTable')
document()
rm(list = ls())
PackagesToInstall_CRAN<-c('dplyr','rmarkdown','readxl','devtools','webshot')
for (i in PackagesToInstall_CRAN) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
PackagesToInstall_Custom<-c('GetEpiData','WHOCountryNames','GetPopulation','SummaryTable')
for (i in PackagesToInstall_Custom) {
print(i)
if (!i %in% installed.packages())
{install_github(paste0('romanceline/Packages/',i))}
library(i, character.only = TRUE)
}
