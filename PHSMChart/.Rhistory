# y <- na_interpolation(y, option = "linear") %>% fortify.zoo
#
# z <- zoo(MainDataset_$Spline_3DaysAverage_logCases_Rate,MainDataset_$DateReport)
# z <- na_interpolation(z, option = "linear") %>% fortify.zoo
#
# a <- zoo(MainDataset_$Spline_3DaysAverage_logDeaths_Rate,MainDataset_$DateReport)
# a <- na_interpolation(a, option = "linear") %>% fortify.zoo
# MainDataset_<-MainDataset_ %>%
#   left_join(x,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logCases_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(y,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logDeaths_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(z,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logCases_Rate_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(a,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logDeaths_Rate_='.')
return(MainDataset_)
}
BuildExtendedEpiDataset('Belgium')
setwd('C:/Users/romanc/Documents/GitHub/Packages/BuildExtendedEpiDataset/')
library(devtools)
use_package('WHOCountryNames',type='Depends')
use_package('lubridate',type='Depends')
use_package('dplyr',type='Depends')
use_package('GetEpiData',type='Depends')
#' BuildExtendedEpiDataset
#' This function allows you to build an extended dataset of the standard epidataset (with log values, spline values, 3 days average,...)
#' @param Select the country to build the dataset for
#' @export
#' @examples
#' @BuildExtendedEpiDataset()
BuildExtendedEpiDataset<-function(country){
MainDataset<-WHOCountryNames(GetEpiData(),ADM0NAME) %>%
mutate(DateReport=as.Date(parse_date_time(DateReport,c("dmy", "ymd","mdy")))) %>%
filter(ADM0NAME==country)
WHO_ref<-WHOCountryNames(WHO_ref,ADM0NAME) %>% select(ADM0NAME,UNPOP2019)
MainDataset<-MainDataset %>% left_join(WHO_ref,by='ADM0NAME')
MainDataset<-MainDataset %>%
filter(!is.na(DateReport)) %>%
mutate(NewCases = replace_na(NewCases, 0),
NewDeaths = replace_na(NewDeaths, 0),
TotalCases = replace_na(TotalCases, 0),
TotalDeaths = replace_na(TotalDeaths, 0),
NewCases_Rate=NewCases/UNPOP2019*100000,
NewDeaths_Rate=NewDeaths/UNPOP2019*1000000)
MainDataset<-MainDataset %>%
mutate(ThreeDaysAverage_Cases=(NewCases+lag(NewCases,1)+lead(NewCases,1))/3,
ThreeDaysAverage_Deaths=(NewDeaths+lag(NewDeaths,1)+lead(NewDeaths,1))/3) %>%
mutate(ThreeDaysAverage_Cases_Rate=(NewCases_Rate+lag(NewCases_Rate,1)+lead(NewCases_Rate,1))/3,
ThreeDaysAverage_Deaths_Rate=(NewDeaths_Rate+lag(NewDeaths_Rate,1)+lead(NewDeaths_Rate,1))/3)
MainDataset<-MainDataset %>% select(-c("WHO_CODE","epiWeek"))
# %>% mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
#          log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths),
#          log10_MovingAverage_Cases_Rate=log10(ThreeDaysAverage_Cases_Rate),
#          log10_MovingAverage_Deaths_Rate=log10(ThreeDaysAverage_Deaths_Rate)) %>%
#   mutate(log_cases=log10(NewCases),log_deaths=log10(NewDeaths),
#          log_cases_rate=log10(NewCases_Rate),log_deaths_rate=log10(NewDeaths_Rate))
MainDataset_Cases<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Cases)) %>%
select(DateReport,ThreeDaysAverage_Cases)
MainDataset_Cases_Rate<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Cases_Rate)) %>%
select(DateReport,ThreeDaysAverage_Cases_Rate)
MainDataset_Deaths<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Deaths)) %>%
select(DateReport,ThreeDaysAverage_Deaths)
MainDataset_Deaths_Rate<-MainDataset %>%
filter(!is.na(ThreeDaysAverage_Deaths_Rate)) %>%
select(DateReport,ThreeDaysAverage_Deaths_Rate)
# MainDataset_logCases<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Cases)) %>%
#   select(DateReport,log10_MovingAverage_Cases) %>%
#   filter(log10_MovingAverage_Cases!=-Inf)
# MainDataset_logCases_Rate<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Cases_Rate)) %>%
#   select(DateReport,log10_MovingAverage_Cases_Rate) %>%
#   filter(log10_MovingAverage_Cases_Rate!=-Inf)
# MainDataset_logDeaths<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Deaths)) %>%
#   select(DateReport,log10_MovingAverage_Deaths) %>%
#   filter(log10_MovingAverage_Deaths!=-Inf)
# MainDataset_logDeaths_Rate<-MainDataset %>%
#   filter(!is.na(log10_MovingAverage_Deaths_Rate)) %>%
#   select(DateReport,log10_MovingAverage_Deaths_Rate) %>%
#   filter(log10_MovingAverage_Deaths_Rate!=-Inf)
Spline_3DaysAverageCases<-smooth.spline(x=MainDataset_Cases$DateReport,y=MainDataset_Cases$ThreeDaysAverage_Cases,spar=0.5)
Spline_3DaysAverageDeaths<-smooth.spline(x=MainDataset_Deaths$DateReport,y=MainDataset_Deaths$ThreeDaysAverage_Deaths,spar=0.5)
# Spline_3DaysAverage_LogCases<-smooth.spline(x=MainDataset_logCases$DateReport,y=MainDataset_logCases$log10_MovingAverage_Cases,spar=0.5)
# Spline_3DaysAverage_LogDeaths<-smooth.spline(x=MainDataset_logDeaths$DateReport,y=MainDataset_logDeaths$log10_MovingAverage_Deaths,spar=0.5)
Spline_3DaysAverageCases_Rate<-smooth.spline(x=MainDataset_Cases_Rate$DateReport,y=MainDataset_Cases_Rate$ThreeDaysAverage_Cases_Rate,spar=0.5)
Spline_3DaysAverageDeaths_Rate<-smooth.spline(x=MainDataset_Deaths_Rate$DateReport,y=MainDataset_Deaths_Rate$ThreeDaysAverage_Deaths_Rate,spar=0.5)
# Spline_3DaysAverage_LogCases_Rate<-smooth.spline(x=MainDataset_logCases_Rate$DateReport,y=MainDataset_logCases_Rate$log10_MovingAverage_Cases_Rate,spar=0.5)
# Spline_3DaysAverage_LogDeaths_Rate<-smooth.spline(x=MainDataset_logDeaths_Rate$DateReport,y=MainDataset_logDeaths_Rate$log10_MovingAverage_Deaths_Rate,spar=0.5)
ValuesSpline_3DaysAverageCases<-data.frame(SplineValue_3DaysAverageCases=predict(Spline_3DaysAverageCases,deriv=0))
ValuesSpline_3DaysAverageDeaths<-data.frame(SplineValue_3DaysAverageDeaths=predict(Spline_3DaysAverageDeaths,deriv=0))
# ValuesSpline_3DaysAverage_LogCases<-data.frame(SplineValue_3DaysAverage_LogCases=predict(Spline_3DaysAverage_LogCases,deriv=0))
# ValuesSpline_3DaysAverage_LogDeaths<-data.frame(SplineValue_3DaysAverage_LogDeaths=predict(Spline_3DaysAverage_LogDeaths,deriv=0))
ValuesSpline_3DaysAverageCases_Rate<-data.frame(SplineValue_3DaysAverageCases_Rate=predict(Spline_3DaysAverageCases_Rate,deriv=0))
ValuesSpline_3DaysAverageDeaths_Rate<-data.frame(SplineValue_3DaysAverageDeaths_Rate=predict(Spline_3DaysAverageDeaths_Rate,deriv=0))
# ValuesSpline_3DaysAverage_LogCases_Rate<-data.frame(SplineValue_3DaysAverage_LogCases_Rate=predict(Spline_3DaysAverage_LogCases_Rate,deriv=0))
# ValuesSpline_3DaysAverage_LogDeaths_Rate<-data.frame(SplineValue_3DaysAverage_LogDeaths_Rate=predict(Spline_3DaysAverage_LogDeaths_Rate,deriv=0))
MainDataset_Cases<-data.frame(MainDataset_Cases,ValuesSpline_3DaysAverageCases) %>%
select(DateReport,"Spline_3DaysAverageCases"="SplineValue_3DaysAverageCases.y")
MainDataset_Deaths<-data.frame(MainDataset_Deaths,ValuesSpline_3DaysAverageDeaths) %>%
select(DateReport,"Spline_3DaysAverageDeaths"="SplineValue_3DaysAverageDeaths.y")
# MainDataset_logCases<-data.frame(MainDataset_logCases,ValuesSpline_3DaysAverage_LogCases) %>%
#   select(DateReport,"Spline_3DaysAverage_logCases"="SplineValue_3DaysAverage_LogCases.y")
# MainDataset_logDeaths<-data.frame(MainDataset_logDeaths,ValuesSpline_3DaysAverage_LogDeaths) %>%
#   select(DateReport,"Spline_3DaysAverage_logDeaths"="SplineValue_3DaysAverage_LogDeaths.y")
MainDataset_Cases_Rate<-data.frame(MainDataset_Cases_Rate,ValuesSpline_3DaysAverageCases_Rate) %>%
select(DateReport,"Spline_3DaysAverageCases_Rate"="SplineValue_3DaysAverageCases_Rate.y")
MainDataset_Deaths_Rate<-data.frame(MainDataset_Deaths_Rate,ValuesSpline_3DaysAverageDeaths_Rate) %>%
select(DateReport,"Spline_3DaysAverageDeaths_Rate"="SplineValue_3DaysAverageDeaths_Rate.y")
# MainDataset_logCases_Rate<-data.frame(MainDataset_logCases_Rate,ValuesSpline_3DaysAverage_LogCases_Rate) %>%
#   select(DateReport,"Spline_3DaysAverage_logCases_Rate"="SplineValue_3DaysAverage_LogCases_Rate.y")
# MainDataset_logDeaths_Rate<-data.frame(MainDataset_logDeaths_Rate,ValuesSpline_3DaysAverage_LogDeaths_Rate) %>%
#   select(DateReport,"Spline_3DaysAverage_logDeaths_Rate"="SplineValue_3DaysAverage_LogDeaths_Rate.y")
MainDataset_<-MainDataset %>%
left_join(MainDataset_Cases,by='DateReport') %>%
left_join(MainDataset_Deaths,by='DateReport') %>%
# left_join(MainDataset_logCases,by='DateReport') %>%
# left_join(MainDataset_logDeaths,by='DateReport') %>%
left_join(MainDataset_Cases_Rate,by='DateReport') %>%
left_join(MainDataset_Deaths_Rate,by='DateReport') %>%
# left_join(MainDataset_logCases_Rate,by='DateReport') %>%
# left_join(MainDataset_logDeaths_Rate,by='DateReport')
# x <- zoo(MainDataset_$Spline_3DaysAverage_logCases,MainDataset_$DateReport)
# x <- na_interpolation(x, option = "linear") %>% fortify.zoo
#
# y <- zoo(MainDataset_$Spline_3DaysAverage_logDeaths,MainDataset_$DateReport)
# y <- na_interpolation(y, option = "linear") %>% fortify.zoo
#
# z <- zoo(MainDataset_$Spline_3DaysAverage_logCases_Rate,MainDataset_$DateReport)
# z <- na_interpolation(z, option = "linear") %>% fortify.zoo
#
# a <- zoo(MainDataset_$Spline_3DaysAverage_logDeaths_Rate,MainDataset_$DateReport)
# a <- na_interpolation(a, option = "linear") %>% fortify.zoo
# MainDataset_<-MainDataset_ %>%
#   left_join(x,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logCases_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(y,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logDeaths_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(z,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logCases_Rate_='.')
# MainDataset_<-MainDataset_ %>%
#   left_join(a,by=c('DateReport'='Index')) %>%
#   rename(Spline_3DaysAverage_logDeaths_Rate_='.')
return(MainDataset_)
}
BuildExtendedEpiDataset('Belgium')
library(GetEpiData)
MainDataset<-WHOCountryNames(GetEpiData(),ADM0NAME) %>%
mutate(DateReport=as.Date(parse_date_time(DateReport,c("dmy", "ymd","mdy")))) %>%
filter(ADM0NAME==country)
library(lubridate)
BuildExtendedEpiDataset('Belgium')
use_package('tidyr',type='Depends')
MainDataset<-WHOCountryNames(GetEpiData(),ADM0NAME) %>%
mutate(DateReport=as.Date(parse_date_time(DateReport,c("dmy", "ymd","mdy")))) %>%
filter(ADM0NAME==country)
country<-'Belgium'
MainDataset<-WHOCountryNames(GetEpiData(),ADM0NAME) %>%
mutate(DateReport=as.Date(parse_date_time(DateReport,c("dmy", "ymd","mdy")))) %>%
filter(ADM0NAME==country)
BuildExtendedEpiDataset('Belgium')
library(tidyr)
BuildExtendedEpiDataset('Belgium')
test<-BuildExtendedEpiDataset('Belgium')
View(test)
use_package('zoo',type='Depends')
use_package('stats',type='Depends')
use_package('imputeTS',type='Depends')
getwd()
document()
rm(list = c("BuildExtendedEpiDataset"))
document()
setwd('..')
install('BuildExtendedEpiDataset')
library(devtools)
install('RtChart')
RtChart('Belgium')
library('RtChart')
RtChart('Belgium')
SeverityExcel<-'C:/Users/romanc/Documents/GitHub/HIM/Shiny_PHSM/updating_process/rawdata_to_update.xlsx'
country<-'Belgium'
getwd()
setwd('C:/Users/romanc/Documents/GitHub/Packages/PHSMChart')
library(devtools)
use_package('BuildExtendedEpiDataset')
library('BuildExtendedEpiDataset')
LegendTimeLine<-bind_rows(data.frame(x=seq(0,100,1),Index='Masks',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='Schools',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='Businesses',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='Gatherings',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='Movements',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='Borders',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='GlobalIndex',Alpha=seq(0,100,1),Height=3))
EpiDataset<-BuildExtendedEpiDataset(country) %>%
select(ADM0NAME,DateReport,Spline_3DaysAverageCases,Spline_3DaysAverageDeaths)
View(EpiDataset)
country<-'Belgium'
StringencyDataset<-SeverityPerCountry(SeverityExcel,country)
use_package('ReadSeverityExcel')
library(ReadSeverityExcel)
StringencyDataset<-SeverityPerCountry(SeverityExcel,country)
SeverityExcel<-C:/Users/romanc/Documents/GitHub/HIM/Shiny_PHSM/updating_process/rawdata_to_update/SeverityIndex.xlsx''
SeverityExcel<-'C:/Users/romanc/Documents/GitHub/HIM/Shiny_PHSM/updating_process/rawdata_to_update/SeverityIndex.xlsx'
StringencyDataset<-SeverityPerCountry(SeverityExcel,country)
WholeDataset<-merge(EpiDataset,StringencyDataset,by.x=c('DateReport','ADM0NAME'),by.y=c('Date','ADM0NAME'),all=TRUE) %>%
replace_na(list(Spline_3DaysAverageCases = 0, Spline_3DaysAverageDeaths = 0))
StartDate<-min(WholeDataset$DateReport)
EndDate<-max(StringencyDataset$Date)
EpiCasesToPlot<-WholeDataset %>% select(DateReport,Cases=Spline_3DaysAverageCases) %>% filter(DateReport<=EndDate)
TopValueCases<-top_n(EpiCasesToPlot,1,Cases)
maxCases<-round(max(EpiCasesToPlot$Cases),0)
EpiDeathsToPlot<-WholeDataset %>% select(DateReport,Deaths=Spline_3DaysAverageDeaths) %>% filter(DateReport<=EndDate)
TopValueDeaths<-top_n(EpiDeathsToPlot,1,Deaths)
maxDeaths<-round(max(EpiDeathsToPlot$Deaths),0)
StringencyDataset<-WholeDataset %>% select(DateReport,c(GlobalIndex:Travels)) %>%
pivot_longer(cols=c(GlobalIndex:Travels)) %>%
mutate(name=case_when(name=='School'~'Schools',
name=='Workplace'~'Businesses',
name=='GlobalIndex'~'GlobalIndex',
name=='Masks'~'Masks',
name=='Gatherings'~'Gatherings',
name=='StayHome'~'Movements',
name=='Travels'~'Travels')) %>%
mutate(Height=if_else(name=='GlobalIndex',100,50,50))
Epicurve_Cases<-ggplot(EpiCasesToPlot)+
theme_minimal()+
labs(x="Date of report",y='Number of Cases',linetype=1)+
geom_area(aes(x=DateReport,y=Cases),color='grey',fill='light grey',size=0.8,show.legend = FALSE)+
geom_point(data=TopValueCases,aes(x=DateReport,y=Cases))+
geom_label(data=TopValueCases, aes(x=DateReport,y=Cases,label = round(Cases,0)),hjust=-0.5)+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
scale_y_continuous(position='left',sec.axis = dup_axis(),limits=c(0,maxCases+1))+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank(),axis.title.y.left=element_blank(),
axis.text.y.right=element_blank())+
annotate("text", x = StartDate+20, y=0,label = "Number of daily \n cases  over time",vjust=-0.5)+
theme_nothing()
use_package('ReadSeverityExcel',type='Depends')
use_package('BuildExtendedEpiDataset',type='Depends')
use_package('ggplot2',type='Depends')
Epicurve_Cases<-ggplot(EpiCasesToPlot)+
theme_minimal()+
labs(x="Date of report",y='Number of Cases',linetype=1)+
geom_area(aes(x=DateReport,y=Cases),color='grey',fill='light grey',size=0.8,show.legend = FALSE)+
geom_point(data=TopValueCases,aes(x=DateReport,y=Cases))+
geom_label(data=TopValueCases, aes(x=DateReport,y=Cases,label = round(Cases,0)),hjust=-0.5)+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
scale_y_continuous(position='left',sec.axis = dup_axis(),limits=c(0,maxCases+1))+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank(),axis.title.y.left=element_blank(),
axis.text.y.right=element_blank())+
annotate("text", x = StartDate+20, y=0,label = "Number of daily \n cases  over time",vjust=-0.5)+
theme_nothing()
library(ggplot2)
Epicurve_Cases<-ggplot(EpiCasesToPlot)+
theme_minimal()+
labs(x="Date of report",y='Number of Cases',linetype=1)+
geom_area(aes(x=DateReport,y=Cases),color='grey',fill='light grey',size=0.8,show.legend = FALSE)+
geom_point(data=TopValueCases,aes(x=DateReport,y=Cases))+
geom_label(data=TopValueCases, aes(x=DateReport,y=Cases,label = round(Cases,0)),hjust=-0.5)+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
scale_y_continuous(position='left',sec.axis = dup_axis(),limits=c(0,maxCases+1))+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank(),axis.title.y.left=element_blank(),
axis.text.y.right=element_blank())+
annotate("text", x = StartDate+20, y=0,label = "Number of daily \n cases  over time",vjust=-0.5)+
theme_nothing()
Epicurve_Cases<-ggplot(EpiCasesToPlot)+
theme_minimal()+
labs(x="Date of report",y='Number of Cases',linetype=1)+
geom_area(aes(x=DateReport,y=Cases),color='grey',fill='light grey',size=0.8,show.legend = FALSE)+
geom_point(data=TopValueCases,aes(x=DateReport,y=Cases))+
geom_label(data=TopValueCases, aes(x=DateReport,y=Cases,label = round(Cases,0)),hjust=-0.5)+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
scale_y_continuous(position='left',sec.axis = dup_axis(),limits=c(0,maxCases+1))+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank(),axis.title.y.left=element_blank(),
axis.text.y.right=element_blank())+
annotate("text", x = StartDate+20, y=0,label = "Number of daily \n cases  over time",vjust=-0.5)
Epicurve_Cases
Epicurve_Cases<-ggplot(EpiCasesToPlot)+
theme_minimal()+
labs(x="Date of report",y='Number of Cases',linetype=1)+
geom_area(aes(x=DateReport,y=Cases),color='grey',fill='light grey',size=0.8,show.legend = FALSE)+
geom_point(data=TopValueCases,aes(x=DateReport,y=Cases))+
geom_label(data=TopValueCases, aes(x=DateReport,y=Cases,label = round(Cases,0)),hjust=-0.5)+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
scale_y_continuous(position='left',sec.axis = dup_axis(),limits=c(0,maxCases+1))+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank(),axis.title.y.left=element_blank(),
axis.text.y.right=element_blank())+
annotate("text", x = StartDate+20, y=0,label = "Number of daily \n cases  over time",vjust=-0.5)+
theme_blank()
Epicurve_Cases<-ggplot(EpiCasesToPlot)+
theme_minimal()+
labs(x="Date of report",y='Number of Cases',linetype=1)+
geom_area(aes(x=DateReport,y=Cases),color='grey',fill='light grey',size=0.8,show.legend = FALSE)+
geom_point(data=TopValueCases,aes(x=DateReport,y=Cases))+
geom_label(data=TopValueCases, aes(x=DateReport,y=Cases,label = round(Cases,0)),hjust=-0.5)+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
scale_y_continuous(position='left',sec.axis = dup_axis(),limits=c(0,maxCases+1))+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank(),axis.title.y.left=element_blank(),
axis.text.y.right=element_blank())+
annotate("text", x = StartDate+20, y=0,label = "Number of daily \n cases  over time",vjust=-0.5)+
theme_minimal()
Epicurve_Cases
Epicurve_Cases<-ggplot(EpiCasesToPlot)+
theme_minimal()+
labs(x="Date of report",y='Number of Cases',linetype=1)+
geom_area(aes(x=DateReport,y=Cases),color='grey',fill='light grey',size=0.8,show.legend = FALSE)+
geom_point(data=TopValueCases,aes(x=DateReport,y=Cases))+
geom_label(data=TopValueCases, aes(x=DateReport,y=Cases,label = round(Cases,0)),hjust=-0.5)+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
scale_y_continuous(position='left',sec.axis = dup_axis(),limits=c(0,maxCases+1))+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank(),axis.title.y.left=element_blank(),
axis.text.y.right=element_blank())+
annotate("text", x = StartDate+20, y=0,label = "Number of daily \n cases  over time",vjust=-0.5)+
theme_void()
Epicurve_Cases
Epicurve_Deaths<-ggplot(EpiDeathsToPlot)+
theme_minimal()+
labs(x="Date of report",y='Number of deaths',linetype=1)+
geom_area(aes(x=DateReport,y=Deaths),color='grey',fill='light grey',size=0.8,show.legend = FALSE)+
geom_point(data=TopValueDeaths,aes(x=DateReport,y=Deaths))+
geom_label(data=TopValueDeaths, aes(x=DateReport,y=Deaths,label = round(Deaths,0)),hjust=-0.5)+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
scale_y_continuous(position='left',sec.axis = dup_axis(),limits=c(0,maxDeaths+1))+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank(),axis.title.y.left=element_blank(),
axis.text.y.right=element_blank())+
annotate("text", x = StartDate+20, y=0,label = "Number of daily \n deaths over time",vjust=-0.5)+
theme_void()
PHSM_TimeLine<-ggplot(StringencyDataset,aes(x=DateReport,y=Height))+
geom_point(aes(color=value),alpha=0)+
scale_color_gradient(high = 'black', low = 'white',breaks=c(0,100),labels=c('No measures','Most severe measures'))+
scale_alpha_continuous(limits = c(0,100),range = c(0, 1))+
geom_tile(stat='identity',aes(x=DateReport,y=Height,alpha=value,fill=factor(name,levels=c('Masks',"Schools",'Businesses','Gatherings','Movements','Travels',"GlobalIndex"))),position='stack')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 50, label = "PHSM Severity Index",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 125, label = "International Travel",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 175, label = "Movements",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 225, label = "Gatherings",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 275, label = "Businesses",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 325, label = "School",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 375, label = "Masks",color='white')+
annotate('text', x = EndDate, y=50, label = 'PHSM Severity Index', color='#000000',hjust = 0)+
annotate("text", x = EndDate, y = 125, label = "International Travel",color='#810E1F',hjust=0)+
annotate("text", x = EndDate, y = 175, label = "Movements",color='#008DC9',hjust=0)+
annotate("text", x = EndDate, y = 225, label = "Gatherings",color='#043062',hjust=0)+
annotate("text", x = EndDate, y = 275, label = "Businesses",color='#0C6E61',hjust=0)+
annotate("text", x = EndDate, y = 325, label = "Schools",color='#C59507',hjust=0)+
annotate("text", x = EndDate, y = 375, label = "Masks",color='#D86422',hjust=0)+
scale_fill_manual(breaks=c('Masks',"Schools",'Businesses','Gatherings','Movements','Travels',"GlobalIndex"),
labels=c('Masks','Schools measures', 'Workplace measures','Restrictions on gatherings','Stay-at-home requirements', 'International travel restrictions','Global Severity Index'),
values=c('#D86422','#C59507','#0C6E61','#043062','#008DC9','#810E1F','#000000'))+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
labs(y='Measure Severity',x='',color='PHSM Severity Index Scale')+
scale_y_continuous(position='left')+
coord_cartesian(clip = 'off')+
guides(alpha=FALSE,fill=FALSE,nrow=2)+
theme_minimal()+
theme(plot.margin = unit(c(1,5,1,1),"lines"),axis.text.y=element_blank(),axis.text.x = element_text(angle = 90),axis.ticks.y=element_blank(),legend.title=element_text(vjust=0.85),legend.box="vertical",legend.position='bottom',legend.key.width = unit(1.5, "cm"),legend.spacing.y = unit(0.5, 'cm'),legend.spacing.x = unit(1, 'cm'))
TrickLegend<-ggplot(LegendTimeLine)+
geom_tile(stat='identity',aes(x=x,y=Height,alpha=Alpha,fill=factor(Index,levels=c('Masks',"Schools",'Businesses','Gatherings','Movements','Borders',"GlobalIndex"))),position='stack')+
scale_fill_manual(breaks=c('Masks','Schools','Businesses','Gatherings','Movements','Borders','GlobalIndex'),
labels=c('Masks','Schools measures', 'Workplace measures', 'Restrictions on gatherings', 'Stay-at-home requirements', 'International travel restrictions','Global Severity Index'),
values=c('#D86422','#C59507','#0C6E61','#043062','#008DC9','#810E1F','#000000'))+
theme_void()+
theme(legend.position="none",plot.title=element_text(hjust=0.5,size=10))+
scale_y_continuous(limits=c(-5,NA))+
scale_x_continuous(limits=c(-100,200))+
annotate("text", x = -10, y = -3, label = "No measures")+
annotate("text", x = 110, y = -3, label = "Most severe measures")+
scale_alpha_continuous(range = c(0, 1))+
labs(title='Legend PHSM Severity Index Scale')
ThreePlots<-plot_grid(Epicurve_Cases+theme(legend.position='none'),
Epicurve_Deaths+theme(legend.position='none'),
PHSM_TimeLine+theme(legend.position='none'),align='v',axis='lr',nrow=3,rel_heights=c(2,2,3))
Legend<-plot_grid(NA,TrickLegend,NA,ncol=3,rel_widths=c(1,3,1))
Overview<-plot_grid(ThreePlots,Legend,nrow=2,rel_heights=c(7,1))
use_package('cowplot',type='Depends')
ThreePlots<-plot_grid(Epicurve_Cases+theme(legend.position='none'),
Epicurve_Deaths+theme(legend.position='none'),
PHSM_TimeLine+theme(legend.position='none'),align='v',axis='lr',nrow=3,rel_heights=c(2,2,3))
Legend<-plot_grid(NA,TrickLegend,NA,ncol=3,rel_widths=c(1,3,1))
Overview<-plot_grid(ThreePlots,Legend,nrow=2,rel_heights=c(7,1))
library(cowplot)
ThreePlots<-plot_grid(Epicurve_Cases+theme(legend.position='none'),
Epicurve_Deaths+theme(legend.position='none'),
PHSM_TimeLine+theme(legend.position='none'),align='v',axis='lr',nrow=3,rel_heights=c(2,2,3))
Legend<-plot_grid(NA,TrickLegend,NA,ncol=3,rel_widths=c(1,3,1))
Overview<-plot_grid(ThreePlots,Legend,nrow=2,rel_heights=c(7,1))
Overview
LegendTimeLine<-bind_rows(data.frame(x=seq(0,100,1),Index='Masks',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='Schools',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='Businesses',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='Gatherings',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='Movements',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='Borders',Alpha=seq(0,100,1),Height=3),
data.frame(x=seq(0,100,1),Index='GlobalIndex',Alpha=seq(0,100,1),Height=3))
EpiDataset<-BuildExtendedEpiDataset(country) %>%
select(ADM0NAME,DateReport,Spline_3DaysAverageCases,Spline_3DaysAverageDeaths)
StringencyDataset<-SeverityPerCountry(SeverityExcel,country)
WholeDataset<-merge(EpiDataset,StringencyDataset,by.x=c('DateReport','ADM0NAME'),by.y=c('Date','ADM0NAME'),all=TRUE) %>%
replace_na(list(Spline_3DaysAverageCases = 0, Spline_3DaysAverageDeaths = 0))
#This is to make sure both datasets aligned in terms of dates even if we have no data one side or another
#Important when it comes to align the charts
StartDate<-min(WholeDataset$DateReport)
EndDate<-max(StringencyDataset$Date)-1
EpiCasesToPlot<-WholeDataset %>% select(DateReport,Cases=Spline_3DaysAverageCases) %>% filter(DateReport<=EndDate)
TopValueCases<-top_n(EpiCasesToPlot,1,Cases)
maxCases<-round(max(EpiCasesToPlot$Cases),0)
EpiDeathsToPlot<-WholeDataset %>% select(DateReport,Deaths=Spline_3DaysAverageDeaths) %>% filter(DateReport<=EndDate)
TopValueDeaths<-top_n(EpiDeathsToPlot,1,Deaths)
maxDeaths<-round(max(EpiDeathsToPlot$Deaths),0)
StringencyDataset<-WholeDataset %>% select(DateReport,c(GlobalIndex:Travels)) %>%
pivot_longer(cols=c(GlobalIndex:Travels)) %>%
mutate(name=case_when(name=='School'~'Schools',
name=='Workplace'~'Businesses',
name=='GlobalIndex'~'GlobalIndex',
name=='Masks'~'Masks',
name=='Gatherings'~'Gatherings',
name=='StayHome'~'Movements',
name=='Travels'~'Travels')) %>%
mutate(Height=if_else(name=='GlobalIndex',100,50,50))
Epicurve_Cases<-ggplot(EpiCasesToPlot)+
theme_minimal()+
labs(x="Date of report",y='Number of Cases',linetype=1)+
geom_area(aes(x=DateReport,y=Cases),color='grey',fill='light grey',size=0.8,show.legend = FALSE)+
geom_point(data=TopValueCases,aes(x=DateReport,y=Cases))+
geom_label(data=TopValueCases, aes(x=DateReport,y=Cases,label = round(Cases,0)),hjust=-0.5)+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
scale_y_continuous(position='left',sec.axis = dup_axis(),limits=c(0,maxCases+1))+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank(),axis.title.y.left=element_blank(),
axis.text.y.right=element_blank())+
annotate("text", x = StartDate+20, y=0,label = "Number of daily \n cases  over time",vjust=-0.5)+
theme_void()
Epicurve_Deaths<-ggplot(EpiDeathsToPlot)+
theme_minimal()+
labs(x="Date of report",y='Number of deaths',linetype=1)+
geom_area(aes(x=DateReport,y=Deaths),color='grey',fill='light grey',size=0.8,show.legend = FALSE)+
geom_point(data=TopValueDeaths,aes(x=DateReport,y=Deaths))+
geom_label(data=TopValueDeaths, aes(x=DateReport,y=Deaths,label = round(Deaths,0)),hjust=-0.5)+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
scale_y_continuous(position='left',sec.axis = dup_axis(),limits=c(0,maxDeaths+1))+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.text.y.left=element_blank(),axis.title.y.right=element_blank(),axis.title.y.left=element_blank(),
axis.text.y.right=element_blank())+
annotate("text", x = StartDate+20, y=0,label = "Number of daily \n deaths over time",vjust=-0.5)+
theme_void()
PHSM_TimeLine<-ggplot(StringencyDataset,aes(x=DateReport,y=Height))+
geom_point(aes(color=value),alpha=0)+
scale_color_gradient(high = 'black', low = 'white',breaks=c(0,100),labels=c('No measures','Most severe measures'))+
scale_alpha_continuous(limits = c(0,100),range = c(0, 1))+
geom_tile(stat='identity',aes(x=DateReport,y=Height,alpha=value,fill=factor(name,levels=c('Masks',"Schools",'Businesses','Gatherings','Movements','Travels',"GlobalIndex"))),position='stack')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 50, label = "PHSM Severity Index",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 125, label = "International Travel",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 175, label = "Movements",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 225, label = "Gatherings",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 275, label = "Businesses",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 325, label = "School",color='white')+
# annotate("text", x = StartDate+(EndDate-StartDate)*1.9/3, y = 375, label = "Masks",color='white')+
annotate('text', x = EndDate, y=50, label = 'PHSM Severity Index', color='#000000',hjust = 0)+
annotate("text", x = EndDate, y = 125, label = "International Travel",color='#810E1F',hjust=0)+
annotate("text", x = EndDate, y = 175, label = "Movements",color='#008DC9',hjust=0)+
annotate("text", x = EndDate, y = 225, label = "Gatherings",color='#043062',hjust=0)+
annotate("text", x = EndDate, y = 275, label = "Businesses",color='#0C6E61',hjust=0)+
annotate("text", x = EndDate, y = 325, label = "Schools",color='#C59507',hjust=0)+
annotate("text", x = EndDate, y = 375, label = "Masks",color='#D86422',hjust=0)+
scale_fill_manual(breaks=c('Masks',"Schools",'Businesses','Gatherings','Movements','Travels',"GlobalIndex"),
labels=c('Masks','Schools measures', 'Workplace measures','Restrictions on gatherings','Stay-at-home requirements', 'International travel restrictions','Global Severity Index'),
values=c('#D86422','#C59507','#0C6E61','#043062','#008DC9','#810E1F','#000000'))+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate))+
labs(y='Measure Severity',x='',color='PHSM Severity Index Scale')+
scale_y_continuous(position='left')+
coord_cartesian(clip = 'off')+
guides(alpha=FALSE,fill=FALSE,nrow=2)+
theme_minimal()+
theme(plot.margin = unit(c(1,5,1,1),"lines"),axis.text.y=element_blank(),axis.text.x = element_text(angle = 90),axis.ticks.y=element_blank(),legend.title=element_text(vjust=0.85),legend.box="vertical",legend.position='bottom',legend.key.width = unit(1.5, "cm"),legend.spacing.y = unit(0.5, 'cm'),legend.spacing.x = unit(1, 'cm'))
TrickLegend<-ggplot(LegendTimeLine)+
geom_tile(stat='identity',aes(x=x,y=Height,alpha=Alpha,fill=factor(Index,levels=c('Masks',"Schools",'Businesses','Gatherings','Movements','Borders',"GlobalIndex"))),position='stack')+
scale_fill_manual(breaks=c('Masks','Schools','Businesses','Gatherings','Movements','Borders','GlobalIndex'),
labels=c('Masks','Schools measures', 'Workplace measures', 'Restrictions on gatherings', 'Stay-at-home requirements', 'International travel restrictions','Global Severity Index'),
values=c('#D86422','#C59507','#0C6E61','#043062','#008DC9','#810E1F','#000000'))+
theme_void()+
theme(legend.position="none",plot.title=element_text(hjust=0.5,size=10))+
scale_y_continuous(limits=c(-5,NA))+
scale_x_continuous(limits=c(-100,200))+
annotate("text", x = -10, y = -3, label = "No measures")+
annotate("text", x = 110, y = -3, label = "Most severe measures")+
scale_alpha_continuous(range = c(0, 1))+
labs(title='Legend PHSM Severity Index Scale')
ThreePlots<-plot_grid(Epicurve_Cases+theme(legend.position='none'),
Epicurve_Deaths+theme(legend.position='none'),
PHSM_TimeLine+theme(legend.position='none'),align='v',axis='lr',nrow=3,rel_heights=c(2,2,3))
Legend<-plot_grid(NA,TrickLegend,NA,ncol=3,rel_widths=c(1,3,1))
Overview<-plot_grid(ThreePlots,Legend,nrow=2,rel_heights=c(7,1))
Overview
getwd()
document()
document()
